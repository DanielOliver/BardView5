package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __0_init_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0_init_down_sql() ([]byte, error) {
	return bindata_read(
		__0_init_down_sql,
		"0_init.down.sql",
	)
}

var __0_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x8f\xa3\x36\x17\xbe\x8f\x94\xff\x70\x14\x45\x02\x5e\xf1\x4a\xdd\x55\xa5\x55\xb3\x9a\x95\xa2\x94\x99\x46\x9d\x92\x96\x64\xfa\xa1\xaa\x42\x0e\x38\x19\x6f\xc0\x64\xb0\xd9\xd9\xb4\xbb\xff\xbd\xc2\x36\x60\x32\x81\x64\x33\xc9\x6c\x2f\xe2\x3b\x30\xe7\xd3\xe7\x3c\xcf\xc1\x41\x8a\x11\xc7\xc0\xd1\x3c\xc2\xd0\xcb\x18\x4e\x7b\xdd\x8e\xd9\xed\x00\x00\x90\x10\xf4\x35\x27\x4b\x86\x53\x82\x22\xb9\x9b\xaf\x20\xa1\x8c\xa7\x88\x50\x0e\xb9\xa8\xbf\x5e\x55\x7b\xf9\x5a\xa7\x24\x46\xe9\x06\x56\x78\x63\xcb\x9d\xac\xae\x34\xb8\x47\xa9\xf9\xfa\x8d\x05\xc7\x2d\x9a\x70\xa0\x59\x14\x29\xe5\x32\x98\xd0\x9f\x6f\x0a\x87\x73\xcf\x8e\x5d\x3b\x14\x23\xa9\x8d\x93\x18\x33\x8e\xe2\x35\x3c\x12\x7e\x9f\x64\x5c\xbc\x81\xbf\x13\x8a\x21\xc4\x0b\x94\x45\x1c\x4c\x9a\x3c\x9a\x16\x20\x7d\xcf\xc8\x78\x60\x58\xdb\x5e\xe3\xc5\x02\x07\x9c\x7c\xc0\x7e\x28\x8e\xe2\xb4\xca\x69\x28\xd5\xc2\x5e\xcf\xbf\x2c\x25\x84\xf9\x48\x78\x2d\x77\xe6\x49\x12\x61\x44\x8f\xce\xb5\xf2\xba\x8a\x90\xa7\x19\xb6\x8a\x20\x62\x44\xa2\xea\x63\x8e\x3f\x1e\x7f\xaa\x4f\x8a\x86\xa2\x58\x8f\xfd\xb4\xca\x39\x5a\xb2\x2d\xe5\x7f\xfe\x75\x0a\xe5\x52\xfd\x68\xe2\x4e\x67\xde\x70\xec\xce\x60\xb1\xf2\x45\x0b\xaa\x52\x9d\x6f\xaa\x4e\xbc\x9e\x78\xce\xf8\xc6\x85\x1f\x9d\x3f\xc0\xac\x7a\xc4\xaa\xf7\xaa\xe7\x5c\x3b\x9e\xe3\x8e\x9c\xa9\xc2\x01\x30\x49\x68\x75\x3b\xd6\xdb\xdc\x9a\xc2\x89\x8c\x92\x87\x0c\x03\xa1\x21\xfe\x28\x5b\x5e\x9c\x8d\x9f\xc9\x37\x09\x2d\x65\xc5\xfb\x9a\xac\xc2\x98\x34\x89\xb0\xcf\x37\x6b\xdc\x08\x34\xf5\xd5\x0e\x3b\xa5\xb6\x03\xb0\x67\xab\x8b\xeb\xeb\xb4\x6d\xb7\x55\x54\x5b\xa6\x4e\x5a\x62\x71\x16\x71\xb2\x8e\xb0\x8f\x18\x23\x4b\x1a\x63\xca\x99\x8f\xa2\x28\x79\xc4\xe1\xa9\xda\x52\x99\x62\x1b\xc6\x71\xec\xc7\x88\xa2\x25\xde\x3e\xb3\x13\x99\x6a\x2b\xb8\xfc\xb0\xc5\x59\xe7\xe9\xd5\x6b\xae\xaa\x29\x30\xf3\xbd\xa6\xba\x3b\x92\xdb\x84\xfa\x0b\xb7\x5d\xb8\xed\xb8\x5c\xb7\x72\xdb\x59\xe9\xa7\x42\x47\x51\x9a\xb2\x68\xbe\x06\x35\x09\x47\x8a\xf6\x6d\x60\x26\xdd\xd9\x66\x6e\x2a\xbf\x12\xf4\x64\x37\x1a\x3b\x2f\x0f\xea\x5c\x56\xe1\xee\x73\xe0\xa5\xd2\x72\x41\x9a\x0b\xd2\x1c\x99\xeb\x56\xa4\x11\x65\x56\x15\xce\x73\xcf\xb5\x9e\x21\x31\x0b\x9e\x4b\xf9\x8b\x43\x95\xd6\x8c\xf9\x63\x1b\x60\xed\xc3\xaa\x76\x98\xd2\x0c\xe5\x19\x6c\x30\xa4\x92\x7b\x10\x50\x1d\x62\xea\x05\xb1\x31\xe0\x24\xa1\x15\x2e\x6a\x6c\x97\x9f\x62\x0b\x1c\x0a\x41\x7f\xbd\x6a\x9f\xe3\x4f\xd4\xe6\x2d\x11\xb0\x6c\xfe\x1e\x07\xfc\x88\x10\x94\xe4\x7f\x20\x86\x35\x4e\x63\xc2\x58\xed\x24\x8e\x18\x80\x4b\x2d\x17\x86\xba\x30\xd4\x91\xb9\xfe\x7a\x0c\x25\x11\xa5\xdc\x3d\xed\xa0\xad\x7a\xfd\x3c\xca\x83\x84\x86\x24\x77\x5e\x92\xe0\x7b\x96\xd0\xf9\xc9\x94\x2f\x08\x8e\xc2\x8a\x5d\x9f\xcb\xad\xed\xbc\xaa\x41\xc8\x79\x79\x55\x33\x24\xcf\xbd\xc1\x94\xdc\xdc\xf3\xb7\xa1\x2a\x47\xde\x2c\x1c\x62\x52\x55\x43\x83\x4d\xb5\xbb\xc7\x68\x51\x51\x7b\xac\x9e\x93\xd5\x0b\x46\x19\xbb\x53\xc7\x9b\xc1\xd8\x9d\x4d\xf4\xdf\xaf\xdc\x31\xbb\xf5\xfa\xc9\xde\xba\x31\xb2\xba\x9d\xa9\x73\xeb\x8c\x66\x60\xdc\x31\x9c\x82\x97\x44\xd8\xb0\x61\x81\x22\x86\x6d\xc8\x91\xa0\xdb\xf9\xed\x07\xc7\x73\xc0\x9d\xcc\xc0\xf9\x7d\x3c\x9d\x4d\x4d\x25\xf1\x0a\xae\xbd\xc9\x4f\xb5\xab\x1e\xf9\xa9\xe0\xe3\x2b\x5d\xe3\x0b\x78\x6d\xc3\x4d\x94\xcc\x51\x64\x48\xb7\x4f\xe7\x7c\xa9\x58\x06\x31\xf2\x9c\xe1\xcc\x81\x89\x07\x9e\xf3\xf3\xed\x70\xe4\xc0\xf5\x9d\x3b\x9a\x8d\x27\x2e\x2c\xb1\x9c\x19\xfd\xda\x4f\xbe\x69\x79\xce\xec\xce\x73\xa7\x0a\x3d\xbb\x9d\xe1\x14\xfa\x7d\x50\x8e\x8c\xc3\xc3\xd3\x08\xfd\xbe\xac\x93\xdb\xa1\x7b\x73\x37\xbc\x71\x60\xfa\xcb\xed\x97\x79\xb5\x14\xb1\x9c\xc1\xb9\x32\x4d\xcd\x4e\x36\x5d\x20\xfa\x19\x09\xd5\xdd\xa1\x94\x4c\xa8\x02\x94\x8c\x84\xed\x77\x8f\xfa\xb4\xbe\x5b\x89\x56\x4f\x07\xe8\xd3\x20\xa3\x49\x5f\xf5\xc9\x1e\x7d\x22\xe9\x3b\xb4\x14\x1d\xbd\x2d\x9c\xa4\x90\xe2\x75\x84\x02\x0c\x8b\x8c\x4a\x84\x5b\x62\x8a\x53\xc4\xb1\xbf\x62\x19\x09\x4d\x05\x13\x29\xe6\x59\x9a\x73\x4f\x31\xc4\xc9\xd7\x11\xa2\xcb\x0c\x2d\x31\xb0\x87\xa8\xdb\x41\x4c\x9c\x04\xc3\x51\x0e\x5a\x2c\x9b\x33\x9e\x12\xba\x34\x35\xa4\x51\xe6\x4c\x9e\xf8\x42\x53\x10\x25\xc1\xca\x2f\x27\x15\xd3\xb2\x8d\xcd\x66\xb3\x89\xe3\x30\xbc\xbf\x7f\xfd\x6d\x1e\x76\xc6\x8c\x2d\xac\x2a\xd7\xa7\x4f\x50\x6a\x4a\x11\x0d\x93\xd8\xb4\xfe\xf7\x0a\x7f\x67\x1b\xdf\x14\xab\x51\xd6\xb2\x0d\x30\x6c\xc3\xb0\xec\x57\xf6\xeb\x37\xd6\x60\x50\x44\xf6\xb6\xdb\xe9\xf7\x77\xa2\x87\x48\xa0\x0d\x12\x3d\xf4\x8e\xb3\xc5\xdf\xa9\xd5\xed\xfc\x3a\xbc\xbd\x73\xa6\x60\x6e\x27\xd1\xde\x0d\x1b\x6d\x8d\x22\x84\xfe\xf9\xdc\x04\x64\x75\x6a\x80\xc2\xb0\x91\xab\x13\x32\x4f\x24\x6a\x0c\x56\x09\x48\x80\x6b\x32\x53\x95\x5e\xc1\xc8\xb6\x1a\xa2\xec\x62\xde\xb1\xb5\xd9\xc4\xce\x67\x7e\x2d\x0f\x05\xf6\x11\xbd\xab\x0f\xc0\x3d\x1b\x0a\xbf\x6c\x90\x21\xe5\xc9\x80\x1e\x09\x07\xf8\xa1\x37\x80\x1e\xc3\xb2\x65\x48\xd8\x83\xcf\x22\x93\xf5\x84\xef\x2d\x73\xfc\x01\x45\x59\x2e\x80\x82\x00\x33\x26\x8e\xc1\x2c\x03\x91\xf3\x95\x0d\x95\x99\xe2\xde\xb4\xbc\xe4\x90\xcf\x5b\xed\xa1\x26\xe3\xdd\xcd\x91\xd7\x55\xd9\x1d\x9a\xad\xff\xbf\x7b\x07\x06\x09\x0d\x6b\x30\x50\xd3\xee\x55\x61\xa5\x56\xbb\x13\x0f\xcc\xa7\x62\x03\xfc\x60\x58\x79\x1a\x2b\x5f\x8d\x4a\x6c\xe8\x7e\x5f\x7a\x7c\xa5\x85\x63\x89\x22\xff\x37\x00\x00\xff\xff\x98\x53\x1b\xb9\xf9\x1f\x00\x00")

func _0_init_up_sql() ([]byte, error) {
	return bindata_read(
		__0_init_up_sql,
		"0_init.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xcb\x8e\x23\xc7\xd1\x85\xd7\xac\xa7\xa8\x9f\x80\x7e\x90\x40\xa3\x5d\xf7\x8b\x80\xd9\x48\xf0\xd6\x0b\x6f\x1d\x46\x23\xb3\x32\xb3\x41\x78\x9a\xec\x21\xd9\x52\x68\x0c\xbd\xbb\xf1\x65\x24\x31\xb6\x25\x6f\x0c\x2f\x6a\xaa\x59\x93\x97\x88\x73\x4e\x9c\x88\x77\xb7\xfd\xcd\xbd\xc6\xfa\xed\xf4\x7a\x75\xf7\xd3\xe5\x7c\xab\xaa\xd3\xdb\xfb\xe5\x7a\xaf\x0f\xd5\x6e\xef\x7f\xb9\xc7\xdb\xbe\xda\xed\xb7\xcb\xdb\xfb\x35\xde\x6e\x7f\x78\xfd\x7a\x7a\xe7\x43\x7a\xbb\xf3\x3a\x5d\xf8\xf7\x76\xbf\x9e\xce\xaf\xb7\x7d\x75\xac\xaa\xf4\x71\xde\x6a\x7f\x3a\x07\x77\x77\x2f\xd7\xe8\xc2\x81\xbf\xea\xbf\xfc\x95\xb3\x9e\xea\xb3\x7b\x8b\xb5\xad\x3f\xd6\x87\xc7\xd7\x78\xbd\x5e\xae\xc7\xfa\xef\xd5\xee\xf5\x6b\xfe\x55\x7f\xff\xa9\xe6\xaa\xe7\x3f\xc5\x9f\xff\x1c\x5d\x88\xd7\x43\x8e\x85\xdf\x3f\x7c\xa4\x14\xaf\xf9\xd8\xe3\xb1\xda\x9d\x52\xde\xf0\x7f\x9f\xea\xf3\xe9\x33\x47\xec\xae\xf1\xfe\x71\x3d\xf3\xf3\xa9\x4e\x6f\xf7\xe7\x3f\x72\x7a\x3a\xec\x39\xa8\xfe\xee\xcb\xf7\xf5\x77\x3f\xed\x2d\x92\x7c\xd7\xb1\xda\xfd\x5a\x55\xbb\x9f\xdc\xb5\xf6\x1f\xa9\xb6\x7b\xec\x92\x6a\xf7\x62\xe1\x7c\xaa\x4f\x97\xe7\x1f\x2f\xef\xbf\x1c\xfe\xdf\x7f\xa4\xa7\xfa\xf5\xeb\x91\x58\x9f\x7f\xfc\x7c\xb9\xc5\xc3\xb1\xfa\xdf\x85\x51\x76\xf9\x8f\xf4\xfc\x03\x91\x1c\x8e\x4f\x1c\x51\xfd\x5a\x55\x44\xf8\xf2\xd2\xbc\x9c\xce\xa7\xfb\x4b\xb8\xfc\x7c\x7e\xb9\x7d\xf9\x5c\x7f\x2a\xd8\x1e\xf6\xa2\x6d\x12\x5d\xbc\x68\xb3\x88\x36\xcd\xef\x3f\x29\x89\x36\xed\xbf\xfe\xce\xdf\xfe\xc3\x7a\x7b\xf6\x0f\x6a\xff\xfd\xfe\xc3\xef\xd2\xf8\xc8\xe2\x9f\x75\x50\xed\x76\xbf\x89\xfe\xa9\xda\xed\xf6\xf6\xed\x99\x6f\xcf\xb7\x2f\x9f\xf7\x4f\xd5\xee\xf8\x9b\x7c\x3f\xde\xff\xeb\x6c\xe3\x26\x3a\x2e\xa2\x63\x10\x5d\x92\xa8\xeb\x45\xfb\x49\xb4\x9d\x45\x7d\xb4\x6f\xeb\x60\x6b\xe7\x46\xb4\x1d\x44\x87\x51\xb4\xe9\x44\xc7\x28\x9a\x5a\xd1\xc1\x89\x86\x20\x3a\x8e\xa2\x6e\xb4\xb7\xef\x45\x57\x27\xba\xf2\xad\xb3\x33\xd6\x55\x74\x98\x44\xd7\x20\xba\xf2\x6d\x12\x9d\x38\xdb\x89\xba\x56\xd4\x39\xd1\xa1\x13\x6d\xa2\x68\xbf\x88\xb6\xab\xe8\x94\x44\xb7\xc6\xd6\xf9\x46\x34\xac\xf6\x78\x7e\x7b\x8b\xcb\x07\xd1\xad\xb3\xb8\xa7\x46\xb4\xef\x44\x97\xd6\xf6\xf4\xbd\xe8\xc6\x39\x9b\x68\x47\xbe\xac\xf3\xa2\x7d\x23\x1a\x67\xd1\xd0\xdb\xbb\xdf\x44\x37\xee\x22\x9f\x56\x74\x71\xa2\x6d\x2b\xba\xcd\x76\x7f\x68\xcb\x9a\x4e\x34\x34\xa2\x9b\x17\x6d\x17\xd1\x21\x8a\xce\xde\xf2\x5f\xa2\xc5\x16\xc3\x37\x8c\x57\x30\x03\x6b\x62\x19\x45\xbb\x59\x74\xf0\xa2\xcb\x24\x3a\xf6\xa2\x4b\x27\xda\x75\xa2\x7e\x15\x5d\xbd\xa8\x4b\xa2\x5d\x63\x78\x2c\x9b\xa8\x9b\x45\x17\xf8\x69\x0c\x17\xd6\xb9\x45\xd4\x27\xc3\x1f\xac\xb9\x3f\xad\xa2\xa3\xb3\xf5\xdd\x60\x38\xc7\x55\xb4\xe1\x9e\x49\x74\x5e\x44\xa7\xde\xe2\x06\x7f\xc7\xd9\xe0\x0c\x8e\xe4\x31\x8b\xba\xd5\xce\x81\x8f\x85\x1c\x46\xcb\xbf\x0b\xc6\x25\xfc\xbb\x46\x74\x5c\x4d\x07\x1d\xb9\x8e\x86\xf7\xba\x18\x2e\x6b\x32\xce\x1a\xce\x98\x45\xe7\xde\x70\x05\x1b\x34\x06\xf6\x79\x6f\x6f\xf7\x71\xcf\xda\x1b\x96\x70\xc5\xba\xcc\xd1\x68\x78\xb7\x9d\xe8\x1c\xcb\xb9\x83\xe8\xb8\x89\xfa\xcd\xf8\x05\x83\xb6\x37\xae\x3a\xb8\x1a\x44\x1b\x6f\x5a\x43\xa3\xed\x26\x3a\x6c\x16\x7b\x5f\xde\xed\x64\xf8\xce\xa1\xf0\xbd\x14\x6c\x1a\xab\x83\xe0\x0d\xd7\x48\xdc\x45\xe7\xcd\x2c\xba\x6e\xa2\xf3\x66\x5a\x20\x9e\x6e\xf9\x16\x2b\x5a\xdc\x9c\xe8\xb4\xda\xf7\x30\x9a\x4e\x38\x87\x3b\x88\xb3\x43\x7f\xa3\xe8\x32\x18\xc6\x43\xb9\x17\x6c\xe7\x59\x34\x4e\xa2\xc3\x6a\xf9\x4e\x68\x70\xb0\xda\xdb\xe0\x7c\x14\x4d\xdc\xe3\x2c\x57\x34\x05\xcf\xd4\x87\x9f\x4a\xfe\xd4\x48\x67\xfb\xa8\xb7\xe8\x8c\x6f\x62\xec\xc1\x09\x9d\xa6\x52\x63\xc9\xf6\xa0\x41\xd6\x92\x37\x77\xa5\xf0\x2d\x97\xbe\xe8\xc9\x77\x16\x23\x3c\xb3\x3f\x71\xce\x68\xfc\xf2\x6d\xec\x6c\xdf\xb4\x18\x16\xd4\xc3\x44\x5d\x45\xd3\x0b\xfe\x42\x0e\xe0\xeb\x5b\xcb\x23\xfb\x87\xb7\x58\xd8\x8f\x1e\xa7\x47\x6c\xd1\xf8\x5d\xa3\xe1\xc3\xde\xc4\x9b\x3c\x47\xf3\x35\xd6\xf7\xc5\x17\xd0\xf1\xec\x8c\x7b\xf6\xa7\xd9\xde\xd4\x34\x5a\x41\x6f\x6b\xe1\x13\x2c\xe0\x11\xdd\xc1\x0f\x4e\x8f\x0f\x80\x3b\xf1\x93\x17\xeb\xc3\x64\x3a\x08\x45\x33\xac\x5d\x56\xab\x47\x7c\x0b\x5d\x37\x9b\x68\xd3\x5b\x9d\xa2\xbd\x54\x34\x31\x16\xfd\x70\x4f\xd6\x76\x32\xff\xe9\xd9\xb3\x1a\x96\xd3\x68\xda\x4a\xde\xce\x77\xc5\x57\xa8\x21\xea\x91\xbb\xf0\x3a\xb4\xc3\xbe\xa9\xc4\xd2\x94\xff\x4f\xa3\x69\x2c\xfb\xa4\x37\xcf\x45\x07\xc4\xc3\x3e\xf0\x77\xde\xfc\x3f\x96\x07\x5e\x27\xf8\x9d\xcd\x33\xc6\xc1\x62\x75\x93\x61\x0e\xd7\xe8\x67\x6e\xad\x46\x78\xc3\x3d\x98\x71\x26\xfa\xa0\x46\xa9\x5b\xfc\xab\x2d\xfa\x42\x2b\xf8\x7a\xee\x1d\x9d\x61\x30\xaf\xc6\x47\x6c\x0d\xeb\xf0\xe0\x79\xb5\x3b\x5a\x6f\x7c\x72\x47\xd6\x47\xf1\xb8\xbc\x7f\x34\xed\xf4\xd1\x7a\x08\xf5\x9d\xf7\xa1\x71\x6f\x5e\x95\xb6\x82\xcf\x68\x5e\x04\xd7\x78\x1d\x98\x80\x15\xbe\x86\x06\xf0\x27\xf8\x4d\xbd\xf5\x08\x72\xa5\x86\xb2\x26\x3a\xe3\x78\x29\xfd\x07\x3d\x66\x6c\x82\xdd\x11\xcb\x3b\xfb\x0d\x3e\x56\xd6\xe7\xfb\x56\xab\x3f\x7a\x15\xbe\x39\xb6\xc6\x23\x78\xa1\x23\xfa\x26\xbe\x8b\x87\xc1\x39\x6b\xa8\xb7\x34\x19\x07\xd4\x42\x37\x59\xcf\xa0\x5f\x4c\x7c\x47\x3f\xae\x78\x5a\x67\xfd\x22\xf7\xaf\xd9\xb0\x26\x66\xfa\x57\x93\xac\xb6\x89\x0b\x5f\x07\xe3\x18\xcd\x67\x63\x63\x5a\x08\x9d\xc5\x3b\x94\xb8\xc8\x8d\x6f\xf8\x21\x58\xa2\x07\xf6\xba\xc1\x7a\x1c\x7a\xe4\x77\x3b\x5a\xbd\x3d\x3c\x1b\xdf\xa1\x76\xd0\x77\xdf\x16\x6f\x8d\xc6\x3f\x1e\x86\xbe\x86\xde\x7a\x3c\x35\x43\x7d\xf0\x1d\x5d\xc0\x31\x79\x82\xe3\xd6\x1b\x1f\xf3\x54\xfa\x44\x67\xf5\x83\x7f\xb4\xa5\x37\xc3\x13\xf1\xc0\x0b\xfd\x8c\x9e\x49\xcf\x6b\x83\x69\x86\x9c\xe9\x47\xbe\xc4\x42\xae\xf4\x39\xea\x8f\xb8\xbb\x68\x1a\xe1\xac\x75\x2e\xfd\xa2\xb3\x98\xc9\x1b\xbf\x02\x8f\xb9\xcc\x0b\xac\x65\x0d\xbe\x80\x1f\x86\xc1\x3c\x98\xfa\x04\x93\x5c\x47\x9b\xd5\x35\xde\x49\x0f\x40\x77\xe8\x94\xd8\xe8\x31\x71\xb0\xf3\xf0\xde\xa5\xf0\x9d\xfd\xaf\x2f\xfe\x5f\x74\x44\x9c\xd4\x11\xf5\xb3\x34\x86\x5f\xbe\x67\xb6\x7d\x59\x93\x8d\xc5\xb0\xb6\xd6\xe3\xb3\xcf\x3a\xc3\x89\x9a\x20\xa6\xcc\x2d\x58\x05\x3b\x97\x5e\xec\x82\xad\xc3\x83\xf3\x7c\x82\xaf\xf7\xa6\x6b\xce\xe6\x6e\xfa\x4b\xf6\xa4\xce\x70\x03\x5f\x66\x2f\xfa\x35\x7c\xe1\x4f\xe4\x93\xf5\x55\xfa\x5a\xf6\x3c\x67\xf5\x90\x3d\xcc\xdb\x5d\xb9\x2e\xb6\xe2\xd5\x6d\xe9\x9f\xab\x3d\xf8\x0a\x3d\x9c\x3b\xb7\xc7\x5c\xd6\xda\xd9\xc4\xcd\x93\x6b\x71\x2e\xbe\xe9\xac\x36\xa8\x77\xfa\x23\x3c\xc1\x19\x5e\xc1\x59\x68\x8b\x5c\x86\x60\x5a\x64\xde\xc3\x2b\xa8\x31\x6a\x8e\x87\x5c\x5c\xe9\x17\xcc\x11\xa1\xf4\x16\xe6\x9f\xdc\x1f\xbd\xcd\x59\xec\x63\xbe\x22\x9e\xb0\x58\x0f\xe1\x5c\xea\x2c\x24\x9b\xbb\x32\xb6\x6d\x99\x2b\x47\xf3\x05\xb0\x21\xbe\xcc\x51\xf1\x44\xfe\xce\x33\xd4\x5a\xea\xce\x9b\xf6\xa7\x32\x7f\x3e\xce\xc9\x3d\xa0\x33\x3d\xd2\x97\xb9\x37\xeb\xaa\xb5\xf9\x85\xb9\x6f\x29\x9e\x00\x8e\x70\x0f\xa7\xa1\xd4\x57\x9e\x23\x67\x8b\x3d\xd7\x64\x63\xf7\x6e\x65\x0e\x61\xcd\x5c\x78\x7f\xe4\xc3\x83\x5e\x98\xcb\xd1\x3c\x5e\x98\x79\x58\x4d\xe7\xe0\x48\x6f\x40\xd3\xec\x27\x07\x34\x41\x1d\xe0\xaf\xf0\xcd\xdf\x60\x98\xe7\xa2\x52\xbf\x9c\x0b\x8f\xdc\x3d\x96\xd9\x9a\x19\x06\x2e\x39\x17\x0f\x9e\x4b\x6f\x45\xf7\xd9\xff\x4a\xbf\x07\x07\x7c\x6a\x2b\x73\x1b\xfd\x2d\xcf\x54\xd1\xf4\xc0\x43\xae\x79\x5e\x18\x4a\x6e\x63\xe9\xf3\xa5\x47\xd2\x4b\x99\x9d\xbb\xa2\x15\x5f\xf0\x85\x63\xb4\x1f\xca\x5c\x83\xf7\x4e\x45\x8f\x78\xd9\x63\xfe\x00\x3f\x3c\x1b\x4c\xa8\x1f\x5f\xe6\x60\xe2\x6a\x4b\x0f\x00\x4b\x3c\x07\xfd\x2f\x9b\xfc\x23\x00\x00\xff\xff\x08\xd5\x52\xe8\x00\x10\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _generate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\xdb\x38\x10\xc6\xcf\xe4\x53\xcc\xea\x10\x50\x80\x23\x5d\x76\x2f\x01\x7c\xd8\xa6\x09\x10\x24\xf1\xa1\x69\xda\x43\x51\x04\xb4\x34\xa6\x89\x48\xa4\x31\xa4\x1d\xb8\x85\xdf\xbd\x20\x29\xc9\x76\x9c\x36\x2e\xda\xf8\x62\x68\xf4\x71\xbe\xdf\xfc\xa1\x16\xb2\x7a\x94\x0a\xa1\xd5\x8a\xa4\xd7\xd6\x38\xce\x75\xbb\xb0\xe4\x41\x70\x96\x29\xed\xe7\xcb\x69\x51\xd9\xb6\x54\xb6\x91\x46\x9d\x26\x21\x96\xfd\xff\xea\xdf\x8c\xb3\xa9\x36\xb5\xf4\x12\x8e\xd2\x97\xce\x2e\xa9\xc2\x52\xd9\x87\xee\x5c\xb6\xef\x44\xae\xfc\x86\x64\x1b\xab\xca\xc6\xaa\xf0\xd2\x21\xad\x90\xca\xa9\xa4\x3a\x46\x72\xce\xcb\x52\xd9\x33\x85\x06\x43\x56\x50\xf6\xb4\x67\x38\x5d\x3c\xaa\x9d\x72\xa0\xe0\xbc\xb2\xc6\xc5\x7a\x6e\xfb\xf0\xc7\xf5\x02\x21\xfd\xc6\x90\x0d\xe1\x8c\xb3\x6b\x5c\x0f\x8f\x9f\x90\x9c\xb6\x26\x48\x86\x84\x0f\xab\x14\x7c\x26\x7d\xaf\xc9\xaf\x53\xb6\xad\xb4\x0e\xc1\x48\x3b\x5b\x9a\x0a\x92\x18\x45\x65\x8d\xc1\x2a\x28\xee\x3c\x69\xa3\xc0\xc5\xbf\x1c\xbe\x73\xd6\x58\xa5\x90\xe0\x6c\x0c\x8d\x55\xc5\x67\xed\xe7\x22\x2f\xee\x3c\x89\xae\xf6\xe2\x1a\xd7\x37\x56\x05\xfe\x11\xec\x95\x93\x17\x37\xf1\xac\xc8\x39\x67\x2e\x64\xe8\x3a\x52\x7c\xc0\xd4\x71\xf1\xbf\x73\xe8\x27\xb2\x45\x27\xf2\x11\x67\x2c\x50\x09\x23\x5b\x1c\x08\xc4\x97\xaf\xd3\xb5\xc7\x11\x20\x91\xa5\x48\xc4\x18\xa1\x5f\x92\x81\x78\x3a\xca\x73\xce\xd8\x26\xe7\xac\x8e\xba\x5d\xab\x00\x7c\x65\x9c\x97\xa6\x42\xe1\x72\xce\xf4\x2c\x4a\xfe\x19\x83\xd1\x4d\x4c\x97\x2a\x2c\x2e\xa5\x97\x8d\xc8\x8b\x60\x70\x41\x24\x90\x28\x2f\x6e\x9d\x12\xd9\xa5\xd4\x0d\xd6\xe0\xed\x90\x35\xcb\x39\xdb\x70\xd6\x0e\x76\xdd\x32\x15\x13\x7c\x0a\x8e\x77\xb1\xbc\xc1\x37\xdb\x6e\x43\x36\x82\x7a\x04\xcf\x1b\xfe\xa7\x5c\x76\x81\x66\x67\xc5\x7a\xbe\x6e\x33\x46\x10\xe7\xbe\x85\x2d\xba\x3d\x12\x07\xbe\x27\x27\xfd\x53\x5f\xd1\x05\xd1\x44\x37\xfd\xe2\xfd\x26\xd7\x0c\x7d\x35\x87\x6a\x49\x84\xc6\x43\x87\xd3\xd3\xe9\x59\xe2\xfa\x59\xd2\x7b\x6d\xbc\x78\x61\xfb\x47\x7d\xa2\x24\x7b\x67\x6d\x23\x0e\x36\xbf\xab\x39\x49\x22\xd5\x79\x47\x31\xe8\x40\xbb\x24\xea\x81\x3a\x86\x2b\x33\xb3\x09\xe1\x38\x82\xd7\x01\xa2\x7f\xf7\xda\x28\x08\x37\x67\xa5\xf1\xe9\xbf\xe0\x1b\xda\x1d\x46\x72\xbf\x38\x9c\x46\x68\x4c\x17\x19\xef\x4f\xc4\x9e\xcf\xa5\x51\x98\xae\xc3\x01\xf7\xd1\xbd\x3b\xa6\x79\xcf\x86\x3b\xb1\x50\x25\xef\x56\xd6\x18\x5b\xc7\x36\xd8\xb8\x7d\x96\xdd\x39\xbe\x21\xcc\x76\xd3\xfa\xe6\x24\x9e\x30\xce\x17\xe6\xf9\xba\xc1\x71\xa8\x3b\xf3\xc4\x7a\x6f\x9c\x2f\xdf\xb9\x5f\x5e\xb9\xbf\x71\xa5\x40\xce\x3c\xd2\xf6\x0b\xd0\x6d\xf4\x5b\xb7\x60\xa8\x1c\xc2\xa7\x6d\x2a\x1d\xf6\x9a\x2c\xe7\x1b\xfe\x23\x00\x00\xff\xff\x17\x8b\x0a\x74\xcb\x07\x00\x00")

func generate_go() ([]byte, error) {
	return bindata_read(
		_generate_go,
		"generate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"0_init.down.sql": _0_init_down_sql,
	"0_init.up.sql": _0_init_up_sql,
	"bindata.go": bindata_go,
	"generate.go": generate_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"0_init.down.sql": &_bintree_t{_0_init_down_sql, map[string]*_bintree_t{
	}},
	"0_init.up.sql": &_bintree_t{_0_init_up_sql, map[string]*_bintree_t{
	}},
	"bindata.go": &_bintree_t{bindata_go, map[string]*_bintree_t{
	}},
	"generate.go": &_bintree_t{generate_go, map[string]*_bintree_t{
	}},
}}
