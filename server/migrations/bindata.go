package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __0_init_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0_init_down_sql() ([]byte, error) {
	return bindata_read(
		__0_init_down_sql,
		"0_init.down.sql",
	)
}

var __0_init_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x7d\x6b\xe3\x36\x18\xff\x3f\x90\xef\xf0\x10\x0e\x6c\x0f\x1f\xac\x65\x70\x2c\x47\x0b\x21\x73\xbb\xb0\xce\xd9\x9c\x74\x2f\x8c\x61\x14\x5b\x49\x75\xb1\xe5\xd4\x92\xaf\x97\xdd\xdd\x77\x1f\x92\xfc\x22\xbb\xe7\x24\xed\x9c\x6c\x8c\xea\xbf\xe8\xe5\x79\x7f\x7e\x3f\x59\x09\x52\x8c\x38\x06\x8e\x16\x11\x86\x41\xc6\x70\x3a\xe8\xf7\xcc\x7e\x0f\x00\x40\xfc\xf2\x49\x08\xf9\x58\x90\x15\xa1\x5c\x2d\x89\x11\x24\x94\xf1\x14\x11\xca\xd5\xce\xcd\xba\x5a\x13\x63\x93\x92\x18\xa5\x5b\x58\xe3\xad\x9d\x0b\xac\x84\x49\x01\x77\x28\x35\xcf\xdf\x58\xf0\xbc\x41\x13\x0e\x34\x8b\xa2\x5c\xb8\xf2\x24\xf4\x17\x5b\xcd\xda\x67\x8a\x86\x2f\x09\x46\x4a\x1a\x27\x31\x66\x1c\xc5\x1b\x78\x20\xfc\x2e\xc9\xb8\x9c\x81\xbf\x12\x8a\x21\xc4\x4b\x94\x45\x1c\x4c\x9a\x3c\x98\x16\x20\x7d\xcd\xc8\x78\x60\x58\x4d\xab\xf1\x72\x89\x03\x4e\xde\x63\x3f\x94\x79\xe8\x56\x38\x0d\x95\x58\xd8\x6b\xf9\xd3\x42\x42\x98\x8f\xa4\xd5\x6a\x65\x91\x24\x11\x46\xf4\xd9\xb1\xce\xad\xae\x3c\xe4\x69\x86\xad\xc2\x89\x18\x91\xa8\xda\xcc\xf1\x87\xe7\x67\xf5\x51\xd1\x50\x14\xeb\xbe\x77\x2b\x9c\xa3\x15\x6b\x08\xff\xe3\xcf\x2e\x84\x2b\xf1\xe3\xa9\x3b\x9b\x7b\xa3\x89\x3b\x87\xe5\xda\x97\x2d\x98\x97\xea\x62\x5b\x75\xe2\xd5\xd4\x73\x26\xd7\x2e\xfc\xe0\xfc\x0e\x66\xd5\x23\x56\xbd\x57\x3d\xe7\xca\xf1\x1c\x77\xec\xcc\x72\x10\x00\x33\xef\x7e\xab\xdf\xb3\xde\x0a\x95\x39\x52\x64\x94\xdc\x67\x18\x08\x0d\xf1\x07\xd5\xf7\x32\x41\x7e\xa6\x66\x12\x5a\x0a\x90\xf3\xb5\xb3\x39\xca\xa4\x49\x84\x7d\xbe\xdd\xe0\x0a\x6a\xca\x29\xbf\x0e\x11\x72\xec\x00\x9e\xea\xdc\x7e\xf4\x69\xf4\x71\x7d\x74\xdb\x78\x8d\xb2\x6a\xa8\xea\xb4\xc8\xe2\x2c\xe2\x64\x13\x61\x1f\x31\x46\x56\x34\xc6\x94\x33\x1f\x45\x51\xf2\x80\xc3\xae\x1a\x33\x57\xc5\xb6\x8c\xe3\xd8\x8f\x11\x45\x2b\xdc\x4c\x53\x47\xaa\x76\x55\x9b\x48\xb6\xcc\xb5\x08\xaf\x5e\x70\x55\x41\x81\x29\xd6\xda\x8a\xae\x51\x6f\x07\x51\x9b\xdc\x79\x78\x71\xbd\xb0\xcf\xff\x8b\x7d\x8e\x4a\x10\x0d\xd4\x53\x45\xf3\x6f\x90\x87\x34\xa4\x68\xaf\x16\xee\xd0\x8d\x6d\x67\x8f\x72\x57\xe3\x80\xdd\xaa\xf6\x04\x9c\xa5\xf3\x4e\x05\x93\x0d\x34\xa8\x16\x44\x36\xf6\x21\x82\xb6\xfb\xc9\xe0\x00\xc7\x04\x08\x38\x36\x48\x1c\x41\x41\x1d\x28\xf6\x29\x78\x5a\x78\x1a\x60\x01\xc7\x06\x8c\x06\xb3\x40\x07\xb9\xae\x47\xab\xf1\x55\xd6\xbd\x82\x06\xf2\xc0\x49\xd0\x47\xeb\x27\xf1\x73\x17\x06\xed\x83\x9f\x6a\x5b\x2b\xe8\x68\xda\x44\x38\x5b\xb4\x55\x68\xd2\xa2\xad\x09\x3b\x87\xe8\x3b\x35\xdc\x05\x9c\x24\xb4\x82\x3a\x8d\xcf\x44\x52\x77\x00\x9c\x3c\xe8\x6f\xd6\xbb\x6f\xd2\x1d\x21\xc1\x0e\x0f\x58\xb6\x78\x87\x03\xfe\x0c\x17\xf2\x93\xff\x01\x1f\x36\x38\x8d\x09\x63\xb5\x4c\x34\x16\x0e\x21\x1d\x6d\xf7\x0b\xe9\xbc\x90\xce\x09\x49\x47\xa1\x41\x6d\x47\xb7\x57\xe1\xbc\x57\x8f\xa7\x20\x48\x68\x48\x84\x13\x15\xb7\xbd\x63\x09\x5d\x74\xa6\x60\x49\x70\x14\xd6\x89\xf3\x9f\xd2\xe6\x6e\xca\xd4\xd0\xe0\x04\x94\xa9\x69\x53\xc5\xd0\xa2\x4f\x2d\xee\xf9\x40\xc8\xcb\x49\x7d\xac\x1f\xa2\x32\x2f\x8f\x16\x9d\xf9\xea\x1e\xa5\x45\x89\xed\xd1\x7a\x74\xae\x2e\x78\x62\xe2\xce\x1c\x6f\x0e\x13\x77\x3e\x6d\xfb\x6c\xb2\x25\xd9\xd9\x3b\x1f\x79\xec\xc6\xbb\x8c\xd5\xef\xcd\x9c\x1b\x67\x3c\x87\x33\x1b\x8c\x5b\x86\x53\xf0\x92\x08\x1b\x36\x2c\x51\xc4\xb0\x0d\x02\x38\xfa\xbd\x5f\xbf\x77\x3c\x07\xdc\xe9\x1c\x9c\xdf\x26\xb3\xf9\xcc\x2c\x0e\xc1\x95\x37\xfd\xb1\xf6\xa6\xa2\xb6\x4a\xda\xbd\xd0\x25\x9e\xc8\x8d\x73\xdd\x0d\x1b\xae\xa3\x64\x81\x22\x43\xf9\xd1\x9d\x37\xa5\x60\xe5\xd5\xd8\x73\x46\x73\x07\xa6\x1e\x78\xce\x4f\x37\xa3\xb1\x03\x57\xb7\xee\x78\x3e\x99\xba\xb0\xc2\xea\xd6\xe8\xeb\x2e\x9a\x16\x78\xce\xfc\xd6\x73\x67\x25\x8b\x8f\x66\xfd\xde\xab\x57\xa5\x1b\xfa\xee\x7e\xaf\x69\x56\xe1\xc2\xe3\x28\x2b\x21\xa2\xaa\x6e\x46\xee\xf5\xed\xe8\xda\x81\xd9\xcf\x37\x4f\x33\x72\x25\x5d\x3b\xba\xad\x65\x0c\x77\xd8\xdc\xfa\x8c\x9c\x91\x30\x7f\xd3\x53\x27\xb5\x97\xe4\x8c\x84\xb5\xab\x55\x92\x42\x8a\x37\x11\x0a\x30\x2c\x33\xaa\xb0\x64\x85\x29\x4e\x11\xc7\xfe\x9a\x65\xc2\xc5\x9c\x18\x31\xcf\x52\xca\xca\xbf\x9a\xd4\x6c\x84\xe8\x2a\x43\x2b\x0c\xec\x3e\xea\xf7\x10\x53\xe6\x32\x1c\x09\x78\x60\xd9\x82\xf1\x94\xd0\x95\x59\xef\x69\x29\x4d\x2a\x35\x79\xe2\x4b\x81\x41\x94\x04\x6b\xbf\xbc\x36\x98\x96\x0d\xc6\x76\xbb\xdd\xc6\x71\x18\xde\xdd\x9d\x7f\x23\xd0\x2b\x63\x86\xf5\x48\x90\x3e\x3e\x7d\x82\x52\x60\x8a\x68\x98\xc4\xa6\x05\x5f\xc1\x19\xfe\xd6\x06\xe3\xeb\x62\xec\x11\x22\x34\x83\x61\x83\x61\x58\xb6\xe8\xfb\xf3\x37\xd6\x70\x58\x38\xfd\x56\xf8\xf7\xc5\x5e\x2d\x71\xbf\xe8\xd0\x7a\xd7\x8a\x2f\x41\xab\xdf\xfb\x65\x74\x73\xeb\xcc\xc0\x3c\x6b\x69\xc4\xdd\xb5\x66\x83\xf1\xf1\x73\x1b\x56\xd4\x31\xb9\x52\x65\x08\x79\xf2\xd0\xa3\x23\x35\xee\xd0\x4e\x28\xdc\x68\x53\x54\x71\x89\xf9\xf8\xe2\x6d\x43\x19\x06\x25\xdd\x2e\xee\x23\xb6\x76\x6f\xa8\x47\xc2\xd4\x5b\x85\x84\x1a\xce\x1c\x00\x31\x36\x14\xe6\xda\xa0\x5c\x15\x51\x12\x19\x1e\x90\x70\x30\x84\x8f\x2a\xd9\x83\x64\x33\x18\xc2\x00\xdf\x0f\x72\xb6\x1a\xc8\x4b\x86\x98\x63\xb8\x30\x7e\x20\x96\x3e\xf7\x7b\x45\x8c\x77\xf4\x08\x7e\x8f\xa2\x4c\xf4\x08\x0a\x02\xcc\x98\x4c\x9a\x59\x3a\xa8\xee\x43\x36\x54\xa2\x8b\x17\xc9\xf2\xcd\x41\xfd\x6e\xf4\x56\x7e\xb3\x3d\xa0\xb5\x34\x5d\xaf\x2f\xc1\x20\xa1\x01\xaf\x2f\x2f\xc1\x10\x66\x61\xc3\x1a\x0e\xf3\x4b\xeb\x45\xa1\xb0\x56\xf3\x53\x0f\xcc\x36\x09\x32\x2e\x86\x25\xc2\x5d\x99\x6f\x54\xc7\x47\xee\x77\xa5\x13\x17\x9a\x87\x96\x6c\x8d\xbf\x03\x00\x00\xff\xff\x61\xb4\xaf\x10\x05\x1f\x00\x00")

func _0_init_up_sql() ([]byte, error) {
	return bindata_read(
		__0_init_up_sql,
		"0_init.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x4b\x6f\xec\xc6\x11\x85\xd7\xc3\x5f\xc1\x0c\xe0\x60\x06\x10\x14\xb2\xf9\x36\x70\x37\x36\xb2\xcd\x22\xdb\x54\x20\x34\xc9\x6e\x61\x90\xab\xc7\x1d\x8d\xec\xf2\x0d\xfc\xdf\x83\xaf\xab\x04\x38\xf1\xcd\x26\xc8\x42\xe2\xf0\xd1\x5d\x55\xe7\x9c\x3a\xd5\xaf\x71\xfb\x47\x7c\x4c\xf5\xd3\xe5\xf1\x1a\x6f\x97\x97\xe7\xb7\xaa\xba\x3c\xbd\xbe\x5c\x6f\xf5\xa9\x3a\x1c\xd7\x5f\x6e\xe9\xed\x58\x1d\x8e\xdb\xcb\xd3\xeb\x35\xbd\xbd\xfd\xe9\xf1\xeb\xe5\x95\x07\xf9\xe9\xc6\xe5\xf2\xc2\xff\xb7\xdb\xf5\xf2\xfc\xf8\x76\xac\xce\x55\x95\xdf\x9f\xb7\x7a\xbd\x3c\xef\xf1\x16\x1f\xae\x29\xee\x27\x7e\xd5\x7f\xfb\x3b\x7b\xdd\xd5\xcf\xf1\x29\xd5\xf6\xfd\xb9\x3e\x7d\x3c\x4d\xd7\xeb\xcb\xf5\x5c\xff\xb3\x3a\x3c\x7e\x2d\x77\xf5\xf7\x9f\x6a\x42\xdd\xff\x25\xfd\xfc\xd7\x14\xf7\x74\x3d\x95\x5c\xb8\xff\xe1\x3d\xe7\x74\x2d\xdb\x9e\xcf\xd5\xe1\x92\xcb\x82\x3f\x7c\xaa\x9f\x2f\x9f\xd9\xe2\x70\x4d\xb7\xf7\xeb\x33\xb7\x77\x75\x7e\xba\xdd\xff\x99\xdd\xf3\xe9\xc8\x46\xf5\x77\x5f\xbe\xaf\xbf\xfb\xe9\x68\x99\x94\x58\xe7\xea\xf0\x6b\x55\x1d\x7e\x8a\xd7\x7a\x7d\xcf\xb5\xc5\xb1\x20\xd5\xe1\xc1\xd2\xf9\x54\x5f\x5e\xee\x7f\x7c\x79\xfd\xe5\xf4\xc7\xf5\x3d\xdf\xd5\x8f\x5f\xcf\xe4\x7a\xff\xe3\xe7\x97\xb7\x74\x3a\x57\xff\xbf\x34\x7c\xd5\xfa\x9e\xef\x7f\x20\x93\xd3\xf9\x8e\x2d\xaa\x5f\xab\x8a\x0c\x1f\x1e\x9a\x87\xcb\xf3\xe5\xf6\xb0\xbf\xfc\xfc\xfc\xf0\xf6\xe5\x73\xfd\xc9\xb1\x3d\x1d\x45\xdb\x2c\x3a\xaf\xa2\xcd\x2c\xda\x34\xdf\xfe\xcb\x59\xb4\x69\xff\xfd\xbe\x3c\xfb\x2f\xdf\xdb\xdf\xf1\x83\xda\xff\x8c\x7f\xfa\x26\x8d\x1f\x55\xfc\x56\x07\xd5\xe1\xf0\xbb\xec\xef\xaa\xc3\xe1\x68\xcf\xee\x79\x76\xff\xf6\xe5\xf3\xf1\xae\x3a\x9c\x7f\x57\xef\xfb\xeb\xff\x5c\x6d\xda\x44\x87\x45\x74\xda\x45\xc7\x55\x34\x75\xa2\xdd\x28\xda\xce\xf6\xbe\xcb\xa2\x4b\x23\x9a\x40\xa2\x11\x6d\x59\x9b\x44\xc7\x4d\xb4\xc9\x16\x27\x6e\xa2\xe3\x20\x3a\x35\xa2\x61\x13\xed\x27\xd1\x66\x15\x0d\xad\xe8\xd4\x89\xae\xab\xe8\xda\x88\x6e\x49\x74\x5f\x44\x97\x4d\x74\xea\x45\x03\x39\xb2\xb6\x15\x6d\x7b\xd1\x61\x15\xed\xc9\x65\x10\x5d\x5b\xd1\x34\x88\xee\xbd\xe8\x12\x44\x23\x79\x4c\xa2\xfb\x6e\x7f\xd3\x64\xb1\x79\x97\x37\xd1\x10\x2c\x4e\x9a\x44\x43\x2f\x9a\x76\x8b\x43\x9e\xc4\x48\x51\x74\xa5\xde\xd9\xf6\x9d\x88\x93\x45\xa7\x64\x35\x82\x41\xb3\x88\x0e\xc1\xbe\xef\xc0\x6d\x14\x9d\x93\x68\x0b\x1e\xad\xe8\x3c\x8a\xf6\xad\xe8\x36\x5a\xad\x5d\xb4\xfd\xf2\x24\xba\x6d\xb6\x57\xe3\x6a\xe9\x1b\xcb\x2b\x07\xab\x09\x1e\x32\xfb\xcf\x86\x67\x3b\x88\xc6\x56\x74\x20\xf7\x5d\x74\x5e\x2c\x06\xb9\x2f\xbd\x68\x76\x4c\x78\xb6\x45\xd1\x7d\x30\xfc\xb6\x5d\x74\x8d\xa2\x43\x14\x6d\x3b\xd1\xb1\x13\x5d\x3a\xc3\x01\xce\xe2\x60\x38\x12\x07\x2e\x23\x38\xec\xc6\x07\x3c\xcd\xbd\xe7\xd3\x1a\x86\x61\x16\xed\xd8\x3b\x8b\xee\xd9\xd6\xc1\xf3\xba\x59\xad\xc4\x80\xef\xae\x37\x3d\xc5\x60\x39\xaf\xb3\xd5\x46\xbe\x99\x3c\x27\x8b\x4b\x7e\x7b\x14\x1d\x27\xd1\x39\x1a\x66\xf0\x0c\xb6\x3d\xf8\x91\x77\x14\x0d\x93\x68\xd7\x8a\x8e\x60\xbb\x89\x6e\x83\x68\xbb\x8a\x4e\xb3\x68\x70\xec\x02\xf5\x2e\x16\x0b\x2e\xe7\xd6\x38\x6c\x83\xed\x8d\xbe\x36\xea\x59\x0d\xb3\x7e\xb0\xbd\xfa\x4d\x74\x89\xa2\x1d\xd7\xd9\xf8\x63\x4f\x34\x4e\x7e\xdb\x6c\x71\xc6\xc6\xea\xed\x77\xd1\xb8\x1a\xe6\x53\x30\x2e\x9a\x4e\xb4\x47\xaf\xc9\x30\x2e\x7d\xd0\x9b\x6e\xe0\x7c\x18\x5d\x23\xe0\x3b\xd8\x3e\xfb\x6c\x3d\x04\xcf\x3b\xeb\x83\xfd\x91\xc3\x4c\x9f\xf4\xc6\xe3\x18\xad\x5f\x16\xe7\x1b\x8e\xc1\x06\x1c\xe9\x0f\xb4\x0f\xd7\x70\x17\x93\xd5\x91\x7a\xd1\x71\x31\x3c\x79\xbe\x79\x9e\x70\xce\x3e\x71\x36\xdc\xd1\x21\x75\xcc\x93\xf5\x02\x3c\x64\xf2\x6b\x45\x77\xf4\xd6\x98\xae\x12\x3d\x99\x5c\x03\xab\xe1\x1b\x3b\xd3\xe5\xe8\xbe\x51\xfc\xa1\x33\x6d\xc0\x05\xda\x09\x8e\x53\xd1\xd6\x22\xda\xb1\x16\xde\x56\x5b\x3f\xfb\xb3\x12\x7f\xb0\x9c\xe8\x5b\x34\x0e\x0e\xfc\xa6\x17\xc7\x60\x7a\xa1\xd7\x53\x30\x5c\xe8\x75\xfc\x22\x8c\xa2\xfb\x64\x31\xd1\x41\x72\x3d\x14\xdf\x19\xed\xdb\xd0\x19\x07\xeb\x2e\x3a\xa0\xa5\xdd\xea\xa5\x57\x4a\xef\x6c\x56\x1b\xfe\x56\x7a\x33\xb8\x77\xd1\xb7\x9d\xf9\x19\xfd\x0a\xef\xe8\x7e\xed\x8c\xeb\x26\x1a\x9f\x9d\x7b\xc1\xe8\xfd\xb8\x6f\x86\x25\x78\x37\xce\x3b\x71\x9a\xc9\xf2\xc1\x03\xba\x60\x3d\x53\xf6\x1d\x5d\xdb\xc1\x7a\xb5\xec\x4b\x1d\xf8\xe1\x60\xf1\x88\x41\xbe\xd1\x7b\x12\x7c\xd1\x28\xbc\xe0\x71\xd4\xcd\x3a\xf4\xc2\x77\x61\x31\xfd\x83\x43\xeb\x5a\xa5\x3e\x6a\x5a\x92\xe1\xba\xbb\x0f\x65\xd7\x0b\xd7\xa9\xb5\x7d\xf1\xdc\xdd\x7b\x6c\x26\x4e\xb0\xbd\xd1\x4e\xf1\xc7\xde\x7a\x03\x3e\xf0\xf1\xe4\xf5\x17\x9f\x69\xcd\x6f\x3b\xd7\x6a\xd1\x7f\x6f\x5e\x08\x3e\x60\xca\xfb\xde\xb5\x86\x37\xcc\x78\x7e\x67\x1a\xa6\xe7\xf9\x06\xae\xe8\xf5\x75\x74\x5f\xee\xac\x6f\xe8\x8f\xd2\x07\x83\x69\x6c\xf7\x3e\x1e\x3a\x9b\x27\x31\x8a\x4e\xc4\x1d\x4c\x6f\xfd\x6c\x7b\xc0\x2d\x78\xc2\x09\x33\x62\x48\xe6\xcd\x7c\x07\x17\x78\x06\xb8\xed\xa3\x69\x11\xdf\x20\x1f\x72\x1c\xb3\xf1\xc7\xef\xc5\x63\x96\xb9\x30\x1b\x66\x68\xab\xcc\x2d\x3f\x05\xe0\x7f\xe0\xc8\x4c\x28\x3e\xd6\x98\x0e\xd0\x6d\xc9\x73\x30\x7e\x47\x9f\x99\xf4\x00\x18\xc1\xef\xe8\xf9\xe1\x45\x09\x7e\x1b\xe3\x60\xdc\xdd\x2b\xb3\xf1\x09\x3e\x60\x02\x76\x68\x80\xba\xf3\x28\xda\xf4\xde\xa3\x1e\x03\x6f\x6a\x06\xf3\x7e\x72\x28\x71\xdc\xeb\xfa\xde\x66\x38\xeb\xf0\xc8\x39\x18\x56\x79\x35\x3f\x4d\xde\x07\xdb\x64\xfb\x82\x1d\x5e\xc6\x1a\x70\x6d\xdd\xfb\x8b\xff\xef\x36\x23\xca\x5e\x8e\x0d\x7a\xe6\x0a\xa7\x78\x28\xb3\xa4\xec\xe5\x9c\x72\x45\xdf\xcc\x40\xf0\x5d\x17\xc3\xbc\xf0\xe8\xfe\x01\x3f\xbb\xf7\x2f\xf9\xb1\x06\xcd\x6c\x8d\xf5\x02\xf8\xf0\x3d\x3e\xc5\xac\xc8\x7e\x96\x68\x3d\x0e\xf3\x7d\x66\xee\x65\xd3\x30\x5e\x82\x6e\xf0\xe6\xd1\xbd\xb0\xe0\x30\xdb\x3b\xb4\x4d\xcc\xf2\x2e\xd8\x1c\xc3\x47\x9b\xdf\xfa\xd5\x6c\xbf\x99\x87\x68\xa1\xe0\xbb\x99\x47\xb3\x9e\x3c\x99\xf9\xf0\x86\x26\xd8\x1f\x8f\xc0\x67\x4a\x0f\x6e\xee\xd5\xb3\x69\xa0\xd4\xb7\xfa\xef\xe0\x58\x82\x55\x6b\x3d\xdc\xf8\xbc\x85\x9b\xd2\x93\x93\xcd\x9d\xcc\xbb\xcd\x6a\x05\x13\x38\xfe\x38\x99\x96\x1e\xf4\xd9\x33\x7b\xfe\xa3\x7b\x0a\xfd\x82\x0e\xd0\x00\xfb\x07\xe7\x0f\x8d\x65\x3f\x93\xa5\xc5\x66\xfb\xe2\xe7\xb1\x32\x97\x17\xe7\xc6\x39\xe7\x7b\xee\xd7\xc9\xf5\xd8\xda\x9a\xc1\x75\x1a\x27\x9b\xa7\xbd\x63\xcd\x75\x76\x9f\x60\x7e\xb0\x0e\x5e\xc9\xab\x9c\xa9\xdc\x7b\x8a\x27\x3a\xbf\x93\xcf\x21\x30\x62\x66\x64\xe7\x12\x9c\x12\xdf\x25\x3f\xf7\xf4\xa6\x85\xa2\x59\xf7\x62\xe6\x0e\xde\x46\xcf\xe1\x25\xbc\x87\xcf\x3e\xdb\x9c\xa1\xbf\x98\xc1\xe8\x0f\x3f\xdb\x3e\xce\x95\xbb\x9d\x81\xca\x99\x35\x98\x5f\x97\x33\xa8\xf7\x25\xe7\x24\xd6\xe1\x85\x6d\xb2\x5e\xa3\xa7\xc9\x0f\xbd\x31\x3f\xa7\xe8\xb5\x24\x9b\x4f\xe5\x1c\x11\xcc\x2b\xc1\x93\xde\x19\x3f\x3c\xba\x33\x6d\x74\xc9\x39\x58\xed\x3c\x8a\xef\x86\xc1\x66\xfd\xee\xfa\x23\xa7\x72\xb6\xd8\xcc\x53\xd1\x0d\xbd\xc4\x6c\x61\x56\x6d\x7e\x9e\xe5\x8c\x84\x5f\xa0\xb3\xe2\x2f\x9d\x3d\xe3\x5b\x74\xce\xf9\x00\x5c\x38\xc3\x71\x26\xa4\xb7\x79\x8f\x66\xf0\xf4\xc1\xcf\x4c\xab\x7b\x57\x13\x4c\x4b\x39\xfa\x2c\xcd\x36\x63\x26\x8f\x51\xe6\xdb\x66\xba\xa1\x36\x72\x60\x5e\x06\xef\x71\xf0\xc2\x83\x83\xcf\x67\xb4\x5d\xe6\x27\xda\xdd\xed\x2c\x83\x77\xc0\x7d\x74\x1f\xc2\x3b\x77\x8f\x07\x77\x60\xc1\xfc\xda\x5c\xd3\xf4\x39\xde\x47\x7e\xe4\x0e\xd6\x9c\x2d\x98\x45\xc5\xcf\xe1\xda\x63\xc3\x09\xbc\x11\x0f\xbe\xd0\x57\x39\x77\x0c\x36\x57\xd8\x8b\x79\xc5\x95\x5a\xc8\xa3\x75\xde\xe0\x0b\xcd\x94\xb5\x9d\xe5\xda\xf8\x8c\x5a\x27\xf9\x57\x00\x00\x00\xff\xff\x23\x91\x83\x96\x00\x10\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _generate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\xdb\x38\x10\xc6\xcf\xe4\x53\xcc\xea\x10\x50\x80\x23\x5d\x76\x2f\x01\x7c\xd8\xa6\x09\x10\x24\xf1\xa1\x69\xda\x43\x51\x04\xb4\x34\xa6\x89\x48\xa4\x31\xa4\x1d\xb8\x85\xdf\xbd\x20\x29\xc9\x76\x9c\x36\x2e\xda\xf8\x62\x68\xf4\x71\xbe\xdf\xfc\xa1\x16\xb2\x7a\x94\x0a\xa1\xd5\x8a\xa4\xd7\xd6\x38\xce\x75\xbb\xb0\xe4\x41\x70\x96\x29\xed\xe7\xcb\x69\x51\xd9\xb6\x54\xb6\x91\x46\x9d\x26\x21\x96\xfd\xff\xea\xdf\x8c\xb3\xa9\x36\xb5\xf4\x12\x8e\xd2\x97\xce\x2e\xa9\xc2\x52\xd9\x87\xee\x5c\xb6\xef\x44\xae\xfc\x86\x64\x1b\xab\xca\xc6\xaa\xf0\xd2\x21\xad\x90\xca\xa9\xa4\x3a\x46\x72\xce\xcb\x52\xd9\x33\x85\x06\x43\x56\x50\xf6\xb4\x67\x38\x5d\x3c\xaa\x9d\x72\xa0\xe0\xbc\xb2\xc6\xc5\x7a\x6e\xfb\xf0\xc7\xf5\x02\x21\xfd\xc6\x90\x0d\xe1\x8c\xb3\x6b\x5c\x0f\x8f\x9f\x90\x9c\xb6\x26\x48\x86\x84\x0f\xab\x14\x7c\x26\x7d\xaf\xc9\xaf\x53\xb6\xad\xb4\x0e\xc1\x48\x3b\x5b\x9a\x0a\x92\x18\x45\x65\x8d\xc1\x2a\x28\xee\x3c\x69\xa3\xc0\xc5\xbf\x1c\xbe\x73\xd6\x58\xa5\x90\xe0\x6c\x0c\x8d\x55\xc5\x67\xed\xe7\x22\x2f\xee\x3c\x89\xae\xf6\xe2\x1a\xd7\x37\x56\x05\xfe\x11\xec\x95\x93\x17\x37\xf1\xac\xc8\x39\x67\x2e\x64\xe8\x3a\x52\x7c\xc0\xd4\x71\xf1\xbf\x73\xe8\x27\xb2\x45\x27\xf2\x11\x67\x2c\x50\x09\x23\x5b\x1c\x08\xc4\x97\xaf\xd3\xb5\xc7\x11\x20\x91\xa5\x48\xc4\x18\xa1\x5f\x92\x81\x78\x3a\xca\x73\xce\xd8\x26\xe7\xac\x8e\xba\x5d\xab\x00\x7c\x65\x9c\x97\xa6\x42\xe1\x72\xce\xf4\x2c\x4a\xfe\x19\x83\xd1\x4d\x4c\x97\x2a\x2c\x2e\xa5\x97\x8d\xc8\x8b\x60\x70\x41\x24\x90\x28\x2f\x6e\x9d\x12\xd9\xa5\xd4\x0d\xd6\xe0\xed\x90\x35\xcb\x39\xdb\x70\xd6\x0e\x76\xdd\x32\x15\x13\x7c\x0a\x8e\x77\xb1\xbc\xc1\x37\xdb\x6e\x43\x36\x82\x7a\x04\xcf\x1b\xfe\xa7\x5c\x76\x81\x66\x67\xc5\x7a\xbe\x6e\x33\x46\x10\xe7\xbe\x85\x2d\xba\x3d\x12\x07\xbe\x27\x27\xfd\x53\x5f\xd1\x05\xd1\x44\x37\xfd\xe2\xfd\x26\xd7\x0c\x7d\x35\x87\x6a\x49\x84\xc6\x43\x87\xd3\xd3\xe9\x59\xe2\xfa\x59\xd2\x7b\x6d\xbc\x78\x61\xfb\x47\x7d\xa2\x24\x7b\x67\x6d\x23\x0e\x36\xbf\xab\x39\x49\x22\xd5\x79\x47\x31\xe8\x40\xbb\x24\xea\x81\x3a\x86\x2b\x33\xb3\x09\xe1\x38\x82\xd7\x01\xa2\x7f\xf7\xda\x28\x08\x37\x67\xa5\xf1\xe9\xbf\xe0\x1b\xda\x1d\x46\x72\xbf\x38\x9c\x46\x68\x4c\x17\x19\xef\x4f\xc4\x9e\xcf\xa5\x51\x98\xae\xc3\x01\xf7\xd1\xbd\x3b\xa6\x79\xcf\x86\x3b\xb1\x50\x25\xef\x56\xd6\x18\x5b\xc7\x36\xd8\xb8\x7d\x96\xdd\x39\xbe\x21\xcc\x76\xd3\xfa\xe6\x24\x9e\x30\xce\x17\xe6\xf9\xba\xc1\x71\xa8\x3b\xf3\xc4\x7a\x6f\x9c\x2f\xdf\xb9\x5f\x5e\xb9\xbf\x71\xa5\x40\xce\x3c\xd2\xf6\x0b\xd0\x6d\xf4\x5b\xb7\x60\xa8\x1c\xc2\xa7\x6d\x2a\x1d\xf6\x9a\x2c\xe7\x1b\xfe\x23\x00\x00\xff\xff\x17\x8b\x0a\x74\xcb\x07\x00\x00")

func generate_go() ([]byte, error) {
	return bindata_read(
		_generate_go,
		"generate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"0_init.down.sql": _0_init_down_sql,
	"0_init.up.sql": _0_init_up_sql,
	"bindata.go": bindata_go,
	"generate.go": generate_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"0_init.down.sql": &_bintree_t{_0_init_down_sql, map[string]*_bintree_t{
	}},
	"0_init.up.sql": &_bintree_t{_0_init_up_sql, map[string]*_bintree_t{
	}},
	"bindata.go": &_bintree_t{bindata_go, map[string]*_bintree_t{
	}},
	"generate.go": &_bintree_t{generate_go, map[string]*_bintree_t{
	}},
}}
