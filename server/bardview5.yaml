openapi: 3.0.3
# oapi-codegen -o bardview5.go -generate types bardview5.yaml
info:
  title: BardView5
  description: BardView5
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: localhost!
components:
  parameters:
    UserId:
      in: path
      name: userId
      schema:
        type: string
        example: 123
    UserUUID:
      in: path
      name: userUuid
      schema:
        type: string
        format: uuid
    Dnd5eSettingId:
      in: path
      name: dnd5eSettingId
      schema:
        type: integer
        format: int64
    Dnd5eSettingName:
      in: query
      name: name
      description: The beginning of the name
      schema:
        type: string
        example: Forgiven Songs
        maxLength: 512
        x-oapi-codegen-extra-tags:
          binding: "max=512"
  requestBodies:
    Patch:
      description: JsonPatch
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchDocument'
      required: true
  responses:
    UserGetOk:
      description: UserGet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserGet'
    UserPostOk:
      description: UserPost
      content:
        application/json:
          schema:
            type: object
            properties:
              userId:
                type: string
                example: 123
              version:
                type: integer
                format: int64
            required:
              - userId
              - version
      headers:
        ETag:
          schema:
            type: string
          description: Current version
        Location:
          schema:
            type: string
          description: Known Location
    Dnd5eSettingGetOk:
      description: Dnd5eSettingGet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dnd5eSettingGet'
    Dnd5eSettingArrayGetOk:
      description: Dnd5eSettingGet
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Dnd5eSettingGet'
    Dnd5eSettingPostOk:
      description: Dnd5eSettingPost
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dnd5eSettingPostOk'
      headers:
        ETag:
          schema:
            type: string
          description: Current version
        Location:
          schema:
            type: string
          description: Known Location
    Dnd5eMonsterGetOk:
      description: Dnd5eMonsterGet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dnd5eMonsterGet'
    Dnd5eMonsterArrayGetOk:
      description: Dnd5eSettingGet
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Dnd5eMonsterGet'
    Dnd5eMonsterPostOk:
      description: Dnd5eMonsterPost
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dnd5eMonsterPostOk'
      headers:
        ETag:
          schema:
            type: string
          description: Current version
        Location:
          schema:
            type: string
          description: Known Location
  schemas:
    PatchDocument:
      description: A JSONPatch document as defined by RFC 6902
      type: array
      items:
        type: object
        properties:
          op:
            type: string
            description: The operation to be performed
            enum:
              - "add"
              - "remove"
              - "replace"
              - "move"
              - "copy"
              - "test"
          path:
            type: string
            description: A JSON-Pointer
          value:
            type: object
            description: The value to be used within the operations.
          from:
            type: string
            description: A string containing a JSON Pointer value.
        required:
          - "op"
          - "path"
    StringId:
      type: string
      maxLength: 27
      minLength: 27
      example: 0ujsswThIGTUYm2K8FjOOfXtY1K
      title: String Id
      readOnly: true
      description: A 27 character string representing an unique id
    Created:
      type: string
      format: date-time
      readOnly: true
      description: The created time of this record
      title: Created
    LastModified:
      type: string
      format: date-time
      readOnly: true
      description: The last modified time of this record
      title: LastModified
    Email:
      type: string
      minLength: 1
      maxLength: 512
      example: test@test.com
      x-oapi-codegen-extra-tags:
        binding: "required,email,min=1,max=512"
    SystemTags:
      type: array
      maxItems: 64
      x-oapi-codegen-extra-tags:
        binding: "required,max=64,dive,max=256"
      items:
        type: string
        maxLength: 256
        example: Player
    UserTags:
      type: array
      maxItems: 64
      x-oapi-codegen-extra-tags:
        binding: "required,max=64,dive,max=256"
      items:
        type: string
        maxLength: 256
        example: LookingForPlayers
    Dnd5eSetting:
      type: object
      properties:
        name:
          type: string
          example: Forgiven Songs
          maxLength: 512
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "required,min=1,max=512"
        description:
          type: string
          example: A whole new setting!
          maxLength: 1024
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "required,min=1,max=1024"
        module:
          type: string
          example: A Hidden Module
          maxLength: 512
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "max=512"
        active:
          type: boolean
          example: true
        commonAccess:
          type: string
          example: private
          maxLength: 20
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "required,oneof=private anyuser public"
        userTags:
          $ref: '#/components/schemas/UserTags'
        systemTags:
          $ref: '#/components/schemas/SystemTags'
      required:
        - systemTags
        - userTags
        - name
        - description
        - commonAccess
        - active
    Dnd5eSettingGet:
      allOf:
        - $ref: '#/components/schemas/Dnd5eSetting'
        - type: object
          properties:
            dnd5eSettingId:
              type: string
              example: 123
            created:
              $ref: '#/components/schemas/Created'
            version:
              type: integer
              format: int64
          required:
            - dnd5eSettingId
            - created
            - version
    Dnd5eSettingPostOk:
      type: object
      properties:
        dnd5eSettingId:
          type: string
          example: 123
        version:
          type: integer
          format: int64
      required:
        - dnd5eSettingId
        - version
    Dnd5eMonster:
      type: object
      properties:
        dnd5eSettingId:
          type: string
          example: 123
        name:
          type: string
          example: Goblin
          maxLength: 512
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "required,min=1,max=512"
        description:
          type: string
          example: Goblins are fierce and territorial!
          maxLength: 1024
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "max=1024"
        sizeCategory:
          type: string
          example: Small
          maxLength: 40
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "max=80"
        armorClass:
          type: integer
          example: 13
          minimum: 0
          maximum: 40
        hitPoints:
          type: integer
          example: 10
          minimum: 1
          maximum: 2000
        legendary:
          type: boolean
          example: false
          default: false
        unique:
          type: boolean
          example: false
          default: false
        monsterType:
          type: string
          example: Goblin
          maxLength: 80
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "max=80"
        alignment:
          type: string
          example: Chaotic Evil
          maxLength: 40
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "max=40"
        challengeRating:
          type: string
          example: 4
          maxLength: 40
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "max=40"
        userTags:
          $ref: '#/components/schemas/UserTags'
        languages:
          type: array
          maxItems: 16
          x-oapi-codegen-extra-tags:
            binding: "max=16,dive,max=256"
          items:
            type: string
            maxLength: 256
            example: Goblin
        environments:
          type: array
          maxItems: 16
          x-oapi-codegen-extra-tags:
            binding: "max=16,dive,max=256"
          items:
            type: string
            maxLength: 256
            example: forest
        sources:
          type: array
          maxItems: 16
          x-oapi-codegen-extra-tags:
            binding: "max=16,dive,max=256"
          items:
            type: string
            maxLength: 256
            example: "Fifth Edition Foes: 20"
      required:
        - userTags
        - name
        - dnd5eSettingId
    Dnd5eMonsterGet:
      allOf:
        - $ref: '#/components/schemas/Dnd5eMonster'
        - type: object
          properties:
            dnd5eMonsterId:
              type: string
              example: 123
            created:
              $ref: '#/components/schemas/Created'
            version:
              type: integer
              format: int64
          required:
            - dnd5eMonsterId
            - created
            - version
    Dnd5eMonsterPostOk:
      type: object
      properties:
        dnd5eMonsterId:
          type: string
          example: 123
        version:
          type: integer
          format: int64
      required:
        - dnd5eMonsterId
        - version
    User:
      type: object
      properties:
        name:
          type: string
          example: Arthur Dent
          maxLength: 512
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "required,min=1,max=512"
        active:
          type: boolean
          example: true
        commonAccess:
          type: string
          example: private
          maxLength: 20
          minLength: 1
          x-oapi-codegen-extra-tags:
            binding: "required,oneof=private anyuser public"
        email:
          $ref: '#/components/schemas/Email'
        userTags:
          $ref: '#/components/schemas/UserTags'
        systemTags:
          $ref: '#/components/schemas/SystemTags'
      required:
        - systemTags
        - userTags
        - email
        - name
        - commonAccess
        - active
    UserGet:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            userId:
              type: string
              example: 123
            created:
              $ref: '#/components/schemas/Created'
            version:
              type: integer
              format: int64
            uuid:
              type: string
              format: uuid
              x-oapi-codegen-extra-tags:
                binding: "required,uuid"
          required:
            - userId
            - created
            - version
            - uuid
paths:
  /api/v1/dnd5e/settings/assigned:
    get:
      summary: Returns all Dnd5e Settings that I have explicit access to.
      tags:
        - Dnd5eSetting
      responses:
        '200':
          $ref: '#/components/responses/Dnd5eSettingArrayGetOk'
  /api/v1/dnd5e/settings/{dnd5eSettingId}/monsters:
    get:
      summary: Returns Dnd5e Setting's Monsters
      tags:
        - Dnd5eSetting
      parameters:
        - $ref: '#/components/parameters/Dnd5eSettingId'
      responses:
        '200':
          $ref: '#/components/responses/Dnd5eMonsterArrayGetOk'
  /api/v1/dnd5e/settings/{dnd5eSettingId}:
    get:
      summary: Returns Dnd5e Setting
      tags:
        - Dnd5eSetting
      parameters:
        - $ref: '#/components/parameters/Dnd5eSettingId'
      responses:
        '200':
          $ref: '#/components/responses/Dnd5eSettingGetOk'
    post:
      summary: Updates dnd5e setting.
      tags:
        - Dnd5eSetting
      parameters:
        - $ref: '#/components/parameters/Dnd5eSettingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dnd5eSetting'
      responses:
        '201':
          $ref: '#/components/responses/Dnd5eSettingPostOk'
  /api/v1/dnd5e/settings:
    get:
      summary: Returns all Dnd5e Settings that I have access to.
      tags:
        - Dnd5eSetting
      parameters:
        - $ref: '#/components/parameters/Dnd5eSettingName'
      responses:
        '200':
          $ref: '#/components/responses/Dnd5eSettingArrayGetOk'
    post:
      summary: Creates a new dnd5e setting.
      tags:
        - Dnd5eSetting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dnd5eSetting'
      responses:
        '201':
          $ref: '#/components/responses/Dnd5eSettingPostOk'
  /api/v1/users/me:
    get:
      summary: Returns current user
      tags:
        - User
      responses:
        '200':
          $ref: '#/components/responses/UserGetOk'
  /api/v1/users/{userUuid}:
    get:
      summary: Returns a user by UUID.
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserUUID'
      responses:
        '200':
          $ref: '#/components/responses/UserGetOk'
  /api/v1/users/{userId}:
    get:
      summary: Returns a user by ID.
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          $ref: '#/components/responses/UserGetOk'
    patch:
      summary: Patches a user
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        $ref: '#/components/requestBodies/Patch'
      responses:
        '200':
          $ref: '#/components/responses/UserGetOk'

  /api/v1/users:
    post:
      summary: Creates a new user or updates a user.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          $ref: '#/components/responses/UserPostOk'
        '200':
          $ref: '#/components/responses/UserPostOk'

