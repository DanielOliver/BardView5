// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getAclBySubjectStmt, err = db.PrepareContext(ctx, getAclBySubject); err != nil {
		return nil, fmt.Errorf("error preparing query GetAclBySubject: %w", err)
	}
	if q.monsterFindByIdStmt, err = db.PrepareContext(ctx, monsterFindById); err != nil {
		return nil, fmt.Errorf("error preparing query MonsterFindById: %w", err)
	}
	if q.sizeFindAllStmt, err = db.PrepareContext(ctx, sizeFindAll); err != nil {
		return nil, fmt.Errorf("error preparing query SizeFindAll: %w", err)
	}
	if q.userFindByEmailStmt, err = db.PrepareContext(ctx, userFindByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UserFindByEmail: %w", err)
	}
	if q.userFindByIdStmt, err = db.PrepareContext(ctx, userFindById); err != nil {
		return nil, fmt.Errorf("error preparing query UserFindById: %w", err)
	}
	if q.userFindByUuidStmt, err = db.PrepareContext(ctx, userFindByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query UserFindByUuid: %w", err)
	}
	if q.userInsertStmt, err = db.PrepareContext(ctx, userInsert); err != nil {
		return nil, fmt.Errorf("error preparing query UserInsert: %w", err)
	}
	if q.userUpdateStmt, err = db.PrepareContext(ctx, userUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query UserUpdate: %w", err)
	}
	if q.worldFindByIdStmt, err = db.PrepareContext(ctx, worldFindById); err != nil {
		return nil, fmt.Errorf("error preparing query WorldFindById: %w", err)
	}
	if q.worldInsertStmt, err = db.PrepareContext(ctx, worldInsert); err != nil {
		return nil, fmt.Errorf("error preparing query WorldInsert: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getAclBySubjectStmt != nil {
		if cerr := q.getAclBySubjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAclBySubjectStmt: %w", cerr)
		}
	}
	if q.monsterFindByIdStmt != nil {
		if cerr := q.monsterFindByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing monsterFindByIdStmt: %w", cerr)
		}
	}
	if q.sizeFindAllStmt != nil {
		if cerr := q.sizeFindAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing sizeFindAllStmt: %w", cerr)
		}
	}
	if q.userFindByEmailStmt != nil {
		if cerr := q.userFindByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userFindByEmailStmt: %w", cerr)
		}
	}
	if q.userFindByIdStmt != nil {
		if cerr := q.userFindByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userFindByIdStmt: %w", cerr)
		}
	}
	if q.userFindByUuidStmt != nil {
		if cerr := q.userFindByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userFindByUuidStmt: %w", cerr)
		}
	}
	if q.userInsertStmt != nil {
		if cerr := q.userInsertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userInsertStmt: %w", cerr)
		}
	}
	if q.userUpdateStmt != nil {
		if cerr := q.userUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userUpdateStmt: %w", cerr)
		}
	}
	if q.worldFindByIdStmt != nil {
		if cerr := q.worldFindByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing worldFindByIdStmt: %w", cerr)
		}
	}
	if q.worldInsertStmt != nil {
		if cerr := q.worldInsertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing worldInsertStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	getAclBySubjectStmt *sql.Stmt
	monsterFindByIdStmt *sql.Stmt
	sizeFindAllStmt     *sql.Stmt
	userFindByEmailStmt *sql.Stmt
	userFindByIdStmt    *sql.Stmt
	userFindByUuidStmt  *sql.Stmt
	userInsertStmt      *sql.Stmt
	userUpdateStmt      *sql.Stmt
	worldFindByIdStmt   *sql.Stmt
	worldInsertStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		getAclBySubjectStmt: q.getAclBySubjectStmt,
		monsterFindByIdStmt: q.monsterFindByIdStmt,
		sizeFindAllStmt:     q.sizeFindAllStmt,
		userFindByEmailStmt: q.userFindByEmailStmt,
		userFindByIdStmt:    q.userFindByIdStmt,
		userFindByUuidStmt:  q.userFindByUuidStmt,
		userInsertStmt:      q.userInsertStmt,
		userUpdateStmt:      q.userUpdateStmt,
		worldFindByIdStmt:   q.worldFindByIdStmt,
		worldInsertStmt:     q.worldInsertStmt,
	}
}
