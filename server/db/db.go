// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.dnd5eInhabitantsFindByWorldStmt, err = db.PrepareContext(ctx, dnd5eInhabitantsFindByWorld); err != nil {
		return nil, fmt.Errorf("error preparing query Dnd5eInhabitantsFindByWorld: %w", err)
	}
	if q.dnd5eInhabitantsFindByWorldAndMonsterStmt, err = db.PrepareContext(ctx, dnd5eInhabitantsFindByWorldAndMonster); err != nil {
		return nil, fmt.Errorf("error preparing query Dnd5eInhabitantsFindByWorldAndMonster: %w", err)
	}
	if q.dnd5eLanguageFindAllStmt, err = db.PrepareContext(ctx, dnd5eLanguageFindAll); err != nil {
		return nil, fmt.Errorf("error preparing query Dnd5eLanguageFindAll: %w", err)
	}
	if q.dnd5eMonsterFindByIdStmt, err = db.PrepareContext(ctx, dnd5eMonsterFindById); err != nil {
		return nil, fmt.Errorf("error preparing query Dnd5eMonsterFindById: %w", err)
	}
	if q.dnd5eSizeCategoryFindAllStmt, err = db.PrepareContext(ctx, dnd5eSizeCategoryFindAll); err != nil {
		return nil, fmt.Errorf("error preparing query Dnd5eSizeCategoryFindAll: %w", err)
	}
	if q.dnd5eWorldFindByIdStmt, err = db.PrepareContext(ctx, dnd5eWorldFindById); err != nil {
		return nil, fmt.Errorf("error preparing query Dnd5eWorldFindById: %w", err)
	}
	if q.dnd5eWorldInsertStmt, err = db.PrepareContext(ctx, dnd5eWorldInsert); err != nil {
		return nil, fmt.Errorf("error preparing query Dnd5eWorldInsert: %w", err)
	}
	if q.getAclBySubjectStmt, err = db.PrepareContext(ctx, getAclBySubject); err != nil {
		return nil, fmt.Errorf("error preparing query GetAclBySubject: %w", err)
	}
	if q.userFindByEmailStmt, err = db.PrepareContext(ctx, userFindByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UserFindByEmail: %w", err)
	}
	if q.userFindByIdStmt, err = db.PrepareContext(ctx, userFindById); err != nil {
		return nil, fmt.Errorf("error preparing query UserFindById: %w", err)
	}
	if q.userFindByUuidStmt, err = db.PrepareContext(ctx, userFindByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query UserFindByUuid: %w", err)
	}
	if q.userInsertStmt, err = db.PrepareContext(ctx, userInsert); err != nil {
		return nil, fmt.Errorf("error preparing query UserInsert: %w", err)
	}
	if q.userUpdateStmt, err = db.PrepareContext(ctx, userUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query UserUpdate: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.dnd5eInhabitantsFindByWorldStmt != nil {
		if cerr := q.dnd5eInhabitantsFindByWorldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dnd5eInhabitantsFindByWorldStmt: %w", cerr)
		}
	}
	if q.dnd5eInhabitantsFindByWorldAndMonsterStmt != nil {
		if cerr := q.dnd5eInhabitantsFindByWorldAndMonsterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dnd5eInhabitantsFindByWorldAndMonsterStmt: %w", cerr)
		}
	}
	if q.dnd5eLanguageFindAllStmt != nil {
		if cerr := q.dnd5eLanguageFindAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dnd5eLanguageFindAllStmt: %w", cerr)
		}
	}
	if q.dnd5eMonsterFindByIdStmt != nil {
		if cerr := q.dnd5eMonsterFindByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dnd5eMonsterFindByIdStmt: %w", cerr)
		}
	}
	if q.dnd5eSizeCategoryFindAllStmt != nil {
		if cerr := q.dnd5eSizeCategoryFindAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dnd5eSizeCategoryFindAllStmt: %w", cerr)
		}
	}
	if q.dnd5eWorldFindByIdStmt != nil {
		if cerr := q.dnd5eWorldFindByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dnd5eWorldFindByIdStmt: %w", cerr)
		}
	}
	if q.dnd5eWorldInsertStmt != nil {
		if cerr := q.dnd5eWorldInsertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dnd5eWorldInsertStmt: %w", cerr)
		}
	}
	if q.getAclBySubjectStmt != nil {
		if cerr := q.getAclBySubjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAclBySubjectStmt: %w", cerr)
		}
	}
	if q.userFindByEmailStmt != nil {
		if cerr := q.userFindByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userFindByEmailStmt: %w", cerr)
		}
	}
	if q.userFindByIdStmt != nil {
		if cerr := q.userFindByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userFindByIdStmt: %w", cerr)
		}
	}
	if q.userFindByUuidStmt != nil {
		if cerr := q.userFindByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userFindByUuidStmt: %w", cerr)
		}
	}
	if q.userInsertStmt != nil {
		if cerr := q.userInsertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userInsertStmt: %w", cerr)
		}
	}
	if q.userUpdateStmt != nil {
		if cerr := q.userUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userUpdateStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                        DBTX
	tx                                        *sql.Tx
	dnd5eInhabitantsFindByWorldStmt           *sql.Stmt
	dnd5eInhabitantsFindByWorldAndMonsterStmt *sql.Stmt
	dnd5eLanguageFindAllStmt                  *sql.Stmt
	dnd5eMonsterFindByIdStmt                  *sql.Stmt
	dnd5eSizeCategoryFindAllStmt              *sql.Stmt
	dnd5eWorldFindByIdStmt                    *sql.Stmt
	dnd5eWorldInsertStmt                      *sql.Stmt
	getAclBySubjectStmt                       *sql.Stmt
	userFindByEmailStmt                       *sql.Stmt
	userFindByIdStmt                          *sql.Stmt
	userFindByUuidStmt                        *sql.Stmt
	userInsertStmt                            *sql.Stmt
	userUpdateStmt                            *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		dnd5eInhabitantsFindByWorldStmt: q.dnd5eInhabitantsFindByWorldStmt,
		dnd5eInhabitantsFindByWorldAndMonsterStmt: q.dnd5eInhabitantsFindByWorldAndMonsterStmt,
		dnd5eLanguageFindAllStmt:                  q.dnd5eLanguageFindAllStmt,
		dnd5eMonsterFindByIdStmt:                  q.dnd5eMonsterFindByIdStmt,
		dnd5eSizeCategoryFindAllStmt:              q.dnd5eSizeCategoryFindAllStmt,
		dnd5eWorldFindByIdStmt:                    q.dnd5eWorldFindByIdStmt,
		dnd5eWorldInsertStmt:                      q.dnd5eWorldInsertStmt,
		getAclBySubjectStmt:                       q.getAclBySubjectStmt,
		userFindByEmailStmt:                       q.userFindByEmailStmt,
		userFindByIdStmt:                          q.userFindByIdStmt,
		userFindByUuidStmt:                        q.userFindByUuidStmt,
		userInsertStmt:                            q.userInsertStmt,
		userUpdateStmt:                            q.userUpdateStmt,
	}
}
