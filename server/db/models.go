// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"time"

	"github.com/google/uuid"
)

type CommonAccess struct {
	Name      string    `db:"name"`
	CreatedAt time.Time `db:"created_at"`
}

type Dnd5eLanguage struct {
	Dnd5eLanguageID int64         `db:"dnd5e_language_id"`
	CreatedBy       sql.NullInt64 `db:"created_by"`
	CreatedAt       time.Time     `db:"created_at"`
	Version         int64         `db:"version"`
	Name            string        `db:"name"`
}

type Dnd5eMonster struct {
	Dnd5eMonsterID       int64         `db:"dnd5e_monster_id"`
	CreatedBy            sql.NullInt64 `db:"created_by"`
	CreatedAt            time.Time     `db:"created_at"`
	Version              int64         `db:"version"`
	Dnd5eWorldID         sql.NullInt64 `db:"dnd5e_world_id"`
	Name                 string        `db:"name"`
	UserTags             []string      `db:"user_tags"`
	SystemTags           []string      `db:"system_tags"`
	MonsterType          string        `db:"monster_type"`
	Alignment            string        `db:"alignment"`
	SizeCategory         string        `db:"size_category"`
	MilliChallengeRating int64         `db:"milli_challenge_rating"`
	Languages            []string      `db:"languages"`
	Description          string        `db:"description"`
}

type Dnd5eMonsterType struct {
	CreatedBy sql.NullInt64 `db:"created_by"`
	CreatedAt time.Time     `db:"created_at"`
	Version   int64         `db:"version"`
	Name      string        `db:"name"`
}

type Dnd5eSizeCategory struct {
	CreatedBy sql.NullInt64 `db:"created_by"`
	CreatedAt time.Time     `db:"created_at"`
	Version   int64         `db:"version"`
	Name      string        `db:"name"`
	Space     string        `db:"space"`
}

type Dnd5eWorld struct {
	Dnd5eWorldID      int64          `db:"dnd5e_world_id"`
	CreatedBy         sql.NullInt64  `db:"created_by"`
	CreatedAt         time.Time      `db:"created_at"`
	Version           int64          `db:"version"`
	IsActive          bool           `db:"is_active"`
	CommonAccess      string         `db:"common_access"`
	UserTags          []string       `db:"user_tags"`
	SystemTags        []string       `db:"system_tags"`
	Name              string         `db:"name"`
	Module            sql.NullString `db:"module"`
	Description       string         `db:"description"`
	ExternalSourceID  sql.NullInt64  `db:"external_source_id"`
	ExternalSourceKey sql.NullString `db:"external_source_key"`
}

type Dnd5eWorldAssignment struct {
	CreatedBy    sql.NullInt64 `db:"created_by"`
	CreatedAt    time.Time     `db:"created_at"`
	Version      int64         `db:"version"`
	UserID       int64         `db:"user_id"`
	Dnd5eWorldID int64         `db:"dnd5e_world_id"`
	RoleAction   string        `db:"role_action"`
}

type ExternalSource struct {
	ExternalSourceID      int64         `db:"external_source_id"`
	CreatedBy             sql.NullInt64 `db:"created_by"`
	CreatedAt             time.Time     `db:"created_at"`
	Version               int64         `db:"version"`
	ExternalSourceKey     string        `db:"external_source_key"`
	ExternalSourceVersion string        `db:"external_source_version"`
	UserTags              []string      `db:"user_tags"`
	SystemTags            []string      `db:"system_tags"`
	Name                  string        `db:"name"`
}

type RoleAction struct {
	Name        string    `db:"name"`
	RoleSubject string    `db:"role_subject"`
	CreatedAt   time.Time `db:"created_at"`
}

type RoleSubject struct {
	Name      string    `db:"name"`
	CreatedAt time.Time `db:"created_at"`
}

type SchemaMigration struct {
	Version int64 `db:"version"`
	Dirty   bool  `db:"dirty"`
}

type User struct {
	UserID        int64         `db:"user_id"`
	Uuid          uuid.UUID     `db:"uuid"`
	CreatedBy     sql.NullInt64 `db:"created_by"`
	CreatedAt     time.Time     `db:"created_at"`
	Version       int64         `db:"version"`
	EffectiveDate time.Time     `db:"effective_date"`
	EndDate       sql.NullTime  `db:"end_date"`
	IsActive      bool          `db:"is_active"`
	CommonAccess  string        `db:"common_access"`
	Email         string        `db:"email"`
	Name          string        `db:"name"`
	UserTags      []string      `db:"user_tags"`
	SystemTags    []string      `db:"system_tags"`
}
