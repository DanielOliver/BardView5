// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getAclBySubject = `-- name: GetAclBySubject :many
SELECT
    ra.user_id
     ,rp.subject
     ,rp.conditions
     ,rp.action
     ,rp.subject_id
     ,r.name "role_name"
     ,r.role_id
FROM "role_assignment" ra
         INNER JOIN role r on ra.role_id = r.role_id AND r.is_active = true
         INNER JOIN role_permission rp on r.role_id = rp.role_id AND rp.is_active = true
WHERE rp.subject = $1
    AND (  rp.subject_id IS NULL
        OR rp.subject_id = $2)
    AND ra.user_id = $3
    AND ra.is_active = true
`

type GetAclBySubjectParams struct {
	Subject   string        `db:"subject"`
	SubjectID sql.NullInt64 `db:"subject_id"`
	UserID    int64         `db:"user_id"`
}

type GetAclBySubjectRow struct {
	UserID     int64           `db:"user_id"`
	Subject    string          `db:"subject"`
	Conditions json.RawMessage `db:"conditions"`
	Action     string          `db:"action"`
	SubjectID  sql.NullInt64   `db:"subject_id"`
	RoleName   string          `db:"role_name"`
	RoleID     int64           `db:"role_id"`
}

func (q *Queries) GetAclBySubject(ctx context.Context, arg GetAclBySubjectParams) ([]GetAclBySubjectRow, error) {
	rows, err := q.query(ctx, q.getAclBySubjectStmt, getAclBySubject, arg.Subject, arg.SubjectID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAclBySubjectRow{}
	for rows.Next() {
		var i GetAclBySubjectRow
		if err := rows.Scan(
			&i.UserID,
			&i.Subject,
			&i.Conditions,
			&i.Action,
			&i.SubjectID,
			&i.RoleName,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userFindById = `-- name: UserFindById :one
SELECT user_id, uuid, created_by, created_at, effective_date, end_date, is_active, email, name, tags FROM "user" u WHERE u.user_id = $1
`

func (q *Queries) UserFindById(ctx context.Context, userID int64) (User, error) {
	row := q.queryRow(ctx, q.userFindByIdStmt, userFindById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Uuid,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.EffectiveDate,
		&i.EndDate,
		&i.IsActive,
		&i.Email,
		&i.Name,
		pq.Array(&i.Tags),
	)
	return i, err
}

const userInsert = `-- name: UserInsert :execrows
INSERT INTO "user" as u (user_id, uuid, "name", email, tags, created_by)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (email) DO NOTHING
`

type UserInsertParams struct {
	UserID    int64         `db:"user_id"`
	Uuid      uuid.UUID     `db:"uuid"`
	Name      string        `db:"name"`
	Email     string        `db:"email"`
	Tags      []string      `db:"tags"`
	CreatedBy sql.NullInt64 `db:"created_by"`
}

func (q *Queries) UserInsert(ctx context.Context, arg UserInsertParams) (int64, error) {
	result, err := q.exec(ctx, q.userInsertStmt, userInsert,
		arg.UserID,
		arg.Uuid,
		arg.Name,
		arg.Email,
		pq.Array(arg.Tags),
		arg.CreatedBy,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const usersFindByUid = `-- name: UsersFindByUid :many
SELECT DISTINCT u.user_id, u.uuid, u.created_by, u.created_at, u.effective_date, u.end_date, u.is_active, u.email, u.name, u.tags
FROM role_assignment ra
         INNER JOIN role r on ra.role_id = r.role_id
         INNER JOIN role_permission rp on r.role_id = rp.role_id
         INNER JOIN "user" u on evaluate_access_user(rp.conditions, $1::bigint, u.user_id)
WHERE ra.user_id = $1::bigint
  AND rp.subject = 'user'
  AND rp.is_active = true
  AND ra.is_active = true
  AND r.is_active = true
  AND u.uuid = $2
ORDER BY u.user_id
`

type UsersFindByUidParams struct {
	SessionID int64     `db:"session_id"`
	Uuid      uuid.UUID `db:"uuid"`
}

func (q *Queries) UsersFindByUid(ctx context.Context, arg UsersFindByUidParams) ([]User, error) {
	rows, err := q.query(ctx, q.usersFindByUidStmt, usersFindByUid, arg.SessionID, arg.Uuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Uuid,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.EffectiveDate,
			&i.EndDate,
			&i.IsActive,
			&i.Email,
			&i.Name,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
