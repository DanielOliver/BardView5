// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (2.38kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.495kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x41\x8f\x9b\x3c\x10\xbd\x47\xca\x7f\x18\xed\x05\x90\x72\xf8\x2e\xdf\xa9\xa7\xd5\x8a\xad\xa2\x56\xac\x94\xa4\x95\xaa\xaa\x42\x06\x26\xa9\x1b\xb0\x29\x1e\x27\x4b\x7f\x7d\x85\x4d\x00\x27\x90\x4d\xa4\x56\xf5\x0d\xe3\x37\xf3\xde\xcc\xbc\x49\x2b\x64\x84\x40\x2c\xc9\x11\x1e\x52\x59\x14\x52\xc4\x2c\x4d\x51\xa9\x87\xf9\xcc\x9f\xcf\x00\x00\x04\x2b\x10\xec\x21\x7c\x25\x7b\xd9\x9c\x54\x0a\x45\x15\xe3\x82\xc0\x81\xc6\xe5\x1e\xca\x8a\x17\xac\xaa\x61\x8f\xf5\xc2\x22\x6c\xae\x2c\x66\x04\xc4\x0b\x54\xc4\x8a\x12\x8e\x9c\xbe\x4b\x6d\x6f\xe0\x97\x14\x08\x19\x6e\x99\xce\x09\x7c\x21\x8f\x7e\x00\x6c\xf8\xcf\xd3\x94\x7a\x01\x08\x49\x20\x74\x9e\xcf\x67\xc1\xbb\xf9\x6c\x3e\x73\x55\x68\x85\x55\x4f\xbe\xf9\x8a\x79\x76\xa2\x9c\xf0\x1d\x17\xe3\x12\xcc\xcb\x72\xdf\xff\x6b\xce\xa5\x0c\xad\xfb\x68\x97\x9f\xce\x39\xf1\x3c\x2b\x40\x52\x0f\xa8\x4c\x20\x2f\x51\xcc\x3e\xbd\x56\xba\xee\xdc\x51\xc3\x36\xcb\x01\x2b\xc5\xa5\x70\xcb\x74\x5d\x55\x9f\xe5\xbf\xa0\x8d\x82\xdb\x2d\xa6\xc4\x0f\x18\x67\xa6\x21\x7f\x87\x2b\x8a\xcc\xc6\x87\x37\x2b\x32\x40\x71\x15\x33\xc3\xad\x55\x28\x65\x8e\x4c\xdc\xa8\x90\x2a\x8d\x27\x91\xce\xa8\x5b\x4b\xdc\x38\x00\x58\x30\x9e\xf7\x7f\xef\x40\x0e\x2c\x78\x27\xd2\x4c\x35\xb1\x9d\xea\x91\x5f\xbf\xdd\x84\x54\xb5\x22\x2c\x3a\xec\x8d\x48\x8b\x7d\x7a\x89\xd6\x9b\xd5\xe3\x32\xda\xc0\x76\x1f\x1b\x0e\xed\x1c\x27\x75\x6f\xb0\xe7\x97\x55\xb8\x7c\x1f\xc1\x87\xf0\x0b\xf8\xbd\x3b\x02\xd7\x82\xab\xf0\x39\x5c\x85\xd1\x53\xb8\x6e\xbd\x0d\x7e\x6b\xea\x53\x47\xc6\xb2\x99\x26\xd9\x1e\x4d\x25\x1c\xf6\x71\x3a\xa7\xdb\x6e\xbf\xe9\x44\x70\xb6\x78\xb4\xe0\x3f\x35\x02\x17\x19\xbe\xda\x82\x9b\x4e\xc7\xda\xde\x48\xd1\x11\x37\xf7\x6f\x60\x9b\x8d\x32\x02\x6d\xae\xc7\xd6\x5d\x25\x73\x8c\x95\x4e\x7e\x60\x4a\xf7\xed\xec\x21\xf2\xdf\xae\x6c\xc3\xa4\x71\xa7\x14\xa3\x12\xde\x12\x61\xa1\xe3\x1a\x86\x2a\xaf\x1a\xe7\x86\x33\xb1\xd0\xcd\x6a\xfe\x43\x05\x9a\xb0\xd0\x50\x66\x2b\x66\x62\xac\x87\x7a\xaf\x38\xc9\x19\x9b\xb3\xb1\x5e\x46\xeb\x70\xb5\x81\x65\xb4\x79\x71\xcb\x77\x7a\xf6\xf9\xf1\xe3\xa7\x70\x0d\xbe\x97\x89\xec\x7f\x54\x48\xc4\xc5\xce\x9b\x00\x5b\xd6\x16\xbb\x80\x33\x7a\x5d\xa4\x82\x09\xb6\x43\x6f\x01\x67\x31\x17\x9d\x04\xdf\x93\x47\x81\xd5\xf5\x27\x07\x8e\xc7\xcb\x17\x17\xc4\xc6\x4d\xdd\x91\x29\x2b\x7e\x60\x84\x6e\x68\x26\xea\xc6\x8a\xee\x65\xa9\x93\x9c\xa7\x26\xc3\xef\x00\x00\x00\xff\xff\xcd\x9c\x5f\x72\x4c\x09\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 2380, mode: os.FileMode(0666), modTime: time.Unix(1645926356, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xb6, 0x22, 0x8a, 0x14, 0x45, 0x28, 0xd7, 0xd, 0x84, 0xf9, 0x94, 0x77, 0xa9, 0xa8, 0xa5, 0xc3, 0xa1, 0xbd, 0xa5, 0x39, 0x61, 0xa3, 0x81, 0x43, 0xd0, 0xe7, 0xef, 0xf9, 0xf2, 0xc6, 0x8e}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xcd\x6e\xe3\x36\x10\xbe\x07\xc8\x3b\x0c\x7c\xb1\x0d\x18\x45\xb2\x40\x4e\x3d\x05\x0b\xef\xd6\xe8\xae\x53\xd8\x6e\x81\x45\x51\x08\xb4\x34\x51\x88\x50\xa4\x4b\x52\x49\xb4\xef\xd6\x4b\x9f\xac\xa0\xfe\x4c\x4a\xa4\xac\x04\xf5\xb6\xc0\xea\x90\x00\xe2\xc7\x99\x8f\xf3\xc3\xf9\xe4\x58\x22\xd1\x08\x9a\xec\x19\xc2\x24\xe1\xc9\x0d\x46\x0a\xb5\xa6\x3c\x9d\x5c\x5e\xcc\x2e\x2f\x00\x00\x9c\xd7\x11\x4d\x60\x4f\x53\xca\x75\xb5\x68\x9e\x58\x70\xa5\x25\xa1\x5c\x77\xb0\x87\xc7\x23\xc8\x3c\x07\x49\x33\x22\x0b\x78\xc4\x62\x51\xad\x54\x04\x92\x68\x5f\xd4\x90\xca\x36\x00\xcf\x19\xeb\x60\x88\xae\x31\x9a\x66\xa8\x34\xc9\x0e\xf0\x4c\xf5\x83\xc8\x75\xf9\x06\xbe\x0a\x8e\x90\xe0\x3d\xc9\x99\x86\x19\x17\xcf\xb3\x39\x10\x7b\x6d\x9a\xeb\x78\x3a\x07\x2e\xb4\x6d\xfe\x09\xa5\xa2\x82\x1f\x59\xb6\x14\x6a\x9c\x7d\x82\xd6\xfc\xd5\xbc\xde\x4e\x55\x44\x62\x4d\x9f\xb0\xdd\x2e\x04\x43\xc2\x87\xb7\x6b\x99\x63\x63\x21\x16\x59\x26\x78\x44\xe2\x18\x95\x2a\xcf\x87\x2f\xe5\x51\x3b\x44\x73\x85\x32\xd2\x24\x55\x8d\x35\x83\xfb\xfd\x8f\x1e\x4e\x15\x4a\x63\x66\x21\x03\x38\x4e\x32\xb4\xc9\x85\xfc\x66\x22\xc9\x19\xfa\x70\x47\x4c\x82\x2a\x96\xf4\xa0\xdb\x40\x7a\x6c\x55\xc8\xf7\x77\xeb\xed\x6e\x73\xbb\x5a\xef\xe0\xfe\x31\x72\xeb\xa5\xce\xf4\xbe\x38\x96\xcd\x87\xbb\xcd\x72\xf5\x71\x0d\x3f\x2f\xbf\xc0\xec\x58\x2d\x73\xb7\xb0\x36\xcb\x0f\xcb\xcd\x72\xfd\x7e\xb9\x85\x89\x09\xd3\x04\x66\x65\xb4\x68\xd2\x04\x79\xd0\x6d\x99\x80\x2a\xfe\x21\xcf\x76\x8e\xc2\xce\xdd\x54\xce\x4c\x84\xe7\xe6\xe0\xf3\x1f\xcd\xdf\x81\x6e\x8b\x88\x52\x34\xe5\x19\x72\x7d\x6c\xbc\x50\x73\xfc\xf7\xbd\xe1\xab\x6d\x4f\x6f\xd4\x39\x08\x6e\x5f\x0c\x5e\x30\x5d\x98\x14\x0c\xcb\x5e\xeb\xd4\xd8\x50\x89\x85\x82\xec\x5c\x4d\xbf\x6c\x56\x9f\x6f\x37\x5f\xaa\x4c\xd7\x9c\x17\x3d\x56\xf3\x51\x25\x6c\xb9\x30\x96\x02\xe5\xd4\x14\xe7\xbf\x59\xc5\x96\xe7\xfa\x55\xc0\x79\xef\x60\x61\x16\xee\x44\xf0\x6c\x7d\x1d\x2f\x2b\x83\x01\x6e\x16\x62\x80\x96\x85\x9a\xb4\x5d\x56\xf5\x98\xbf\xcb\x32\x33\xa1\xcc\xed\x59\x1c\xd0\xdb\x5f\x83\x9d\x75\xb6\x9e\x7a\x5d\x37\x59\xf7\x75\xa7\xf2\x07\x46\xb1\x7d\xf2\x13\xf3\x38\x9c\x4a\xc7\xc8\x39\x2e\xe9\xc1\x1b\x92\x7e\xc5\x28\x26\x1a\x53\x21\x8b\xef\x2b\x79\xce\xd1\x47\xa8\x29\x75\x20\x31\x7a\x9d\x0c\xdf\x5d\x8e\x9b\x6f\x9d\xdf\xba\xb8\xaa\xcc\xda\x03\xa1\xa9\xba\x76\x80\x9c\xd4\x9d\xcd\x8e\x37\xe8\x4e\xdb\xc3\xb0\xfa\xac\xe3\x7b\xde\x39\xdb\xa1\x33\x4a\x89\xf6\xc6\xa8\xdf\x48\x48\xfd\x39\x75\xd3\xd3\x94\x22\x97\x31\x2a\x1f\xda\xa3\x2c\x7b\x4a\x75\x10\xcd\x08\x4f\x73\x92\x76\xad\x07\xd0\xc8\x9f\xa8\x14\xe5\x3c\x51\xa7\xd1\x54\x45\x0c\x53\xe4\x89\x49\xbf\x15\xd8\x31\x1a\xfd\x9e\x30\x85\x96\xcc\xcf\x39\xfd\x33\xef\xc4\xec\xf5\x86\xec\xbb\xd4\x17\xf7\x23\x77\xc2\xea\xb9\x19\xc8\x90\x95\x1d\xbb\x81\x07\x91\x19\x65\x8c\x46\xf1\x03\x61\x0c\x79\x8a\x91\x24\xa6\x58\x7c\x75\x4f\x64\x26\x64\x14\x33\xa2\x9c\xbc\xd0\x9a\x8e\x85\x7c\xa0\x3a\x3a\x08\xea\xe6\xc3\x8b\xec\x7d\x25\x84\x4f\xa4\x65\xa4\x62\x21\x3b\xe1\xf6\xda\x7c\x19\x89\xa4\x46\x19\x8d\x42\x3e\x53\x35\x12\x19\x0b\x3e\x16\xf9\x40\x46\x20\x4f\xcf\xe0\x6f\xfc\x8d\xd4\xb8\xfd\x5f\x48\xca\x86\x8c\x67\x6c\x05\x88\x39\x98\xd3\xac\x1c\xa9\x51\x2b\xcb\x11\x7c\x4c\x2f\x07\x08\xd8\x90\x93\xfe\x1d\x99\xda\x11\xb6\xf5\xe8\xa4\x3c\xc1\x17\xf0\xe6\x06\x04\x77\x17\xfa\xc1\x5d\xf4\x46\xeb\x58\xe3\x51\x39\x2f\xc6\x78\x28\x59\x03\xe5\x31\xcb\x13\x6c\x00\x01\x87\x8e\x10\x68\xe6\x40\x5f\x09\x34\x2b\xa3\x7e\x7c\x6a\xc1\x6f\x51\x01\x23\xbe\xb0\xcf\x3e\xfa\xdf\x2c\x2c\x1b\x7e\xaf\x90\x7e\x6d\xb0\xce\xa9\xfa\x56\xeb\xed\x72\xb3\x83\xd5\x7a\x77\x37\xd4\x69\x8b\x4a\xbf\xce\x2f\x2f\x7e\xbb\xfd\xf4\xeb\x72\x0b\xb3\xe9\x8e\xf2\x62\xba\x80\xe9\xbb\xbf\xff\x82\x7d\x01\xe6\xdf\xbd\xfe\x61\xda\x9c\x1d\x00\x66\xd3\x6d\x46\x18\x33\xa0\x1b\x03\xb9\xe9\x03\x3e\x63\x42\xf3\x6c\x08\xf1\x89\xc8\x14\x0d\xe0\xfa\xca\x20\xae\xaf\xfa\x90\x9f\xf2\x1a\x51\xda\xb8\xf6\x18\xf9\x48\x64\x4a\xb8\xce\x09\x2f\x19\x97\x96\xde\x95\x96\x40\x48\x60\xc6\x85\x9c\x56\x01\xf9\x27\x00\x00\xff\xff\x98\xd4\x20\xcd\x77\x15\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5495, mode: os.FileMode(0666), modTime: time.Unix(1646535055, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x2d, 0x3, 0xfb, 0x1a, 0x19, 0x6, 0x75, 0x57, 0x17, 0x72, 0x5e, 0x96, 0xdd, 0x56, 0xb8, 0x2, 0x25, 0x84, 0x9, 0x1d, 0xf8, 0x82, 0x26, 0xc, 0xf4, 0x27, 0x28, 0x1, 0xc, 0x8d, 0xb2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
