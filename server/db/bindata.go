// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000001_init.down.sql (0)
// ../migrations/0000001_init.up.sql (9.661kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_initDownSql,
		"0000001_init.down.sql",
	)
}

func _0000001_initDownSql() (*asset, error) {
	bytes, err := _0000001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_init.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1649022925, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x6f\xdb\x36\x14\xbf\xfb\x53\x3c\xe4\x62\x1b\x50\x82\xa4\x43\x4f\x3b\x05\x99\xdb\x05\x6d\x93\xc1\xc9\x0a\x14\xc3\x20\xd0\xd2\xb3\xc3\x45\x22\x35\x91\x4a\xea\x0e\xfb\x68\xbb\xec\x93\x0d\xa4\x28\x89\x94\x28\x59\xde\xec\xe4\x30\x5d\xea\x4a\xef\x1f\xdf\xdf\x1f\x5f\xa2\x1c\x89\x44\x90\x64\x95\x20\x9c\x44\x3c\x4d\x39\x0b\x49\x14\xa1\x10\x27\x93\xd9\x04\x00\x80\x91\x14\xa1\x7c\x24\x7e\x95\x13\xf3\x1b\x22\xce\x84\xcc\x09\x65\x12\x1c\xbe\x30\x7b\x84\x2c\xa7\x29\xc9\xb7\xf0\x88\xdb\x40\x33\x94\x7a\xe2\x90\x48\x90\x34\x45\x21\x49\x9a\xc1\x33\x95\x0f\xbc\x28\xdf\xc0\x37\xce\x10\x62\x5c\x93\x22\x91\x30\x63\xfc\x79\x36\x07\x62\x7f\x9b\x16\x32\x9a\xce\x81\x71\x09\xac\x48\x92\xc9\xfc\xfb\xc9\xe4\xfa\xe6\x6e\xb1\xbc\x87\xeb\x9b\xfb\x5b\xd7\x08\x98\x29\xb3\xe7\x93\xcf\x97\x1f\x7f\x5e\xdc\xc1\x6c\x9a\xe5\xf4\x89\x48\x9c\xce\x83\xea\x00\xb3\x29\x61\xdb\x42\x60\xee\xbc\xcb\x8a\x55\x42\xa3\xa9\x12\xee\xfa\x46\x51\x56\x2e\x51\xbf\x43\x1a\x57\x9e\x58\xd1\x0d\x65\x5e\xc7\x68\xc2\xec\xb1\xfe\xa4\x9e\x8e\x6f\x8a\xa2\x11\xd5\xfd\xaf\xf3\x54\x87\x77\x9d\xba\xda\x5a\x66\xf4\x30\x76\x98\x48\x49\x39\x14\x8d\xfa\xd9\x23\x2c\xa5\x92\x27\xcc\x05\xe5\xcc\x75\xd0\xf0\x91\x1a\x25\xe7\x26\x1e\xb8\x5e\x63\x24\xe9\x13\x86\xb1\x8e\xc3\x51\x2c\x45\x16\x97\xe2\x61\xa7\x3b\x1a\x26\x2a\x42\xa2\x2d\x33\xc7\xe3\x3c\x41\xc2\x46\x1e\x4f\xe6\x05\x9a\x13\xba\x29\xab\xcb\x6b\x5c\xe4\x31\x25\x34\x69\x3e\x8e\x67\xb4\x8a\x79\x3f\x46\x9d\xc9\x92\x6c\x44\xc3\xf8\xcb\xaf\x63\x18\xc5\x56\x48\x4c\x6b\xd6\x71\x8c\x9a\xf3\xea\xf6\xe6\xee\x7e\x79\x79\x7d\x73\x0f\xeb\xc7\x50\x1b\x60\x92\x77\xb5\xad\x2b\xea\xdd\xed\x72\x71\xfd\xfe\x06\x3e\x2c\xbe\xc0\xac\x29\x88\xb9\x53\x72\xcb\xc5\xbb\xc5\x72\x71\x73\xb5\xb8\x33\x75\x0c\x33\x53\xc2\x26\x10\x3e\x55\x3a\x36\x65\x68\x7a\xb4\xd9\xd1\xeb\x55\xe8\x6d\x4b\x56\x7b\x29\x18\xfd\xbd\x40\xa0\x2c\xc6\xaf\xa5\x97\x75\x70\xc3\xa2\x7c\xc3\x59\x6d\xb2\x7e\x3f\xc8\xa9\x5a\x87\x87\x51\xbd\xee\x36\xb4\x9c\x27\x18\x8a\x62\xf5\x1b\x46\x72\x8f\x5e\x6f\xb3\xbd\x56\xab\xb7\x6d\xe8\x74\xfa\x98\xc5\x6f\x51\xa0\x94\x94\x6d\x3c\x7d\x5c\xf3\xca\x6d\x86\xfb\x9e\x59\xf1\xbc\xea\x81\x95\x01\x9d\xd3\x52\xc6\xda\x63\x2d\x2a\x84\xe4\x69\xdf\xd1\x55\xe3\xe2\xcc\x73\xf8\xe1\x6e\x30\xe2\x71\xeb\xde\x89\xd1\x41\x25\x3b\x13\xec\x40\x1e\x37\x2d\xa7\x1d\xf3\xd2\x59\xad\xa8\x97\x31\x08\x9c\x13\xce\xbd\x3d\xcb\x96\x61\x08\xfd\xad\xc4\x11\xd5\xdb\xba\x9c\x8a\xb5\x5b\x49\x27\x55\x4a\x9d\x5e\x43\x9b\xd4\x49\x09\x23\x1b\x9c\x06\xd0\x2a\x19\x2b\x95\xf8\x33\xc3\x7c\x90\xe2\x89\xe2\x73\x97\xc0\x9b\x7a\x55\xce\x69\x73\x6c\x8c\xd3\x8f\x9f\x34\xe9\x2e\xfc\xd4\x9a\x69\x07\xce\xe3\x16\xc8\x1a\x06\x33\x63\xa4\xf7\x21\xb1\x03\xe6\x32\x54\x5e\xd6\x2d\xe3\x18\x5e\x71\xaa\xfb\xe0\xd2\x4f\x4f\xe1\x7a\x0d\x19\xcf\x8a\x44\x79\x28\x80\x77\x1f\x40\x72\x20\x20\x32\x8c\xe8\x9a\x46\x90\x63\xc4\xf3\xf8\xac\x44\x18\x11\xcf\x9c\x84\x3a\x58\x84\x4e\x4f\x8d\x66\xab\xa8\xca\xd0\x91\x8c\xac\x68\x42\x25\x45\x51\x1f\xbf\x0f\xd6\xec\x7d\x7c\x22\x04\xdd\xb0\x90\x33\x83\x77\x06\x01\x66\x9d\x18\x6b\x92\x08\x9c\xef\x23\x9d\xc4\xda\x67\x07\x93\xde\xd7\x01\x5f\x06\xb5\x35\x43\x7a\xfd\x38\xd0\x65\x15\x45\xaf\x9e\xf6\x9c\xed\xd5\xf3\x0a\x4d\xdd\x08\xa4\x71\xd0\x98\xe9\xf6\xf6\xa0\x2e\x85\xc0\xc9\xd0\x00\xca\x39\xd0\xce\xab\xc0\xcd\x85\x66\x34\x5c\x9c\x07\x50\x21\x8b\x76\x6f\x0f\xca\x60\xc3\xf4\x0f\x38\x51\xcd\xff\x24\x80\x93\x72\x92\xa8\x5f\x7a\x60\x9c\xc0\x9f\x8a\xed\xd6\x0c\x0f\x75\xe1\x09\xa0\x4c\xa0\x66\x72\xbc\x39\x88\x8e\xcb\x38\xa5\x6c\x6a\xa4\x77\x95\x7c\xb7\x8f\x92\x52\xe2\x67\x8a\xcf\xda\x6c\x23\x52\x5f\xd7\x7a\xa0\x94\xf6\x5e\x8a\xac\xc6\xcf\xce\xb0\x30\x6d\xe8\xd8\xc0\x05\xda\xf7\xed\x4a\x6f\x75\xf3\xf4\xd6\x73\x75\xc9\x76\x56\x19\x2d\xce\xa0\x3b\xae\xbd\x14\x75\x9b\xec\x34\xe8\x00\x44\x11\x3d\x00\x11\xea\x53\xe9\xf7\x33\xf8\xa1\xb4\x41\x28\x0e\xf9\x40\x05\xd0\xb5\x16\x68\x78\x31\x56\x77\x97\x25\x4f\xf0\xac\x92\x7e\x75\x7b\xf9\x71\x71\x77\xb5\xd0\x15\x70\xd6\x24\x79\x2b\x0a\xf5\x97\x79\x77\x2e\x74\x0c\x6f\x57\x76\x4b\x96\x8d\x3a\x7e\x5a\x5e\x7f\xba\x5c\x7e\x29\xab\xda\x38\xcc\xae\x35\xe3\xa1\x21\x0c\xd8\xc8\x55\xfc\xfe\x7e\x51\x35\xb7\xff\xdc\x04\x2d\x6d\xea\xff\x03\xdd\x69\x48\x9b\x86\x6c\x16\x5d\xb7\x08\x74\x39\x85\x26\xae\x55\x09\x38\x2f\x95\xf7\xfb\xd1\x9d\x4b\xba\x0b\xe6\xf5\x02\xb1\x97\x42\x54\xad\xa5\x96\x65\x80\xa7\xd2\x3a\x85\xd6\xda\x19\x35\x63\x77\x90\xbb\x7f\x59\xd4\x40\xae\xc1\x45\x4d\x03\x4d\x06\xd7\x32\x7d\x64\xbd\xd8\xda\x25\x4b\x79\x5c\x24\xbe\xc5\x52\x43\x12\xa3\x88\x72\x9a\xc9\xda\x83\x5d\x49\x9e\x7c\x76\x53\xe4\x65\x80\x44\x4b\xe7\x0b\xed\x81\x9c\x9a\x4a\x55\x91\xa8\x38\x5a\x7b\x0a\x2b\xff\x87\x26\xcb\xb1\x52\x7e\xaf\xa9\xd2\xda\xa9\x58\x51\xee\xef\x03\xf6\x99\x07\x9b\x41\x6f\xc8\x1c\x09\x87\xcf\x95\xfe\x0e\x48\xbf\x61\x18\x11\x89\x1b\x9e\x6f\xff\x2f\xe1\x72\x0e\xbd\xb3\x79\x8b\x8c\x44\xe8\xd5\x30\x54\xf6\x8e\x8a\x23\x05\xd4\x86\xd9\xde\x78\x56\x5b\x14\x7d\x04\x6b\x7d\x72\x4f\xd9\x56\x01\xc6\x37\x7f\xff\x05\xab\x2d\xa8\x7f\xd6\xf2\xcc\x59\x8e\xdc\xa5\x24\x49\x14\xcd\x5b\x45\xf1\xb6\xf3\xfd\x13\xc6\xb4\x48\x07\x08\x3e\x92\xbc\xdc\xd0\x5c\x9c\x2b\x82\x8b\xf3\x0e\xc5\x8f\x85\x21\xd0\x12\x2e\xba\x22\xde\x93\x7c\x43\x98\x2c\x08\xd3\xc6\x6a\x39\x6f\xb4\x1c\xe0\x39\x24\x4a\x41\xee\x59\xd8\x38\x15\xe5\xce\xf6\xaa\xcc\xea\x1b\xf7\xae\x09\x5f\x31\xec\x3d\xe1\x6d\xf1\x83\x73\xde\x64\xd6\x51\xa7\x7d\xcb\x98\x31\x33\xbf\x83\x85\xfc\x32\x7a\x46\xad\x53\x2e\xed\xf1\xcd\x8b\x3c\x42\xe1\x23\xee\x0e\xf1\x0e\x24\x18\x22\x4e\x08\xdb\x14\x64\xd3\x96\xed\x27\x46\xf6\x44\x73\xae\xa1\xa6\xd8\x49\x4c\x45\x98\xe0\x06\x59\xac\x82\x6e\x79\x74\x0c\x0e\xb2\x2f\x76\x54\x84\xe6\x4f\x1f\x6e\x64\xf6\x95\x63\x8f\x0b\x9f\xc3\x9b\x8d\x49\x62\xe0\x74\x4f\x64\x9a\xa8\xd8\x8d\x63\x88\x30\xa5\x49\x42\xc3\xe8\x81\x24\x09\xb2\x0d\x86\x39\x51\x19\xe2\xc9\x74\x92\xa7\x3c\x0f\xa3\x84\x08\x27\x1e\xd5\x7a\xab\x21\x7c\xa0\x32\xcc\x38\x75\xe3\xe0\x23\xec\xe0\xb0\xde\xc3\xc8\x3c\x14\x11\xcf\x5b\x6e\xf6\x49\xfc\x3a\x8e\x90\x32\x39\x8e\xf0\x99\x8a\x71\x84\x11\x67\x23\x09\x1f\xc8\x6e\xc2\x9d\xc0\xe2\x25\xf1\x67\xa5\xd3\x74\x0f\xbf\xc6\x76\x83\xe9\xd7\xeb\xde\xd5\x3c\x9c\xbb\x2d\xf1\x0c\x47\xbf\x55\x0e\xc9\x4e\x93\x3c\xc3\x76\x84\x31\xaa\x68\xfd\xda\x6d\x8a\x5d\xca\x1d\x9c\xed\x01\xe5\xe5\x9f\x52\xbd\x01\x01\xce\xdc\x0f\x5d\x9f\x06\x9d\x81\x39\x4e\x74\xa8\x47\xc1\x18\xf9\xda\x60\xa0\x2c\x4a\x8a\x18\x2b\x02\xaf\x3a\x67\xac\x57\x3d\xde\x9d\xeb\xd5\xdb\x31\x97\xf6\x9a\x76\xff\x99\x3e\xbc\x16\xd3\xcf\x91\x07\xf9\xbf\xc5\xc6\x95\x75\xa3\x01\x6c\xed\xa5\xe3\x60\xd7\x7f\x02\x00\x00\xff\xff\xd9\xc9\x01\x12\xbd\x25\x00\x00")

func _0000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_initUpSql,
		"0000001_init.up.sql",
	)
}

func _0000001_initUpSql() (*asset, error) {
	bytes, err := _0000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_init.up.sql", size: 9661, mode: os.FileMode(0644), modTime: time.Unix(1649022925, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0xdc, 0x68, 0x5, 0xcf, 0xd3, 0x21, 0x62, 0x84, 0xe7, 0x85, 0x64, 0x3f, 0xa7, 0x4a, 0x9, 0x7c, 0xd6, 0xbf, 0x6d, 0x8a, 0x58, 0xb3, 0x51, 0x6d, 0x1d, 0xb8, 0x47, 0x9, 0x47, 0x52, 0xb5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000001_init.down.sql": _0000001_initDownSql,
	"0000001_init.up.sql":   _0000001_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000001_init.down.sql": {_0000001_initDownSql, map[string]*bintree{}},
	"0000001_init.up.sql": {_0000001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
