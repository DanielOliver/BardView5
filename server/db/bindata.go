// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000001_init.down.sql (0)
// ../migrations/0000001_init.up.sql (9.927kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_initDownSql,
		"0000001_init.down.sql",
	)
}

func _0000001_initDownSql() (*asset, error) {
	bytes, err := _0000001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x6f\xdb\x36\x14\xbf\x07\xc8\x77\x78\xc8\xc5\x36\xa0\x04\x49\x87\x9e\x76\x0a\x32\xb7\x0b\xda\x26\x83\x93\x15\x28\x86\x41\xa0\xa5\x67\x87\x8b\x44\x6a\x22\x95\xd4\x1d\xf6\xd1\x76\xd9\x27\x1b\x48\xfd\x23\x25\x52\x96\x03\x3b\x3d\x4c\x97\xd6\xd2\xfb\xc7\xf7\xf7\xc7\x97\x28\x47\x22\x11\x24\x59\x26\x08\x27\x11\x4f\x53\xce\x42\x12\x45\x28\xc4\xc9\xf1\xd1\xf4\xf8\x08\x00\x80\x91\x14\xa1\x7c\x24\x7e\x95\xe5\x4b\xf5\x44\x9c\x09\x99\x13\xca\x24\x58\xac\x61\xf6\x08\x59\x4e\x53\x92\x6f\xe0\x11\x37\x41\xc9\x51\xea\x8a\x43\x22\x41\xd2\x14\x85\x24\x69\x06\xcf\x54\x3e\xf0\xa2\x7c\x03\xdf\x38\x43\x88\x71\x45\x8a\x44\xc2\x94\xf1\xe7\xe9\x0c\x88\xf9\x6d\x52\xc8\x68\x32\x03\xc6\x25\xb0\x22\x49\x8e\x8f\x66\x3f\x1e\x1f\x1d\x1f\x5d\xdf\xdc\xcd\x17\xf7\x70\x7d\x73\x7f\x6b\x1b\x02\x53\x65\xfb\xec\xf8\xe8\xf3\xe5\xc7\x5f\xe7\x77\x30\x9d\x64\x39\x7d\x22\x12\x27\xb3\xa0\x39\xc6\x74\x42\xd8\xa6\x10\x98\xdb\x2f\xb3\x62\x99\xd0\x68\x52\x6a\xb0\xfd\xa4\x88\x5b\xf7\xa8\x5f\x21\x8d\x6b\xa7\x2c\xe9\x9a\x32\xb7\x93\x34\x65\xf6\xd8\x7e\x53\x4f\xdf\x51\x45\xd1\x4a\xeb\xff\xb4\x9e\xda\x13\x1d\x17\x2f\x37\x86\x29\x1e\xce\x3e\x17\x29\x49\x87\x82\xd3\x3c\x3b\x44\xa9\xd2\xf2\x84\xb9\xa0\x9c\xd9\x6e\x1a\x3e\x55\xab\xe5\xbc\x0e\x0d\xae\x56\x18\x49\xfa\x84\x61\xac\x03\x72\x18\x5b\x91\xc5\xa5\x7c\xd8\xea\x11\x83\x8b\x8a\x90\x68\xdb\xaa\x13\x72\x9e\x20\x61\x23\x4f\x28\xf3\x02\xeb\x43\xda\x39\xac\x8b\x6e\x64\x02\x60\x4a\x68\xd2\x7e\xdd\x81\xd3\x28\xf2\x1d\x39\x75\x56\x4b\xb2\x16\x2d\xe7\x6f\xbf\x8f\xe2\x14\x1b\x21\x31\x6d\x78\x47\x72\x96\xbc\x57\xb7\x37\x77\xf7\x8b\xcb\xeb\x9b\x7b\x58\x3d\x86\xda\x86\x2a\x8f\x97\x9b\xb6\xc0\xde\xdd\x2e\xe6\xd7\xef\x6f\xe0\xc3\xfc\x0b\x4c\xdb\xea\x98\xd9\x25\xb8\x98\xbf\x9b\x2f\xe6\x37\x57\xf3\xbb\xaa\xb6\x61\x5a\x15\x75\x1d\x11\x97\x36\x1d\xa4\x32\x46\x3e\x85\x66\x1c\xfd\x3a\xdd\x2d\xcb\x6a\x3c\x05\xa3\x7f\x16\x08\x94\xc5\xf8\xb5\x74\xb8\x8e\x74\x58\x94\x6f\x38\x6b\x0c\xd7\xef\xb7\xf0\xaa\x8e\xe2\x60\x55\xaf\x5d\xed\x2e\xe7\x09\x86\xa2\x58\xfe\x81\x91\xdc\x6d\x2a\x98\x9c\xdf\x73\x28\x98\x76\xf4\x67\x42\xcc\xe2\xb7\x18\x0a\x94\x92\xb2\xb5\xb3\xe1\x6b\x7e\xb9\xc9\xf0\x05\xc7\x57\x6c\xdf\xfd\xec\xca\x88\xfe\xc1\x29\x63\xbd\x59\x18\x15\x42\xf2\xd4\xef\x05\xd5\xe1\x38\x73\xfa\x61\xb8\x6b\x8c\x78\x3a\xed\xc1\x8a\xda\x7e\x45\x5b\x23\x6f\x4f\xce\x6f\x5a\x53\x37\x03\x4a\x97\x75\x72\xa0\x8c\x46\x60\x1d\x72\xe6\xe9\x6e\xa6\x94\x8a\xd4\xd3\x71\x2c\x69\xfe\x26\x67\x55\x74\xa7\xe3\xf4\x72\xa7\x54\xec\xb4\xd7\xc8\xa5\x94\x30\xb2\xc6\x49\x00\xdd\x72\x32\x93\x8b\x3f\x33\xcc\xb7\xd0\x3c\x51\x7c\x76\x90\x78\xf2\xb1\x4d\x44\x6d\x98\x89\x94\x06\x80\x98\xa6\xdd\x0e\xc4\x3a\x33\x71\xdf\xf9\xdd\x41\x6b\xc3\x98\x68\x8c\x78\x2f\xa4\xdb\x67\x8e\x43\xed\x6b\xdd\x53\x0e\xe2\x18\xab\xf0\xf7\x2f\xfe\xf4\x14\xae\x57\x90\xf1\xac\x48\x94\x93\x02\x78\xf7\x01\x24\x07\x02\x22\xc3\x88\xae\x68\x04\x39\x46\x3c\x8f\xcf\x2a\x94\x12\xf1\xcc\xca\xac\xfd\x85\xe9\xf4\xb4\xd2\x6d\x14\x5a\x15\x40\x92\x91\x25\x4d\xa8\xa4\x28\x1a\x17\xf8\xc0\xd1\xee\x2e\x20\x42\xd0\x35\x0b\x39\xab\x40\xd3\x20\x58\x6d\xf2\x63\x45\x12\x81\xb3\x9d\xc4\x93\x58\xfb\x6d\x7f\xe2\xbd\xfd\xf1\xd5\xd0\x5f\x3b\xd5\x57\x8f\x43\x6d\x58\x91\xf8\x55\x75\xc7\xb2\x5f\xd5\xf7\x6a\xfc\x95\x50\x1a\x07\xad\xb1\x76\xff\x0f\x9a\xda\x08\xac\x84\x0d\xa0\x9c\x15\xdd\x2c\x0b\xec\xc4\x30\xc6\xc7\xc5\x79\x00\x35\x1c\xe9\xf5\xfe\xa0\x8c\x3d\x4c\xfe\x82\x13\x35\x1d\x4e\x02\x38\x29\xc7\x8d\xfa\x9f\x9e\x29\x27\xf0\xb7\xe2\xbb\xad\xe6\x8b\xba\x4c\x05\x50\xe6\x93\x31\x5b\xde\xec\x47\xcb\x65\x9c\x52\x36\xa9\xe4\x3b\xd4\xfc\xb0\x93\x9a\x52\xe6\x67\x8a\xcf\xda\xf4\x4a\xa8\xbe\x0e\x7a\x31\x98\xf6\x62\x8a\xcc\x80\xe3\xd6\x30\xa9\x3a\xd4\xe1\x01\x0f\x74\x2f\xf6\xb5\xe6\xfa\x7e\xeb\x2c\xf4\xe6\x36\x6f\xad\x4e\x3a\xac\x81\x63\xac\xbb\x49\x9a\x2e\xda\xeb\xe0\x01\x88\x22\x7a\x00\x22\xd4\xa7\x32\x00\x67\xf0\x53\x69\x86\x50\x1c\xf2\x81\x0a\xa0\x2b\x2d\xb1\xe2\xc5\x58\xdd\x89\x16\x3c\xc1\xb3\x46\xfc\xd5\xed\xe5\xc7\xf9\xdd\xd5\x5c\x57\xc4\x59\x9b\xf4\x9d\x68\x34\x5f\x66\x8e\xc9\xd1\xb7\xbd\x57\xf1\x1d\x71\x16\x42\xf9\x65\x71\xfd\xe9\x72\xf1\xa5\xac\xf6\xca\x6f\x66\xfd\x55\x7e\x1a\x86\x90\xad\x68\x25\xc1\xd3\x4a\xea\xe6\xb7\x87\x2e\x69\x28\x54\xbf\x87\x7a\xd7\xa0\x42\x8d\xf4\x4c\x42\x57\x69\x58\x75\xd6\x16\x86\xf5\x5a\x05\x63\x00\x17\xda\xb4\xdb\x01\xa2\x17\xc1\xbd\x1e\x14\xeb\xac\xd5\x0c\x13\x1c\x25\xd8\xaf\xc0\xce\xce\xaa\x9d\xd4\x83\xec\x03\xcb\xaa\x16\xac\x0d\xaf\x89\x5a\x44\x33\xbc\x14\xf2\xd2\x79\xc1\x79\x87\x2e\xe5\x71\x91\xb8\x56\x5b\x06\x4d\x8c\x22\xca\x69\x26\x1b\x47\x3a\x64\xb9\x92\xdc\xce\x97\x57\x43\x20\x1d\xb5\xaf\xb9\x88\xb2\x6a\x2d\x55\x95\xa3\xa2\x6a\x6d\x46\x8c\xa2\x18\x9c\x43\x07\xab\x83\xdd\x66\x50\x67\x91\x63\x04\x7d\xa0\x45\x98\x27\xdf\xd2\x27\xfc\x01\xb4\x84\x1c\x22\x79\x06\xfb\x24\xfd\x86\x61\x44\x24\xae\x79\xbe\xf9\x7f\x05\xcf\x3a\xfa\x88\x2e\x2f\x32\x12\xa1\x53\xc9\x70\x5b\xb0\xd4\x1c\x32\xbe\x26\x72\x77\x86\xb7\x5e\xde\xe8\x93\x98\x5b\x9b\x7b\xca\x36\x0a\x7e\xbe\xf9\xf7\x1f\x58\x6e\x40\xfd\xb3\x92\x67\xf6\x42\xe6\x2e\x25\x49\xa2\x88\xde\x2a\x92\xb7\x7d\x82\x4f\x18\xd3\x22\x1d\xa2\xf8\x48\xf2\x72\x37\x74\x71\xae\x28\x2e\xce\xfb\x24\x3f\x17\x15\x85\x96\x71\xe1\x10\xf2\x9e\xe4\x6b\xc2\x64\x41\x98\xb6\x58\x4b\x7a\xa3\x25\x01\xcf\x21\x51\x2a\x72\xe7\x9e\xc8\xaa\xb6\x2e\x30\xa8\x8b\xb0\xb9\xdf\x6f\x85\x07\x35\xc7\x0b\xe0\x81\xa9\x61\x18\x24\x54\xe9\x76\x58\xa8\xd0\x31\x67\x14\x60\xe8\xc1\x29\xb7\x10\xdf\x90\xb6\xca\xa8\x37\xfa\x79\x91\x47\x28\x5c\xd4\x0e\x00\xd0\x03\x14\x83\xd4\x09\x61\xeb\x82\xac\xbb\xd2\x3d\xd4\xc8\x9e\x68\xce\x35\x72\x15\xdb\xa9\xa9\x08\x13\x5c\x23\x8b\x55\xf8\x0d\xc7\x8e\x81\x52\xd6\xed\x91\x8a\xb0\xfa\x6b\x8d\x1d\xa1\x9d\x05\x99\xa3\xc5\xe5\x77\x63\x55\x93\x54\x08\xdd\x13\x21\x23\x3a\x66\x4b\x19\xa4\x4c\x69\x92\xd0\x30\x7a\x20\x49\x82\x6c\x8d\x61\x4e\x54\xb2\xb8\xf2\x9e\xe4\x29\xcf\xc3\x28\x21\xc2\x8a\x4b\xbd\x5e\x33\x28\x1f\xa8\x0c\x33\x4e\xed\x78\x38\x29\x7b\x60\xce\x7f\x22\x99\x87\x22\xe2\x79\xc7\xdd\x4e\x99\x5f\x47\x52\x52\x26\x47\x52\x3e\x53\x31\x92\x32\xe2\x6c\x2c\xe5\x03\x19\x41\xb9\x1d\x92\xbc\x32\x94\xad\xd5\x56\x6d\xc5\xa3\xb4\xdb\x7a\x06\x54\xdb\x77\x41\x07\xeb\x08\x63\x1c\x83\xd4\x63\x98\x45\xb3\xdd\x2a\xc7\x68\x1e\x63\x8f\xaa\x65\x8f\x01\x26\xc9\x56\xfd\x16\x6a\x77\xa3\xfc\xf2\x4f\xc3\xce\xd8\x00\x67\xf6\x87\xbe\x73\x83\xde\x68\x1d\x2b\x3c\xd4\xf3\x62\x8c\x06\x6d\x35\x50\x16\x25\x45\x8c\x35\x81\x47\xa1\x05\x03\xea\x39\xd0\xc5\x01\xf5\xfb\x51\x1b\x82\x86\xf8\x25\x18\x60\xcb\x72\x4e\x3f\x87\x1e\xfc\x2f\x46\xd9\xb5\x7d\x3b\xe0\xe0\xc6\x59\x87\x83\xc0\xff\x05\x00\x00\xff\xff\xb8\x79\xd9\x1a\xc7\x26\x00\x00")

func _0000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_initUpSql,
		"0000001_init.up.sql",
	)
}

func _0000001_initUpSql() (*asset, error) {
	bytes, err := _0000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_init.up.sql", size: 9927, mode: os.FileMode(0666), modTime: time.Unix(1646543089, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0x84, 0xe6, 0x20, 0xfb, 0x75, 0x88, 0xf4, 0xba, 0xa2, 0xef, 0x9f, 0xc6, 0xe7, 0xa2, 0xd, 0x33, 0xc9, 0x3e, 0x82, 0xd3, 0x2a, 0xdf, 0xdc, 0x52, 0xbb, 0x58, 0xef, 0xe3, 0xf1, 0x53, 0x3b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000001_init.down.sql": _0000001_initDownSql,
	"0000001_init.up.sql":   _0000001_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000001_init.down.sql": {_0000001_initDownSql, map[string]*bintree{}},
	"0000001_init.up.sql": {_0000001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
