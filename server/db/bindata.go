// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (2.312kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (4.86kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4f\x8f\x9b\x3e\x10\xbd\xf3\x29\x46\x7b\x01\xa4\x1c\x7e\x97\xdf\xa9\xa7\xd5\x8a\xad\xa2\x56\x44\x4a\xd2\x4a\x55\x55\x21\x03\x93\xd4\x0d\xd8\x14\x8f\x93\xa5\x9f\xbe\xc2\x26\x80\x37\x24\x4b\xa4\x56\xf5\x09\xec\x79\x33\x6f\xfe\xbc\xc9\x6a\x64\x84\x40\x2c\x2d\x10\x1e\x32\x59\x96\x52\x24\x2c\xcb\x50\xa9\x07\x2f\xf0\x00\x00\x04\x2b\x11\xec\x21\x7c\x21\xaf\xfb\x86\x4c\x0a\x45\x35\xe3\x82\xc0\xc1\x25\xd5\x01\xaa\x9a\x97\xac\x6e\xe0\x80\xcd\xc2\x00\x6c\x9c\x3c\x61\x04\xc4\x4b\x54\xc4\xca\x0a\x4e\x9c\xbe\x4b\x6d\x6f\xe0\x97\x14\x08\x39\xee\x98\x2e\x08\x02\x21\x4f\x41\x08\x6c\xfc\xe6\x6b\xca\xfc\x10\x84\x24\x10\xba\x28\xbc\xf0\x9d\xe7\xb9\xf4\xb5\xc2\xfa\xcc\xba\xfd\x4e\x78\x7e\x26\x9b\xf2\x3d\x17\x93\xdc\x8d\x61\x75\xe8\x9f\xda\x73\x41\x5f\xeb\xc1\xd5\xe5\xaf\x73\xce\xfc\xdc\xbc\xd3\x66\x44\xe3\x0a\xf0\x02\xc4\xac\xe5\xad\x82\xf5\xe7\x8e\xca\xd9\x20\x47\xac\x15\x97\xc2\x2d\xd0\xed\x94\x86\x20\xff\x85\xd6\x09\xee\x76\x98\x11\x3f\x62\x92\x9b\x3e\xfc\x15\xa6\x28\x72\xeb\x1e\xde\x2c\xc7\x00\xe2\x2a\x61\x86\x59\x97\x9e\x94\x05\x32\x31\x33\x3d\xaa\x35\x76\x19\x3a\xa3\x6d\x15\x30\xaf\xf3\x58\x32\x5e\x0c\x8f\xf3\x81\x23\xbd\xdd\x07\x34\x93\x4c\x6c\xaf\x06\xe0\xd7\x6f\x73\x80\xaa\x51\x84\x65\x0f\x9d\x07\x34\xc8\xa7\x55\xbc\xd9\xae\x1f\x97\xf1\x16\x76\x87\xc4\x10\xe8\x86\x37\x6d\x7a\x45\x3d\xaf\xd6\xd1\xf2\x7d\x0c\x1f\xa2\x2f\x10\x0c\x82\x08\x1d\xc9\xad\xa3\xe7\x68\x1d\xc5\x4f\xd1\xa6\xd3\x31\x04\x9d\x84\xbb\x46\x4c\x85\x32\xbd\xb1\xad\xb9\x12\x6d\xdc\xbd\xab\x01\xdd\x1e\x07\x6d\x03\xc2\xf1\x7a\xd1\x82\xff\xd4\x08\x5c\xe4\xf8\x62\xab\x6c\x9a\x9b\x68\x7b\x23\x45\x4f\xd9\xdc\xdf\x44\xb6\xab\x63\x02\xd8\x5e\x5f\x2e\xb4\x5a\x16\x98\x28\x9d\xfe\xc0\x8c\xee\x58\xc7\x63\xd8\xbf\xdb\xc6\x86\x45\xab\x41\x29\x26\xb8\xbf\xc1\xde\xe2\x26\xc9\x8f\xb3\xbb\xa9\x8e\x19\x67\x7a\x59\x9b\xbd\xfb\x87\x0a\x33\x29\x94\x71\x8a\x5d\x26\xd3\xf3\x3b\xce\xf5\xba\x5e\x9c\x31\x19\xcf\xef\x32\xde\x44\xeb\x2d\x2c\xe3\xed\xca\x2d\x5b\x67\xf3\xf9\xf1\xe3\xa7\x68\x03\x81\x9f\x8b\xfc\x7f\x54\x48\xc4\xc5\xde\x9f\x44\x5a\xb6\x16\xb8\x00\x97\x57\xef\xa6\x64\x82\xed\xd1\x5f\xc0\x2b\x87\x8b\x33\xf5\xc0\x97\x27\x81\xf5\x4d\x8b\x23\xc7\xd3\xa5\xc1\x2b\x4e\x93\x92\xed\x79\x54\x35\x3f\x32\x42\xc7\x2d\x13\x4d\xab\x35\xe7\xae\xd2\x69\xc1\xb3\xd6\xf9\xef\x00\x00\x00\xff\xff\xa2\x24\x83\x03\x08\x09\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 2312, mode: os.FileMode(0644), modTime: time.Unix(1645460815, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0xd, 0xb6, 0x46, 0x5f, 0x5a, 0xcd, 0xf6, 0xe1, 0xa4, 0x44, 0x3a, 0xd6, 0x16, 0xad, 0x51, 0x51, 0xc3, 0xcb, 0xf7, 0x1b, 0x83, 0x54, 0x69, 0xe9, 0xed, 0x6f, 0x9e, 0x5b, 0x23, 0xef, 0x4}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\xc1\x6e\xf3\x36\x0c\xbe\xfb\x29\x88\x5c\x6c\x03\xc1\xd0\xfe\x40\x4f\x3b\x15\x3f\xfc\x77\xc1\xda\x74\x48\xb2\x01\xc5\x30\x18\x8a\xcd\xba\x42\x65\x39\xb0\xe5\xb6\xee\xbb\xed\xb2\x27\x1b\xe4\xc8\x89\x14\x4b\x76\x52\x34\xdd\x61\xba\x04\xb0\xbe\x90\x14\xf9\xf1\x23\x93\x12\x89\x40\x10\x64\xcd\x10\x26\x29\x4f\xaf\x30\xae\x50\x08\xca\xb3\x89\x17\x78\x00\x00\xc6\xc7\x98\xa6\xd0\x9e\x35\xcd\x28\x17\x1e\xa8\x93\x14\xbc\x12\x25\xa1\x5c\x1c\xe0\x37\xcf\x3b\x8c\x3c\x9b\x92\xe6\xa4\x6c\xe0\x19\x9b\x69\x7b\xb1\x0d\x20\x8d\xd7\xcd\x1e\xb4\xb5\x0d\xc0\x6b\xc6\x4c\x14\x11\x7b\x94\xa0\x39\x56\x82\xe4\x1b\x78\xa5\xe2\xa9\xa8\x45\xfb\x05\xde\x0b\x8e\x90\xe2\x23\xa9\x99\x80\x80\x17\xaf\x41\x08\x44\xbf\xf3\x6b\x91\xf8\x21\xf0\x42\x68\x0e\x5e\xb0\xac\x68\xc1\xf5\x50\xf7\x61\x28\xa4\x7e\xb7\x73\x70\x11\x6e\x0d\xd0\x2a\x26\x89\xa0\x2f\xa8\x1b\x28\x0a\x86\x84\x0f\x1b\x10\x65\x8d\xca\x46\x52\xe4\x79\xc1\x63\x92\x24\x58\x55\xdd\x2b\xf1\xad\x7d\xb3\x19\x6e\x5d\x61\x19\x0b\x92\x55\x9a\x45\x89\xfc\xf3\xaf\x43\x64\xd5\x54\x02\x73\x13\x6b\x47\x72\x92\x23\x1c\x1c\xbb\xf7\xbc\x48\x6b\x86\x0e\xe4\x0e\x95\x62\x95\x94\x74\x23\xf4\xb4\xf6\xed\xb5\xd0\xef\xf7\xf3\xe5\x6a\x71\x3d\x9b\xaf\xe0\xf1\x39\x36\x09\xa4\x4a\xbf\x6e\x76\x3c\xfa\x71\xbf\x88\x66\x37\x73\xf8\x35\x7a\x80\x60\xcf\x9f\xd0\x20\xda\x22\xfa\x11\x2d\xa2\xf9\xf7\x68\x09\x13\x99\xad\x09\x04\x6d\xd2\x68\xaa\x92\x3d\xe8\xb3\x2d\xc4\xb6\x0e\x0e\xb7\x7a\xa9\x9c\x9e\xcd\x82\x06\x32\xc3\xa1\xe7\x85\x3f\x7b\xde\x40\xdf\xc5\xa4\xaa\x68\xc6\x73\xe4\xa2\x6b\xc1\x83\x26\x51\xc4\x74\xb6\xc7\x39\x3b\xa3\xf3\x6d\xa1\x74\xbf\x29\x54\xc6\x1d\xff\x9d\xda\xe5\xc5\x8a\x2a\x0b\x86\x6d\x83\x6d\x23\x51\x3c\x72\xd3\xc8\x95\x51\x5d\x8f\x7e\x5b\xcc\xee\xae\x17\x0f\xdb\x82\xaa\x50\xa7\xbd\x78\xc2\x23\x38\xaa\xd9\x97\x76\xec\x94\xe9\xe8\xf7\x79\x34\xd5\xdc\xaa\x4f\x76\xcf\xbd\x27\x39\x43\x30\x07\x80\xe5\x9f\x27\x05\xa5\x15\xcd\x1e\x98\x06\x70\xc7\xa4\x81\x26\x5d\x0f\xc9\x16\xb2\xf6\x50\x2e\xe7\x90\xd4\xc6\x66\x83\x96\xee\x19\xea\x9c\x73\x75\xcd\x49\x1d\xa3\x89\xf0\x01\xc7\xdd\xa3\x56\x7f\xf3\xe0\xbc\x75\xd6\xce\xb0\xf0\xf9\x82\xeb\x56\x3c\xfa\x8e\x71\x42\x04\x66\x45\xd9\xfc\x5f\xca\x65\x3c\x7a\x74\x3f\xaa\x36\x24\x41\xab\x87\x21\x5d\x32\x5c\x7c\x61\x41\x15\x91\x64\x29\x35\x71\xef\xe8\xb5\x9b\x04\x63\xcb\x63\xf7\x87\x8f\x2c\x8f\x47\xcc\xc7\xee\x9c\x7d\x83\x3c\x95\x4e\xf6\x55\xdb\xf6\x22\xdb\xb2\x66\xa3\x08\x38\x96\xc5\xfd\x16\x38\xbe\x2e\xba\xb0\xba\x6a\x8c\xc5\x40\x98\x1a\x0a\x47\xc4\x6b\xb0\x77\x04\x9b\x53\xc6\x68\x9c\x3c\x11\xc6\x90\x67\x18\x97\x44\xa6\xce\xbe\x43\x30\xc2\xb3\x9a\x64\x78\x4c\x1e\x6c\xcb\xab\xb5\x05\x47\x35\xf5\x2b\xf7\xd7\xce\xe7\x7f\xbf\x0d\x74\x91\x58\xf4\xc8\x1e\x95\x01\x19\x0d\xc9\x98\x1b\x6a\x29\x18\x0f\x46\x12\xd5\xee\x5d\x47\x8c\x39\x37\x56\x0c\x7d\x21\x51\x82\x48\x79\x8a\x6f\x60\x2d\x08\x14\xdc\xbc\xe8\xe7\x74\xda\xd3\xcc\xe3\x4c\xc7\xad\x22\x1c\x63\xbf\x0d\x18\x28\x4f\x58\x9d\x62\x07\xb0\xba\x33\xa4\xbd\xeb\x9e\x03\x6d\xef\x3e\xef\x37\x77\xb7\xac\xef\xb0\xa7\xeb\xfa\x11\x92\x7e\x66\x35\xff\xe8\x5e\xe0\x54\x0e\x17\x5b\x77\x59\x3a\xd3\xdc\x9e\xcd\x97\xd1\x62\x05\xb3\xf9\xea\x7e\xa8\x9f\xa6\xdb\xd5\x23\xf4\xfe\xb8\xbe\xfd\x3d\x5a\x42\xe0\xaf\x28\x6f\xfc\x29\xf8\xdf\xfe\xf9\x1b\xd6\x0d\xc8\x9f\x47\xf1\x93\xaf\x9e\x0c\x00\x81\xbf\xcc\x09\x63\x12\x73\x25\x11\x57\xbd\xfb\x3b\x4c\x69\x9d\x0f\x00\x6e\x49\x99\xa1\xbc\xbf\xbc\x90\x80\xcb\x8b\x1e\xe2\x97\x5a\x01\x5a\x0b\x97\x7d\x13\x37\xa4\xcc\x08\x17\x35\xe1\x6d\xb0\xad\x9d\x6f\xad\x1d\x28\x4a\x60\xd2\x41\xe9\xcb\x44\xfc\x1b\x00\x00\xff\xff\x9c\xb2\x0e\xfa\xfc\x12\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 4860, mode: os.FileMode(0644), modTime: time.Unix(1645460815, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0x36, 0x5d, 0xc9, 0x24, 0x88, 0x79, 0x80, 0x3e, 0xd, 0xf8, 0x5d, 0xfc, 0x29, 0xd6, 0xc7, 0xf7, 0x1f, 0x4a, 0x32, 0x9d, 0x20, 0x47, 0x2, 0x4, 0x69, 0xb5, 0x4a, 0xa6, 0x3c, 0x30, 0xbb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
