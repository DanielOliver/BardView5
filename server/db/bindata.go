// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0_init.down.sql (0)
// ../migrations/0_init.up.sql (8.134kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_initDownSql,
		"0_init.down.sql",
	)
}

func _0_initDownSql() (*asset, error) {
	bytes, err := _0_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x8f\x9b\x46\x10\xfe\x6e\xc9\xff\x61\x64\x45\x02\x2a\x22\x35\xa7\x4a\x51\x1d\xe5\x24\xcb\xe5\xae\x56\xaf\xb8\xc5\xbe\xbe\xa8\xaa\xd0\x1a\xc6\x3e\x62\x58\x7c\xec\x92\x8b\x9b\xe4\xbf\x57\xcb\xf2\xb2\xe0\x60\xfb\xae\xd8\xad\xaa\xe3\x9b\xd9\xdd\x79\x9f\xe7\x19\xd6\x5e\x82\x84\x23\x70\xb2\x08\x11\x06\x29\xc3\x64\xd0\xef\xe9\xfd\x1e\x00\x80\xf8\xe5\x06\x3e\xe4\xcf\x22\x58\x05\x94\xcb\x25\xf1\x78\x31\x65\x3c\x21\x01\xe5\x72\xe7\x66\x5d\xad\x89\x67\x93\x04\x11\x49\xb6\xb0\xc6\xad\x99\x0b\x4c\x2b\x69\xbb\x3f\x1f\xfb\xd0\x98\x03\x4d\xc3\x30\x17\x2e\x3d\xf1\xdd\xc5\x56\xb1\xf6\xe9\xc2\x77\x05\x13\x29\x8d\x07\x11\x32\x4e\xa2\x0d\x3c\x04\xfc\x2e\x4e\x79\xf6\x06\xfe\x8a\x29\x82\x8f\x4b\x92\x86\x1c\x74\x1a\x3f\xe8\x06\x10\x75\x4d\x4b\xb9\xa7\x19\x4d\xab\x71\xb9\x44\x8f\x07\xef\xd1\xf5\xb3\x3c\x74\x2b\x9c\xfa\x52\x2c\x1c\xb4\xfc\x71\x21\x09\x98\x4b\x32\xab\xe5\xca\x22\x8e\x43\x24\xf4\xc9\xb1\xce\xad\xae\x3c\xe4\x49\x8a\x46\x11\xfe\x38\x8a\x62\xea\x12\xcf\x43\xc6\x00\x38\x7e\x78\x7a\x56\x77\x8a\x06\x23\x12\x84\xd5\x6a\xb7\xc2\x29\x89\xd4\xc0\x76\x2b\x9c\x93\x15\x6b\x08\xff\xe3\xcf\x2e\x84\x4b\xf1\xe3\xa9\x3d\x9b\x3b\xa3\x89\x3d\x87\xe5\xda\xcd\xfa\x3b\xef\x83\xc5\xb6\x6a\xf3\xab\xa9\x63\x4d\xae\x6d\xf8\xc1\xfa\x1d\xf4\xaa\x01\x8d\x3a\x10\x38\xd6\x95\xe5\x58\xf6\xd8\x9a\xe5\x08\x03\x7a\x0e\x2d\x46\xbf\x67\xbc\x11\x2a\x73\x18\x4a\x69\x70\x9f\x22\x04\xd4\xc7\x0f\x12\x54\xb2\x04\xb9\xa9\x7c\x13\xd3\x52\x40\xf6\xbe\x76\x36\x87\xb0\x24\x0e\xd1\xe5\xdb\x0d\x56\x38\x56\xbe\x72\xbf\x80\x37\x7b\x50\xad\x3a\x77\x18\xda\x1a\x20\x51\x7f\xba\xed\xea\x46\x59\x35\x54\x75\x5a\x64\x51\x1a\xf2\x60\x13\xa2\x4b\x18\x0b\x56\x34\x42\xca\x99\x4b\xc2\x30\x7e\x40\xbf\xab\xae\xcf\x55\xb1\x2d\xe3\x18\xb9\x11\xa1\x64\x85\xcd\x34\x75\xa4\x6a\x5f\xb5\x89\x64\x67\xb9\x16\xe1\x55\x0b\xae\x2a\x28\xd0\xc5\x5a\x5b\xd1\x35\xea\xed\x28\xde\xcc\x76\x1e\x5f\x5c\xcf\xd4\xf6\xff\xa2\xb6\x93\x12\x44\x03\xf5\x64\xd1\xfc\x1b\xe4\x91\x19\x52\xb4\x57\x0b\x77\xa8\xc6\xb6\xb3\x47\xb9\xab\x71\xc0\x6c\x55\x7b\x06\xce\x52\x79\xa7\x82\xc9\x06\x1a\x54\x0b\x22\x1b\x87\x10\x41\xd9\xfd\x68\x70\x80\x53\x02\x04\x9c\x1a\x24\x4e\xa0\xa0\x0e\x14\x87\x14\x3c\x2e\x3c\x0d\xb0\x80\x53\x03\x46\x83\x59\xa0\x83\x5c\xd7\xa3\xd5\xf8\xe4\xeb\x5e\x41\x03\x79\xe0\x2c\xe8\xa3\xf4\x93\xf8\xb9\x0f\x83\x0e\xc1\x4f\xb5\xad\x15\x74\x14\x6d\x22\x9c\x2d\xda\x2a\x34\x69\xd1\xd6\x84\x9d\x63\xf4\x9d\x1b\xee\x3c\x1e\xc4\xb4\x82\x3a\x85\xcf\x44\x52\xf7\x00\x5c\x76\xd0\xdd\xac\xf7\x4f\xd2\x1d\x21\xc1\x1e\x0f\x58\xba\x78\x87\x1e\x7f\x82\x0b\xf9\xc9\xff\x80\x0f\x1b\x4c\xa2\x80\xb1\x5a\x26\x1a\x0b\xc7\x90\x8e\xb2\xfb\x99\x74\x9e\x49\xe7\x8c\xa4\x23\xd1\xa0\xb6\xa3\xdb\x51\x38\xef\xd5\x93\x2b\x50\xa3\xd4\x61\x3b\xc4\xd4\x0f\x44\x84\x2a\xe2\x7c\xc7\x62\xba\xe8\xcc\xfa\x65\x80\xa1\x5f\x67\xe5\x7f\xca\xc9\xfb\xf9\x58\x81\x9a\x33\xf0\xb1\xa2\x4d\x56\x5a\x8b\x3e\xb9\x78\xe0\xeb\x23\xaf\x55\x79\x13\x70\x8c\xca\xbc\x34\x5a\x74\xe6\xab\x07\x94\x16\xf5\x7b\x40\xeb\xc9\x07\x81\x82\x84\x26\xf6\xcc\x72\xe6\x30\xb1\xe7\xd3\xb6\x6f\x32\x33\x63\x52\x73\xef\x0d\x92\xd9\xb8\xf4\x31\xfa\xbd\x99\x75\x63\x8d\xe7\xf0\xca\x04\xed\x96\x61\x02\x4e\x1c\xa2\x66\xc2\x92\x84\x0c\x4d\x10\xa8\xd4\xef\xfd\xfa\xbd\xe5\x58\x60\x4f\xe7\x60\xfd\x36\x99\xcd\x67\x7a\x71\x08\xae\x9c\xe9\x8f\xb5\x0b\x1b\xb9\x35\xe3\xf4\xb7\xaa\xc4\x33\xb9\x71\xa1\xba\x61\xc2\x75\x18\x2f\x48\xa8\x49\x3f\xba\xf3\xa6\x14\x2c\xbd\x1a\x3b\xd6\x68\x6e\xc1\xd4\x01\xc7\xfa\xe9\x66\x34\xb6\xe0\xea\xd6\x1e\xcf\x27\x53\x1b\x56\x28\x47\x52\x57\x75\x51\x37\xc0\xb1\xe6\xb7\x8e\x3d\x2b\x47\x84\xd1\xac\xdf\x7b\xf1\xa2\x74\x43\xdd\xdd\xef\x35\xcd\x2a\x5c\xd8\x8d\xb2\x14\x22\xaa\xea\x66\x64\x5f\xdf\x8e\xae\x2d\x98\xfd\x7c\xf3\x38\x23\x57\x99\x6b\x27\xb7\xb5\x8c\xe1\x1e\x9b\x5b\xef\xa8\xd3\x34\xf0\xf3\x1b\x43\x79\x54\xb9\xa7\x16\x6b\xb5\xc9\x2d\x4e\x20\xc1\x4d\x48\x3c\x84\x65\x4a\x25\x9a\xac\x90\x62\x42\x38\xba\x6b\x96\x0a\x27\x73\xde\x45\x9e\x26\x94\x81\x77\x47\x12\xfd\xe2\x75\xfe\x36\x24\x74\x95\x92\x15\x02\xbb\x0f\xfb\x3d\xc2\xa4\xc1\x0c\x43\x01\x10\x2c\x5d\x30\x9e\x04\x74\xa5\xd7\xbb\x3a\x93\x96\x29\xd5\x79\xec\x66\x02\xbd\x30\xf6\xd6\x6e\x39\x95\xe8\x86\x09\xda\x76\xbb\xdd\x46\x91\xef\xdf\xdd\x5d\x7c\x23\xf0\x2b\x65\x9a\xb1\x23\x48\x7d\x3e\x7d\x82\x52\x60\x42\xa8\x1f\x47\xba\x01\x5f\xc1\x2b\xfc\xd6\x04\xed\xeb\xe2\x39\x20\x44\x68\x06\xcd\x04\x4d\x33\x4c\xd1\xf9\x17\xaf\x8d\xe1\xb0\x70\xfa\x8d\xf0\xef\x8b\xdd\x5a\x22\x7f\xd1\xa3\xf5\xbe\x15\x1f\x9a\x46\xbf\xf7\xcb\xe8\xe6\xd6\x9a\x81\xfe\xaa\xa5\x15\xf7\x57\x9b\x09\xda\xc7\xcf\x6d\x68\x51\x47\xe5\x4a\x95\x26\xe4\x65\x87\x76\x8e\xd4\xd8\x43\x39\x21\x91\xa3\x4d\x51\xc5\x26\xfa\xee\x5c\x6f\x42\x19\x06\x29\xdd\x2c\xa6\x11\x53\x99\x1c\xea\x91\xd0\xd5\x66\x09\x7c\x05\x69\x8e\x00\x19\x13\x0a\x73\x4d\x90\xae\x8a\x28\x89\x0c\x0f\x72\xa6\x18\x0c\xe1\xa3\xcc\xf8\x20\xde\x0c\x86\x30\xc0\xfb\x41\x4e\x5a\x83\x6c\xd6\x10\xef\x18\x16\x1e\x0c\xc4\xd2\xe7\x7e\xaf\x08\xf4\x9e\x46\xc1\xf7\x24\x4c\x45\xa3\xc8\x7f\x03\xb3\xcc\xe9\xa5\x97\x72\x2c\x32\xa1\x12\x5d\xdc\x7a\x96\xf7\x1a\xf2\x77\xa3\xc1\xf2\xe9\xf9\x88\xfe\x52\x74\xbd\xbc\x04\x2d\xf0\x35\x78\x79\x79\x09\x9a\x30\x0b\x35\x63\x38\xcc\xa7\xbe\xb7\x85\xc2\x5a\xe1\x4f\x1d\xd0\xdb\x24\x64\x71\xd1\x0c\x11\xf3\xca\x7c\xad\x3a\x3e\xb2\xbf\x2b\x9d\x78\xab\x78\x68\x64\xfd\xf1\x77\x00\x00\x00\xff\xff\xeb\xa7\x97\xcc\xc6\x1f\x00\x00")

func _0_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_initUpSql,
		"0_init.up.sql",
	)
}

func _0_initUpSql() (*asset, error) {
	bytes, err := _0_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_init.up.sql", size: 8134, mode: os.FileMode(0666), modTime: time.Unix(1635582728, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0xb5, 0x4f, 0xd1, 0xb0, 0x3, 0xa0, 0x77, 0x4c, 0x2, 0x71, 0xc8, 0xb3, 0xee, 0xe0, 0x8e, 0x57, 0x7b, 0xf5, 0x3e, 0x2, 0x8f, 0xb3, 0x9a, 0xd3, 0x55, 0x44, 0xc0, 0xca, 0xb3, 0xc0, 0x3c}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_init.down.sql": _0_initDownSql,
	"0_init.up.sql":   _0_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0_init.down.sql": {_0_initDownSql, map[string]*bintree{}},
	"0_init.up.sql": {_0_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
