// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (8.638kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.036kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x36\x10\xfe\x6e\xc0\xff\xe1\x60\x14\x90\x34\xa8\x40\x1b\x0c\x28\x96\xa2\x05\x8c\x4c\xc9\x82\x65\xf6\x26\x3b\x7b\xc1\x30\x08\xb4\x44\x3b\x6c\x24\xca\x15\xa9\xa4\x5e\xdb\xff\x3e\x90\xd4\x0b\x25\x4b\xb2\xd4\xd9\xd9\x3e\x94\xdf\x2c\xf2\xf8\xdc\x1d\xef\x9e\x87\x52\xe2\x27\x18\x71\x0c\x1c\xad\x42\x0c\x13\x3f\x8e\xa2\x98\x7a\xc8\xf7\x31\x63\x93\xf1\xc8\x1c\x8f\x00\x00\x28\x8a\x30\xa8\xc1\xf1\x07\xae\x1e\x8a\xe1\xc7\x94\xf1\x04\x11\xca\xa1\x62\xea\x6d\xef\x61\x9b\x90\x08\x25\x3b\xb8\xc7\x3b\x5b\x59\x28\xac\xc0\x43\x1c\x38\x89\x30\xe3\x28\xda\xc2\x23\xe1\x77\x71\xaa\x9e\xc0\xdf\x31\xc5\x10\xe0\x35\x4a\x43\x0e\x26\x8d\x1f\x4d\x0b\x90\x3e\x67\xa4\xdc\x37\x2c\xa0\x31\x07\x9a\x86\xe1\x78\x64\xbd\x1e\x8f\xc6\xa3\x6a\x14\x29\xc3\x49\xe9\xbc\xf8\xe5\x91\x20\x77\x79\x45\x36\x84\x36\x87\x20\x57\x6e\xef\xcb\x39\x31\xf6\xc3\x48\xd3\x72\xb7\xfd\x9f\x95\x91\xfb\x59\x4b\xc0\x6a\xa7\xb9\xd2\x62\xb9\x6f\x85\xd4\xd2\xae\xd4\x15\x63\x40\x0e\x33\x94\x07\x9c\x30\x12\xd3\x6a\x9a\xba\xa3\x2a\x51\x5e\x58\xd9\x2e\x78\xbd\xc6\x3e\x27\x0f\xd8\x0b\xe4\x81\x9c\xc6\x57\x4c\x03\xb5\x3f\x1c\xcc\x88\x66\x45\x98\x87\xa4\x6f\x59\x84\x71\x1c\x62\x44\x7b\x46\xc8\x93\x14\xe7\x41\x56\x4a\x5d\xb5\x44\xcf\x02\xc0\x11\x22\x61\x39\x3b\xc0\x52\x6b\xc1\x81\x96\xb2\xaa\x39\xda\xb0\xd2\xf2\xcf\xbf\x7a\x59\xb2\x1d\xe3\x38\x2a\x6c\x7b\x5a\x2a\xdb\x8b\xf9\x6c\xb1\x74\xa7\xd7\xb3\x25\xac\xef\x3d\xe9\x43\x56\xc7\xab\x5d\xd9\x60\x97\x73\xd7\xb9\xbe\x9a\xc1\x8f\xce\x1f\x60\x96\xdd\x61\x55\x5b\xd0\x75\x2e\x1d\xd7\x99\x5d\x38\x8b\xac\xb7\xc1\xcc\x9a\x3a\x3f\x91\x26\x34\x79\x48\xea\x8c\xda\x00\xf5\x73\x6c\xc7\xac\x1e\xb7\x29\x4e\xc2\xaa\x11\x4f\x4a\xc9\xfb\x14\x03\xa1\x01\xfe\xa0\x12\x2e\x4f\xda\x4b\xd5\x93\x98\x16\x8e\xcb\xe7\x07\x6c\x05\xa3\x34\x98\x8a\xc7\x4d\x74\x97\xc4\x21\xf6\xf8\x6e\x8b\x4b\xce\x2b\x1e\x79\x0d\xdc\xd4\xc1\x80\xa5\xdd\x61\x1a\xac\xd1\x52\x75\x1c\x89\xdf\x9b\x8b\xbf\x06\xd5\xd1\x0a\x3d\x46\x0d\x2a\x4a\x43\x4e\xb6\x21\xf6\x10\x63\x64\x43\x23\x4c\x39\xf3\x50\x18\xc6\x8f\x38\xe8\xa4\x8c\xe1\x50\x59\x7b\x45\x88\xa2\x0d\xae\x1f\xd3\x91\xa0\xba\xea\x54\x1c\xb6\x3c\x6b\x91\x5e\xbd\xde\xca\x82\xca\xaa\xbd\xa5\xe8\x6a\xf5\xd6\x4b\x63\xe5\xca\xfe\xc5\xd5\x43\x29\xfb\x64\xe3\x8b\xc4\xf4\x0b\x74\xa9\xbf\xfa\x9d\x54\xf4\x86\xa5\x64\x80\x2e\xf6\xd9\xb8\x53\x3a\x07\xc8\xd8\x00\x2c\xbb\x91\xf5\x54\xd1\x64\x73\xa5\x00\x16\xc0\x6d\x5a\x36\x0c\xb8\x49\x80\xa4\x23\x79\x7b\xb5\x88\x8f\xee\x6c\xbb\xf6\x14\xab\x6a\x06\x8d\xba\x27\x57\x9c\x42\x65\x9b\xaf\xd9\x12\xae\xa4\xc9\x1a\x1b\x94\x13\xe2\x34\x0e\x31\x82\xb6\x7a\x30\x39\xc0\x29\x09\x02\x4e\x4d\x12\x27\x00\xa8\x12\xc5\x21\x80\x61\xe9\xa9\x91\x05\x9c\x9a\x30\x6a\xca\x02\x47\x38\xeb\x86\xeb\xf1\x29\x01\x6a\xcc\x03\x4f\xc2\x3e\x5a\x3f\x89\x9f\x5d\x1c\x74\x88\x7e\xca\x65\xad\xa4\xa3\xa1\x89\x74\xb6\xa0\x95\x6c\xd2\x82\xd6\xeb\x72\x5f\xc3\x7b\x6a\xba\xf3\x39\x89\xe9\xb0\x2f\x23\x9a\xe1\x7f\xfb\x5d\x44\x3a\xc2\xd2\xd5\x3b\xec\xf3\x2f\x08\x21\xb3\xfc\x1f\xc4\xb0\xc5\x49\x44\x18\xab\x9c\x44\x6d\xa2\x8f\xe8\x68\xab\xbf\x8a\xce\x57\xd1\x79\x42\xd1\x51\x6c\x50\x59\x71\xdc\xab\x70\xd6\xab\x27\x07\xd0\xb3\x74\xc4\x76\x88\x69\x40\x44\x86\x4a\xe1\x7c\xc7\x62\xba\x3a\x9a\xf7\x6b\x82\xc3\xa0\xaa\xca\xff\x56\x93\xbb\xf5\x58\xa3\x9a\x27\xd0\x63\x0d\x4d\x55\x5a\x0b\x9e\x9a\x3c\xf0\xf6\x91\xd5\xaa\xfa\x12\xd0\x07\x32\x2b\x8d\x16\xcc\x6c\xf6\x00\x68\x5e\xbf\x07\x50\x4f\x7e\x11\xc8\x45\xe8\x7a\xb6\x70\xdc\x25\x5c\xcf\x96\xf3\xb6\x77\x32\x5b\x2a\xa9\xdd\xf9\x05\xc9\xae\x7d\xf4\xb1\xc6\xa3\x85\x73\xe3\x5c\x2c\xe1\xa5\x0d\xc6\x2d\xc3\x09\xb8\x71\x88\x0d\x1b\xd6\x28\x64\xd8\x06\xc1\x4a\xe3\xd1\x6f\x3f\x38\xae\x03\xb3\xf9\x12\x9c\xdf\xaf\x17\xcb\x85\x99\x1b\xc1\xa5\x3b\xff\xa9\xf2\xc1\x46\x2d\x95\x9a\xfe\x46\xdf\xf1\x89\xc2\x38\xd3\xc3\xb0\xe1\x2a\x8c\x57\x28\x34\x54\x1c\xc7\x8b\xa6\xd8\x58\x45\x75\xe1\x3a\xd3\xa5\x03\x73\x17\x5c\xe7\xe7\x9b\xe9\x85\x03\x97\xb7\xb3\x8b\xe5\xf5\x7c\x06\x1b\xac\xae\xa4\x9e\x1e\xa2\x69\x81\xeb\x2c\x6f\xdd\xd9\xa2\xb8\x22\x4c\x17\xe3\xd1\xb3\x67\x45\x18\xfa\xea\xf1\xa8\xee\x56\x1e\xc2\x7e\x96\xd5\x26\xa2\xaa\x6e\xa6\xb3\xab\xdb\xe9\x95\x03\x8b\x5f\x6e\x86\x39\xb9\x91\xa1\x9d\xdc\xd7\x22\x87\x1d\x3e\x17\x97\xaf\x38\x81\x04\x6f\x43\xe4\x63\x58\xa7\x54\x11\xc2\x06\x53\x9c\x20\x8e\xbd\x7b\x96\x0a\x3f\x33\xe9\xc4\x3c\x4d\x28\x03\xff\x0e\x25\xe6\xd9\xab\xec\x69\x88\xe8\x26\x45\x1b\x0c\xec\x7d\x38\x1e\x21\xa6\x30\x19\x0e\x45\x8f\xb3\x74\xc5\x78\x42\xe8\xc6\xac\x36\xa6\xdc\x4d\x82\x9a\x3c\xf6\xe4\x86\x7e\x18\xfb\xf7\x5e\x71\xb1\x30\x2d\x1b\x8c\xdd\x6e\xb7\x8b\xa2\x20\xb8\xbb\x3b\xfb\x56\x50\x50\xca\x0c\x6b\x6f\x23\x7d\x7c\xfa\x04\xc5\x86\x09\xa2\x41\x1c\x99\x16\x7c\x03\x2f\xf1\x77\x36\x18\x2f\xf2\x71\x60\x13\x81\x0c\x86\x0d\x86\x61\xd9\xa2\x79\xcf\x5e\x59\xe7\xe7\x79\xd0\xaf\x45\x7c\x8d\x0d\x57\x90\x77\xde\x66\xd5\xd6\x13\xef\x8a\xd6\x78\xf4\xeb\xf4\xe6\xd6\x59\x80\xf9\xb2\xa5\x9b\xba\x0b\xc6\x06\xe3\xe3\xe7\xb6\x86\xaf\x12\x6b\x09\x65\x88\xfd\xda\x8c\x2a\x12\xa0\xd9\xa8\xf6\x97\x56\xbd\x6d\xe2\x47\x9a\x01\xf5\x36\x79\x20\xf8\x71\x98\x85\x2a\xdb\x61\x36\xdb\x74\x15\x12\xdf\x2b\xc0\xaa\xa6\xcd\x7f\x04\x2a\x8d\x13\xf2\xd0\x84\x78\xc8\x4c\x62\xb6\xa5\xbd\xd4\x54\x73\xff\xed\xc6\x86\xa2\x92\x54\x44\x76\x7e\x27\xb3\xb5\xfb\x53\xb5\x98\x4c\x9d\x32\x48\xa0\xf1\x6d\x0f\xaa\xb5\x21\x3f\x6f\x1b\x54\xb5\x88\x42\x13\x4d\x32\xc9\xf4\x72\x72\x0e\x1f\x55\xd3\x4c\xe2\xed\xe4\x1c\x26\xf8\xfd\x24\x93\xee\x89\xbc\x71\x89\x67\x0c\xe7\x11\x4c\xc4\xd4\xe7\xf1\x28\xaf\xd5\x0e\xae\xc1\x0f\x28\x4c\x05\xd7\x64\xff\x5e\x20\x00\xcd\x22\x4a\x75\x39\xb4\xa1\xdc\x3a\xff\xf6\x5b\x7c\xdd\x51\xbf\x6b\x1c\x95\xbd\x43\xf4\xa0\x28\x0d\xeb\xf9\x5b\x30\x48\x60\xc0\xf3\xb7\x6f\xc1\x10\x6e\x61\xc3\x3a\x3f\xcf\xee\xbe\x6f\x72\xc0\x0a\x77\xcc\x5d\x30\xdb\x76\x90\x79\x31\x2c\x91\xf3\xd2\x7d\xa3\x34\x9f\xce\xbe\x2f\x82\x78\xa3\x45\x68\x49\x8a\xf9\x27\x00\x00\xff\xff\x05\x18\x08\x59\xbe\x21\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 8638, mode: os.FileMode(0666), modTime: time.Unix(1641958737, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x54, 0x15, 0xab, 0x54, 0xe1, 0x11, 0x7a, 0x77, 0x73, 0xd3, 0x84, 0x27, 0x63, 0x86, 0x32, 0xe, 0x9d, 0x87, 0xb8, 0xee, 0x74, 0x1d, 0xdf, 0x3f, 0xa7, 0x56, 0xc2, 0x8c, 0x52, 0xe0, 0x4f}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4f\x6b\xeb\x38\x10\xbf\x07\xf2\x1d\x86\x5c\xec\x40\x58\xda\x42\x4f\x7b\x2a\xc5\xed\x86\xed\xa6\x90\x64\x17\x96\x52\x8c\x62\x2b\xae\xa8\x2c\x05\x49\x6e\xeb\x7e\xb7\x77\x79\x9f\xec\x21\xff\x49\xa4\x58\x76\x9c\x40\x72\x79\x39\xb4\x20\xfd\x3c\x33\xd2\x6f\xe6\x37\xa3\x48\x60\xa4\x30\x28\xb4\xa2\x18\x46\x31\x8b\x6f\x71\xf8\xc9\x05\x8d\x47\xc3\x81\x3f\x1c\x00\x00\x18\x8b\x21\x89\xf5\x0a\xac\x48\x42\x98\x2a\xb7\xf5\x2f\xe2\x4c\x2a\x81\x08\x53\x16\x7a\xf3\xbe\x83\xe8\xdf\x46\x90\x14\x89\x1c\xde\x71\x3e\x29\x77\x4a\xf7\x71\xb8\xca\xb7\xa0\xd2\x36\x00\xcb\x28\xdd\x43\x21\xb5\x45\x29\x92\x62\xa9\x50\xba\x81\x4f\xa2\xde\x78\xa6\x8a\x15\xf8\xe6\x0c\x43\x8c\xd7\x28\xa3\x0a\x7c\xc6\x3f\xfd\x31\x20\x73\xcf\xcb\x54\xe4\x8d\x81\x71\x65\x3a\xf8\xc0\x42\x12\xce\xcc\x58\xb7\x61\x54\x48\x73\x6f\xeb\xe0\x6a\x5c\x19\x20\x32\x44\x91\x22\x1f\xd8\x30\xc0\x39\xc5\x88\x75\x1b\x50\x22\xc3\xb5\x8d\x88\xa7\x29\x67\x21\x8a\x22\x2c\x65\x75\x4a\xfc\x55\x1c\x79\x2f\xdc\x4c\x62\x11\x2a\x94\xc8\x9d\x45\x8d\x7c\x79\x6d\x20\x65\x2e\x15\x4e\x2d\x6c\x0b\x32\xc6\x82\x7c\xe0\x38\x5c\x0b\x9e\x96\xf4\xb9\x98\x60\x28\xc5\x60\xff\x1c\x31\x96\xd8\xfb\xe7\xd9\x62\x39\xbf\x9b\xce\x96\xb0\x7e\x0f\xcd\xbc\xa8\xf8\x5c\xe5\xbb\xf4\x78\x78\x9e\x07\xd3\xc7\x19\xfc\x1d\xfc\x0f\xfe\x2e\x2b\xc6\x76\x02\xcd\x83\x87\x60\x1e\xcc\xee\x83\x05\x8c\xf4\x25\x8c\xc0\x2f\xee\x82\xc4\xf5\x25\x76\x38\x2d\xae\xb7\xbc\xdd\x36\xbf\x26\x03\xed\xae\x6d\xa2\x7c\x7d\x27\x87\xdd\x9b\xf7\xdb\xe2\xbe\x49\x41\xc7\xf1\xcd\x52\x05\xdf\xae\xd1\xb1\xa6\x60\xfc\xa7\xfe\x3b\x1c\xb8\x2a\x3c\xd5\xf5\xaa\x73\x28\xdf\xe0\x5d\xa1\x1b\xc5\x58\x51\xef\xae\xc1\xb3\xd5\x5e\xed\xd5\x51\x31\x8e\x9a\x33\x72\xb1\xca\xc1\xfa\xc3\x0e\x61\x32\x4f\x7e\x40\x9f\xda\x19\xb5\x8c\x9c\x23\x99\x6b\xf6\x5c\xdc\x49\xf2\x8d\xc3\x08\x29\x9c\x70\x91\xff\x5e\xe4\x59\x47\xef\xd1\x5d\xe4\x06\x45\xd8\xe9\xa4\x93\x5e\xdb\xcd\xa5\xf9\xad\x92\xab\x64\xd6\xec\xc0\x75\xd6\x55\x3d\xb8\x47\x17\xae\xbf\x38\xa9\x0f\x9b\x9c\x76\xb6\x62\xb8\x44\x3b\x3e\x3e\xc3\xd6\x44\x48\x65\x8f\x2d\xee\x23\x39\x7a\x9a\x3b\x63\x8a\x55\xab\xeb\x5a\xe0\x97\xd7\x7d\xb0\xa9\x13\x1d\x36\x11\x25\x09\x4b\x31\x53\x7d\x02\xb0\x92\xb3\x1d\x96\x12\x4a\x49\x18\xbd\x21\x4a\x31\x4b\x70\x28\x90\x22\x2c\xd9\xbf\xc2\x0a\x4c\x11\x4b\x32\x94\xe0\xfd\x19\xa1\x31\x22\xc8\x48\x90\x8d\xda\xa3\xc6\x55\x5a\x87\xb5\xf3\xc2\x33\x40\xed\xb6\xc8\x87\x16\x97\x76\xc6\x9c\xda\x7b\x7b\x04\xe1\x90\x99\x96\x90\x2c\xcc\xc1\x88\xec\xd6\x70\x78\x32\x31\xf3\xb3\x25\x00\x13\x72\xd0\xbf\x35\x56\x54\xee\xbb\xa4\x8e\xb0\x37\xb4\x22\x0a\x31\xd5\x54\xbb\xdd\x9e\xae\xde\x83\x52\x67\xc0\x4f\x53\xbb\x7e\xcf\x8e\x0b\x08\xdd\x71\x0f\x0f\xc7\x53\xe0\x88\xb7\x40\xeb\x63\xa0\xf9\xe4\x6b\xc4\x35\x69\xef\x4d\x2d\x50\x2e\xf4\x3a\xa2\xd5\xf3\xa2\xb4\xda\xe7\x95\xb4\x46\x54\x16\x89\xdc\x9e\xca\x06\xff\x17\x56\x16\xc3\x73\x97\xb8\x34\x26\xf4\xee\x52\x3a\x5e\x5c\x8c\x38\x2a\x36\x3a\x23\xd9\x31\xd6\xb7\xac\x47\xce\x4f\xad\xea\x26\x2c\xc6\x5f\xcd\x8a\x2c\xc3\xaf\x3e\x03\xce\x1a\x88\xfd\x73\x4e\x1a\x69\xd5\x2e\x22\x75\xf3\x6a\x4a\x48\xbd\xd3\x4b\x40\xb6\xe0\x53\xe4\xa3\xcf\x9c\x74\x6e\xe5\x38\x79\xfe\x36\xa4\xa0\xef\x84\xbc\xbd\xac\x73\x0e\xc7\xd3\xd9\x22\x98\x2f\x61\x3a\x5b\x3e\x77\x35\xb8\x49\x39\xe6\x8f\x87\x83\xff\xee\x9e\xfe\x0d\x16\xe0\x7b\x4b\xc2\x72\x6f\x02\xde\xcd\xcf\x1f\xb0\xca\x41\xff\x5b\xab\x3f\xbc\xfa\xec\x00\xe0\x7b\x8b\x14\x51\xaa\x41\xb7\x1a\x72\xdb\x04\xfc\x83\x63\x92\xa5\x5d\x88\x27\x24\x12\xac\x01\xd7\x57\x1a\x71\x7d\xd5\x84\xfc\x95\x55\x88\xc2\xc6\xb5\xc3\xc8\x23\x12\x09\x62\x2a\x43\xac\x88\xb8\xb0\x74\x53\x58\x02\x2e\x80\x6a\x17\xc2\x2b\x2f\xe4\x57\x00\x00\x00\xff\xff\xb8\xa9\xa0\x7c\xac\x13\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5036, mode: os.FileMode(0666), modTime: time.Unix(1641801065, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0xca, 0x60, 0xf6, 0xaa, 0x51, 0x1d, 0x18, 0x1e, 0x66, 0xe9, 0xc5, 0xc5, 0x7e, 0xe3, 0xe7, 0x46, 0xf5, 0xa0, 0x15, 0x55, 0xd, 0xcc, 0xb9, 0x8f, 0xdd, 0x2c, 0x4f, 0x5d, 0x7f, 0xb8, 0xb9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
