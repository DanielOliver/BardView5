// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (3.088kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.249kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x8b\xdb\x3c\x10\xbe\x07\xf2\x1f\x86\xbd\xd8\x81\x1c\xde\xcb\x7b\xea\x69\x59\xbc\x25\xb4\x64\x21\x49\x0b\xa5\x14\xa3\xd8\x93\x54\x8d\x2d\xa5\xfa\x48\xd6\xfd\xf5\xc5\x96\xbf\x24\x7f\x25\xb0\x4b\xe7\x66\x79\x1e\x69\x9e\x99\x79\x34\x8a\x04\x12\x85\xa0\xc8\x3e\x41\x78\x88\x78\x9a\x72\x16\x92\x28\x42\x29\x1f\xe6\x33\x7f\x3e\x03\x00\x60\x24\x45\x30\xa6\xf0\x55\x99\xc5\xdc\x22\xce\xa4\x12\x84\x32\x05\x16\x34\x3c\x9f\xe0\x2c\x68\x4a\x44\x06\x27\xcc\x96\x06\x61\xce\x8a\x43\xa2\x40\xd1\x14\xa5\x22\xe9\x19\xae\x54\xfd\xe4\xda\xac\xc0\x1f\xce\x10\x62\x3c\x10\x9d\x28\xf0\x19\xbf\xfa\x0b\x20\xed\x7f\x9e\x56\x91\xb7\x00\xc6\x15\x30\x9d\x24\xf3\xd9\xe2\xc3\x7c\x36\x9f\xd9\x2c\xb4\x44\xd1\x04\x9f\x7f\x85\x34\xae\x42\xde\xd3\x23\x65\xfd\x14\x0a\xcf\xf3\xa9\xf9\x97\x5b\x97\x86\xd6\xcd\x6e\xdd\x4f\xcb\xaa\x38\x9d\x04\xec\xb3\x56\x28\x03\xc8\x2e\x8a\x18\xd7\xb1\xd4\xd5\x76\x47\x0e\xcb\x53\x2e\x28\x24\xe5\xcc\x4e\xd3\x38\xab\xe6\x94\xff\x16\xe5\x2e\x78\x38\x60\xa4\xe8\x05\xc3\xb8\x28\xc8\xfb\xc4\x8a\x2c\x36\xfb\xc3\x64\x46\x5a\x28\x2a\x43\x52\xc4\x56\x32\xe4\x3c\x41\xc2\x6e\x64\xa8\x84\xc6\x8a\xa4\xd5\xea\x46\x12\x37\x36\x00\xa6\x84\x26\xcd\xdf\x3b\x90\x2d\x09\xde\x89\x2c\xba\x5a\x91\xa3\x6c\x90\xdf\x7f\xdc\x84\x94\x99\x54\x98\xd6\xd8\x1b\x91\x06\xfb\xf4\xb2\xde\xee\x36\x8f\xab\xf5\x0e\x0e\xa7\xb0\x88\xa1\xec\xe3\x7d\xd6\x08\xec\xf9\x65\x13\xac\x3e\xae\xe1\x53\xf0\x0d\xfc\x46\x1d\x0b\x5b\x82\x9b\xe0\x39\xd8\x04\xeb\xa7\x60\x5b\x6a\x1b\xfc\x52\xd4\x55\x45\xfa\x4e\x2b\x8a\x64\x6a\x34\x74\x60\xbb\x8e\xc3\x67\xda\xe5\xf6\xf3\x4a\x2c\x9c\x8b\x47\x33\xfa\x5b\x23\x50\x16\xe3\xab\x49\x78\x51\xe9\x50\x9b\x15\xce\xea\xc0\x8b\xf5\x09\x6c\x7e\xa3\xf4\x40\xf3\xe5\xbe\xeb\x4e\xf0\x04\x43\xa9\xf7\xbf\x30\x52\xf7\xdd\xd9\x6d\xe4\xbf\xbd\xb2\x8b\x48\x72\x75\x72\xd6\x4b\x61\x8a\x84\x81\xf6\x73\x68\xb3\x1c\x15\xce\x0d\x36\x70\xa1\x17\x57\xf3\x1b\x25\x68\x40\x42\x6d\x9a\x25\x99\x81\xb6\x6e\xf3\x1d\x51\x92\xd5\x36\x4e\x5b\xaf\xd6\xdb\x60\xb3\x83\xd5\x7a\xf7\x62\xa7\xaf\x72\xfb\xfa\xf8\xf9\x4b\xb0\x05\xdf\x8b\x59\xfc\x3f\x4a\x54\x8a\xb2\xa3\x37\x00\x36\x51\x1b\xec\x12\x9c\xf0\xea\x9d\x52\xc2\xc8\x11\xbd\x25\x38\x7b\x2e\x6b\x0a\xbe\xc7\xaf\x0c\xc5\xb8\xcb\x85\xe2\xb5\xeb\xd1\x09\xac\x5f\xd4\x75\x30\x67\x41\x2f\x44\xa1\xbd\x35\x61\x59\x2e\x45\x7b\xf1\xac\xf7\x09\x8d\xbc\xbe\xa6\xc6\x57\x85\x82\x91\x24\x94\x5c\x8b\x08\x9b\xc6\x76\x7e\xd4\xaf\x93\x91\xb7\x89\x0b\x99\x7e\xa6\x38\x8f\x8d\xda\xca\xc9\x3e\xfc\xc0\xa8\xed\xed\x1a\x1a\xba\x0f\x8c\x4e\x3c\xd5\xc8\x6d\x5b\xcf\x03\xc3\xc9\xc3\x09\x0d\xbd\x52\xd7\xee\xbc\x75\xbc\xab\x18\xfa\xbd\x9d\x49\xd9\xe4\xc1\x0c\xbe\xf1\xe9\x38\xe1\xed\xcc\x6f\xcb\x7b\x7a\x7e\xba\x3c\xde\x63\x94\x1a\xed\xff\x0d\x00\x00\xff\xff\xe6\x0a\x3a\x6e\x10\x0c\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 3088, mode: os.FileMode(0666), modTime: time.Unix(1643180033, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0x44, 0x72, 0x14, 0xac, 0xd6, 0x31, 0xe7, 0x1d, 0x20, 0x2e, 0xc6, 0xc8, 0xae, 0x60, 0x2c, 0x37, 0xa3, 0xde, 0xd2, 0xb5, 0xdf, 0x46, 0x20, 0x9c, 0xef, 0x26, 0x49, 0x93, 0x97, 0x98, 0x73}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5d\x6b\xe3\x38\x14\x7d\x2f\xf4\x3f\x5c\xf2\x92\x04\xc2\xd2\x0e\xf4\x69\x9f\xca\x90\x99\x0d\x3b\x93\x2e\x49\x76\x61\x58\x16\xa3\xd8\xb7\x1e\x51\x59\x0a\x92\xdc\xa9\xe7\xbf\xed\xcb\xfe\xb2\x45\xfe\xa8\x25\x5b\xb2\xdd\xb2\x29\x0b\xe3\x87\x16\xe2\xa3\x7b\x8f\x74\x8f\xce\xbd\x8e\x25\x12\x8d\xa0\xc9\x91\x21\xcc\x12\x9e\xdc\x60\xa4\x50\x6b\xca\xd3\xd9\xe5\xc5\xe2\xf2\x02\x00\xc0\xf9\x39\xa2\x09\x94\xcf\x91\xa6\x94\xeb\x0a\x61\x9e\x58\x70\xa5\x25\xa1\x5c\x77\x16\x9c\x1e\x5a\x90\x79\x4e\x92\x66\x44\x16\xf0\x80\xc5\xaa\x7a\x53\xb1\x48\xa2\x63\xd1\xa2\xaa\xf0\x00\x3c\x67\xac\x03\x23\xba\x85\x69\x9a\xa1\xd2\x24\x3b\xc1\x37\xaa\xbf\x8a\x5c\x97\xbf\xc0\x77\xc1\x11\x12\xbc\x27\x39\xd3\xb0\xe0\xe2\xdb\x62\x09\xc4\x7e\x37\xcf\x75\x3c\x5f\x02\x17\xda\xce\xf0\x88\x52\x51\xc1\x6d\xb6\x2d\x91\x1a\x6a\xbf\x7b\xce\x70\xb5\xac\x23\x50\x15\x91\x58\xd3\x47\xb4\x23\x08\xc1\x90\xf0\xe1\x08\x5a\xe6\xd8\x04\x89\x45\x96\x09\x1e\x91\x38\x46\xa5\x9a\x8d\xe2\x53\xb9\xed\x0e\xe3\x5c\xa1\x8c\x34\x49\x95\x15\xd3\x40\xff\xfc\xab\x07\x55\x85\xd2\x98\xb9\xe0\x00\x94\x93\x0c\xa1\xf3\x04\x08\x64\x22\xc9\x19\x06\xa0\x2d\x2c\x41\x15\x4b\x7a\xd2\xf6\xe9\x06\x22\xe2\x93\x46\xc9\x09\x8b\x94\xc8\x65\x8c\xa5\xe0\x3c\x6a\xe8\xc2\x1e\xb0\xe8\x26\xae\x80\xef\xef\xb6\xfb\xc3\xee\x76\xb3\x3d\xc0\xfd\x43\xe4\x6a\xb3\x96\xd4\xb1\x68\x25\xfa\xe1\x6e\xb7\xde\x7c\xdc\xc2\xaf\xeb\x2f\xb0\x68\x95\xb9\x74\x45\xbc\x5b\x7f\x58\xef\xd6\xdb\xf7\xeb\x3d\xcc\x4c\x0d\x66\xb0\x28\x4b\x41\x93\xa6\x88\x83\x69\xcb\x02\x57\xf5\x0d\x65\xb6\x35\x10\x4e\xee\x4a\x65\x61\x0a\xb7\x9c\xb4\xf3\x04\x25\x7d\xc4\x24\xba\x97\x22\x8b\x3a\x67\x19\xa0\xd4\x2f\xcc\xc0\xa1\x74\xc0\xb3\xc0\xf2\xcb\x8b\xe5\xcf\xe6\xef\x80\x11\x45\x44\x29\x9a\xf2\x0c\xb9\x6e\x3d\xa9\x63\x19\xb5\x3e\xc2\x66\x71\x56\x9f\x68\xb2\x7b\xee\xb7\xc7\x22\x6a\x9d\x04\x16\xaf\x02\x9e\xeb\x87\x49\xc1\xb0\x34\x9c\x8a\x4c\xad\x7f\x0b\xd4\x13\x42\xe8\x68\x1d\x9b\xfe\x6d\xb7\xf9\x7c\xbb\xfb\x52\x95\xbd\xe6\xbb\xea\x71\x9a\x26\x34\x2b\x85\x89\x14\xd0\x56\x73\x79\xfe\xcb\x5b\x66\x65\xae\x7f\x0a\x24\xef\x6d\x2c\xcc\xc2\x6d\x91\x9e\xa5\x2f\xe3\x65\xd5\x2f\xc0\xcd\x42\x0c\xd0\xb2\x50\xb3\xda\x05\x9a\x9b\xe5\xbf\x5b\x99\xe9\xd6\xa6\x75\x14\x27\xf4\xde\xaa\xc1\x1b\x75\xb6\xdb\xf4\xb2\x9b\x64\xb5\xa9\x8e\xf2\x07\xc6\x12\x7b\xe7\x23\xb3\x49\xb8\x94\x4e\x90\x73\x34\x91\x41\x5f\xa4\xdf\x31\x8a\x89\xc6\x54\xc8\xe2\xc7\x2a\x9e\xb3\xf5\x09\x93\xa5\x3a\x91\x18\xbd\x49\x86\xbd\xcb\x49\xf3\xd6\xf5\xad\xc5\x55\x55\xd6\x6e\x07\x8d\xea\x9e\x9b\xc7\xe8\x0c\xde\xac\x78\xdd\x0c\x3e\xa5\xb1\x36\xcf\xf9\x07\xf1\x17\x2b\xcc\xff\xdd\xe2\xdd\x94\x6f\xe0\xf5\x6a\x06\x02\x33\x77\x3b\x4b\x4f\x98\xba\x83\x60\xdb\x56\x46\x69\x10\x56\x77\x91\x29\x9c\x1d\x45\x8f\x81\x33\xca\x18\x8d\xe2\xaf\x84\x31\xe4\x29\x46\x92\x98\x13\x0c\x8c\x20\x8c\xf0\x34\x27\x29\x4e\x3a\x0d\xdf\x67\x40\xe0\x6e\x8e\x9b\xef\x1b\x0f\xef\x4d\xda\xff\xc5\x2c\xd1\x90\xf1\xf8\x55\x80\x98\x83\x19\x67\xe5\xf4\x98\xf6\xc3\x62\x8c\x8f\x51\x6e\x80\x80\x0d\x19\xcd\xef\xcc\x27\x9d\x89\xa6\xf6\x4c\xca\x13\x7c\x02\x6f\x6d\x40\x70\xf7\x45\xff\x70\x57\x3d\x4f\x9d\x1a\x3c\x2a\xcd\x62\x4a\x86\x92\x35\x50\x1e\xb3\x3c\xc1\x06\x10\x48\xe8\x74\x80\xe6\x4e\xf5\x5b\x40\xf3\xa6\xfd\x24\x18\x70\xff\x67\xf0\x6b\xec\x7f\x8a\xf3\x9f\xdb\xf4\x5f\x3d\x51\x0c\xf8\x4a\x48\xc1\xcf\x87\x75\xce\x76\xbf\xd9\xee\xd7\xbb\x03\x6c\xb6\x87\xbb\xa1\x9b\xb6\xaa\x06\x97\xe5\xe5\xc5\x1f\xb7\x9f\x7e\x5f\xef\x61\x31\x3f\x50\x5e\xcc\x57\x30\x7f\xf7\xcf\xdf\x70\x2c\xc0\xfc\xbb\xd7\x3f\xcd\x9b\xbd\x03\xc0\x62\xbe\xcf\x08\x63\x06\x74\x63\x20\x37\x7d\xc0\x67\x4c\x68\x9e\x0d\x21\x3e\x11\x99\xa2\x01\x5c\x5f\x19\xc4\xf5\x55\x1f\xf2\x4b\x5e\x23\xca\x18\xd7\x9e\x20\x1f\x89\x4c\x09\xd7\x39\xe1\x25\xe3\x32\xd2\xbb\x32\x12\x08\x09\xcc\xa4\x90\xf3\xea\x40\xfe\x0d\x00\x00\xff\xff\xe7\x48\x45\xe8\x81\x14\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5249, mode: os.FileMode(0666), modTime: time.Unix(1643178852, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0x7, 0x99, 0xd3, 0x77, 0x62, 0xf6, 0xdb, 0xf4, 0xf2, 0x31, 0x9d, 0xf8, 0x26, 0xe5, 0x76, 0x8a, 0x27, 0x62, 0x76, 0xa5, 0x33, 0x91, 0xd5, 0xb, 0xa1, 0xc1, 0xf6, 0xa5, 0x8d, 0x6, 0x25}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
