// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (8.641kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (4.675kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x36\x10\xfe\x6e\xc0\xff\xe1\x60\x14\x90\x34\xa8\x40\x1b\x0c\x28\x96\xa2\x05\x8c\x4c\xc9\x82\x65\xf6\x26\x3b\x7b\xc1\x30\x08\xb4\x44\x3b\x6c\x24\xca\x15\xa9\xa4\x5e\xdb\xff\x3e\x90\xd4\x0b\x25\x4b\xb2\xd4\xd9\xd9\x3e\x54\xdf\x2c\xf2\xf8\xdc\x1d\xef\x9e\x87\x62\xe2\x27\x18\x71\x0c\x1c\xad\x42\x0c\x13\x3f\x8e\xa2\x98\x7a\xc8\xf7\x31\x63\x93\xf1\xc8\x1c\x8f\x00\x00\x28\x8a\x30\xa8\x87\xe3\x0f\x5c\xbd\x14\x8f\x1f\x53\xc6\x13\x44\x28\x87\x8a\xa9\xb7\xbd\x87\x6d\x42\x22\x94\xec\xe0\x1e\xef\x6c\x65\xa1\xb0\x02\x0f\x71\xe0\x24\xc2\x8c\xa3\x68\x0b\x8f\x84\xdf\xc5\xa9\x7a\x03\x7f\xc7\x14\x43\x80\xd7\x28\x0d\x39\x98\x34\x7e\x34\x2d\x40\xfa\x98\x91\x72\xdf\xb0\x80\xc6\x1c\x68\x1a\x86\xe3\x91\xf5\x7a\x3c\x1a\x8f\xaa\x51\xa4\x0c\x27\xa5\xf3\xe2\x97\x47\x82\xdc\xe5\x15\xd9\x10\xda\x1c\x82\x9c\xb9\xbd\x2f\xc7\xc4\xb3\x1f\x46\x9a\x96\xab\xed\xff\xac\x3c\xb9\x9f\xb5\x04\xac\x76\x9a\x2b\x2d\x96\xfb\x56\x48\x4d\xed\x4a\x5d\xf1\x0c\xc8\x61\x86\xf2\x80\x13\x46\x62\x5a\x4d\x53\x77\x54\x25\xca\x0b\x2b\x5b\x05\xaf\xd7\xd8\xe7\xe4\x01\x7b\x81\xdc\x90\xd3\xf8\x8a\x69\xa0\xd6\x87\x83\x19\xd1\xac\x08\xf3\x90\xf4\x2d\x8b\x30\x8e\x43\x8c\x68\xcf\x08\x79\x92\xe2\x3c\xc8\x4a\xa9\xab\x96\xe8\x59\x00\x38\x42\x24\x2c\x47\x07\x58\x6a\x2d\x38\xd0\x52\x56\x35\x47\x1b\x56\x5a\xfe\xf9\x57\x2f\x4b\xb6\x63\x1c\x47\x85\x6d\x4f\x4b\x65\x7b\x31\x9f\x2d\x96\xee\xf4\x7a\xb6\x84\xf5\xbd\x27\x7d\xc8\xea\x78\xb5\x2b\x1b\xec\x72\xee\x3a\xd7\x57\x33\xf8\xd1\xf9\x03\xcc\xb2\x3b\xac\x6a\x0b\xba\xce\xa5\xe3\x3a\xb3\x0b\x67\x91\xf5\x36\x98\x59\x53\xe7\x3b\xd2\x84\x26\x37\x49\xed\x51\x1b\xa0\xbe\x8f\xed\x98\xd5\xed\x36\xc5\x4e\x58\x35\xe2\x49\x29\x79\x9f\x62\x20\x34\xc0\x1f\x54\xc2\xe5\x4e\x7b\xa9\x7a\x13\xd3\xc2\x71\xf9\xbe\x89\xb4\x92\x38\xc4\x1e\xdf\x6d\x71\xc9\x5c\xc5\x2b\xaf\x81\x61\x3a\x78\xac\xb4\x3b\x4c\x66\x35\x72\xa9\x3e\x47\x62\xe9\xe6\x12\xae\x41\x75\x14\x74\x8f\xa7\x06\x15\xa5\x21\x27\xdb\x10\x7b\x88\x31\xb2\xa1\x11\xa6\x9c\x79\x28\x0c\xe3\x47\x1c\x74\x36\xfe\x70\xa8\xac\x49\x22\x44\xd1\x06\xd7\xb7\xe9\x48\x50\x5d\xd5\x26\x36\x5b\xee\xb5\x48\xaf\x5e\x70\x65\x41\x65\x35\xdb\x52\x74\xb5\x7a\xeb\xa5\x94\x72\x66\xff\xe2\xea\xa1\x77\x7d\xb2\xf1\x45\x92\xf8\x05\xea\xd2\x5f\xc3\x4e\x2a\x5d\xc3\x52\x32\x40\xdd\xfa\x2c\xdc\x29\x80\x03\xc4\x68\x00\x96\xdd\xc8\x7a\xaa\x68\xb2\xb1\x52\xc6\x0a\xe0\x36\x45\x1a\x06\xdc\x24\x23\xd2\x91\xbc\xbd\x5a\x24\x44\x77\xb6\x5d\x41\x8a\x59\x35\x83\x46\xf5\x92\x33\x4e\xa1\x95\xcd\x87\x65\x09\x57\xd2\x64\x8d\x0d\xca\x01\xb1\x1b\x87\x18\x41\x9b\x3d\x98\x1c\xe0\x94\x04\x01\xa7\x26\x89\x13\x00\x54\x89\xe2\x10\xc0\xb0\xf4\xd4\xc8\x02\x4e\x4d\x18\x35\x65\x81\x23\xec\x75\xc3\x21\xf7\x94\x00\x35\xe6\x81\x27\x61\x1f\xad\x9f\xc4\xcf\x2e\x0e\x3a\x44\x3f\xe5\xb4\x56\xd2\xd1\xd0\x44\x3a\x5b\xd0\x4a\x36\x69\x41\xeb\x75\x44\xaf\xe1\x3d\x35\xdd\xf9\x9c\xc4\x74\xd8\xfd\x86\x66\xf8\xdf\xde\x6e\x48\x47\x58\xba\x7a\x87\x7d\xfe\x05\x21\x64\x96\xff\x83\x18\xb6\x38\x89\x08\x63\x95\x9d\xa8\x0d\xf4\x11\x1d\x6d\xf6\x57\xd1\xf9\x2a\x3a\x4f\x28\x3a\x8a\x0d\x2a\x33\x8e\x7b\x14\xce\x7a\xf5\xe4\x00\x7a\x96\x8e\xd8\x0e\x31\x0d\x88\xc8\x50\x29\x9c\xef\x58\x4c\x57\x47\xf3\x7e\x4d\x70\x18\x54\x55\xf9\xdf\x6a\x72\xb7\x1e\x6b\x54\xf3\x04\x7a\xac\xa1\xa9\x4a\x6b\xc1\x53\x83\x07\xbe\x3e\xb2\x5a\x55\x37\x01\x7d\x20\xb3\xd2\x68\xc1\xcc\x46\x0f\x80\xe6\xf5\x7b\x00\xf5\xe4\x07\x81\x5c\x84\xae\x67\x0b\xc7\x5d\xc2\xf5\x6c\x39\x6f\xfb\x26\xb3\xa5\x92\xda\x9d\x37\x48\x76\xed\xd2\xc7\x1a\x8f\x16\xce\x8d\x73\xb1\x84\x97\x36\x18\xb7\x0c\x27\xe0\xc6\x21\x36\x6c\x58\xa3\x90\x61\x1b\x04\x2b\x8d\x47\xbf\xfd\xe0\xb8\x0e\xcc\xe6\x4b\x70\x7e\xbf\x5e\x2c\x17\x66\x6e\x04\x97\xee\xfc\xa7\xca\x85\x8d\x9a\x2a\x35\xfd\x8d\xbe\xe2\x13\x85\x71\xa6\x87\x61\xc3\x55\x18\xaf\x50\x68\xa8\x38\x8e\x17\x4d\xb1\xb0\x8a\xea\xc2\x75\xa6\x4b\x07\xe6\x2e\xb8\xce\xcf\x37\xd3\x0b\x07\x2e\x6f\x67\x17\xcb\xeb\xf9\x0c\x36\x58\x1d\x49\x3d\x3d\x44\xd3\x02\xd7\x59\xde\xba\xb3\x45\x71\x44\x98\x2e\xc6\xa3\x67\xcf\x8a\x30\xf4\xd9\xe3\x51\xdd\xad\x3c\x84\xfd\x2c\xab\x45\x44\x55\xdd\x4c\x67\x57\xb7\xd3\x2b\x07\x16\xbf\xdc\x0c\x73\x72\x23\x43\x3b\xb9\xaf\x45\x0e\x3b\x7c\x6e\xbd\xa3\x4e\x53\x12\x64\x37\x86\xca\x54\xbb\xa7\x16\x63\x95\x93\x5b\x9c\x40\x82\xb7\x21\xf2\x31\xac\x53\xaa\xd8\x64\x83\x29\x4e\x10\xc7\xde\x3d\x4b\x45\x90\x99\xee\x62\x9e\x26\x94\x81\x7f\x87\x12\xf3\xec\x55\xf6\x36\x44\x74\x93\xa2\x0d\x06\xf6\x3e\x1c\x8f\x10\x53\x0e\x33\x1c\x0a\x82\x60\xe9\x8a\xf1\x84\xd0\x8d\x59\xed\x6a\xb9\x9a\x04\x35\x79\xec\xc9\x05\xfd\x30\xf6\xef\xbd\xe2\x54\x62\x5a\x36\x18\xbb\xdd\x6e\x17\x45\x41\x70\x77\x77\xf6\xad\xe0\xaf\x94\x19\xd6\xde\x42\xfa\xf3\xe9\x13\x14\x0b\x26\x88\x06\x71\x64\x5a\xf0\x0d\xbc\xc4\xdf\xd9\x60\xbc\xc8\x9f\x03\x8b\x08\x64\x30\x6c\x30\x0c\xcb\x16\x9d\x7f\xf6\xca\x3a\x3f\xcf\x83\x7e\x2d\xe2\x6b\xec\xd6\x82\xf9\xf3\x1e\xad\xf6\xad\xf8\xd0\xb4\xc6\xa3\x5f\xa7\x37\xb7\xce\x02\xcc\x97\x2d\xad\xd8\x5d\x6d\x36\x18\x1f\x3f\xb7\xb1\x45\x95\x95\x4b\x28\x43\xac\xd7\x66\x54\xd1\x0f\xcd\x46\x71\x87\xb4\xea\x6d\x13\x3f\xd2\x0c\xa8\xb7\xc9\x03\xc1\x8f\xc3\x2c\x54\xd9\x0e\xb3\xd9\xa6\xab\x90\xf8\x5e\x01\x56\x35\x6d\xfe\x3b\x50\x69\x9c\x90\x87\x26\xc4\x43\x66\x12\xb3\x2d\xed\xa5\x20\x9b\xfb\x9f\x46\x36\x14\x95\xa4\x22\xb2\xf3\x03\x9d\xad\x1d\xbe\xaa\xc5\x64\xea\x7c\x43\x02\x8d\xac\x7b\xf0\xb4\x0d\xf9\x7e\xdb\xa0\xaa\x45\x14\x9a\x68\x92\x49\x26\xb6\x93\x73\xf8\xa8\x9a\x66\x12\x6f\x27\xe7\x30\xc1\xef\x27\x99\xee\x4f\xe4\x71\x4d\xbc\x63\x38\x8f\x60\x22\x86\x3e\x8f\x47\x79\xad\x76\x70\x0d\x7e\x40\x61\x2a\xb8\x26\xfb\x0f\x03\x01\x68\x16\x51\xaa\x93\xa5\x0d\xe5\xd2\xf9\xc5\x71\x71\x35\xa4\x7e\xd7\x38\x2a\xfb\x00\xe9\x41\x51\x1a\xd6\xf3\xb7\x60\x90\xc0\x80\xe7\x6f\xdf\x82\x21\xdc\xc2\x86\x75\x7e\x9e\x1d\x9c\xdf\xe4\x80\x15\xee\x98\xbb\x60\xb6\xad\x20\xf3\x62\x58\x22\xe7\xa5\xfb\x46\x69\x3e\x9d\x7d\x5f\x04\xf1\x46\x8b\xd0\x92\x14\xf3\x4f\x00\x00\x00\xff\xff\xbd\x0b\x59\x8f\xc1\x21\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 8641, mode: os.FileMode(0666), modTime: time.Unix(1635655142, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x78, 0x1a, 0x9e, 0xa8, 0x43, 0xff, 0xee, 0xc, 0x44, 0x9, 0x3c, 0x40, 0x94, 0xa3, 0x45, 0x91, 0x4a, 0xc6, 0xf7, 0x35, 0x7c, 0x71, 0x76, 0x39, 0x3d, 0x47, 0x7a, 0x48, 0xb3, 0x7f, 0xb6}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcd\x6a\xeb\x38\x14\xde\x07\xf2\x0e\x87\x6c\xec\x40\x19\xda\x42\x57\xb3\x2a\xc5\xed\x84\xe9\xa4\x90\x64\x06\x86\x52\x8c\x62\x9f\xb8\xa2\xb2\x14\x24\xb9\x1d\xf7\xdd\x66\x73\x9f\xec\x22\xff\x24\x56\x2c\x3b\x49\xef\x4d\x36\xd7\x8b\x9a\x5a\x9f\xcf\xe7\xf3\xf3\x9d\x73\x12\x49\x24\x1a\x41\x93\x25\x43\x18\x7d\x08\xc9\xe2\xd1\x70\xe0\x0f\x07\x00\x00\xc5\xbf\x21\x8d\x61\x7b\x2d\x69\x42\xb9\x2e\x8f\xcd\x15\x09\xae\xb4\x24\x94\xeb\x0a\xbd\x7e\xdb\x1e\x9a\x6b\x2d\x69\x4a\x64\x0e\x6f\x98\x5f\x94\x27\x25\x65\x1c\x2e\xf3\x1d\xab\x00\x3c\x63\x6c\x07\x45\xf4\x06\xa5\x69\x8a\x4a\x93\x74\x0d\x1f\x54\xbf\x8a\x4c\x17\x4f\xe0\x53\x70\x84\x18\x57\x24\x63\x1a\x7c\x2e\x3e\xfc\x31\x90\xe6\x99\x97\xe9\xc8\x1b\x03\x17\xba\x49\xf0\x8e\x52\x51\xc1\xa1\xe5\x1c\x6c\x90\xcd\xb3\x0d\xc1\xe5\xb8\x32\x40\x55\x48\x22\x4d\xdf\xb1\x61\x40\x08\x86\x84\xf7\x1b\xd0\x32\xc3\xda\x46\x24\xd2\x54\xf0\x90\x44\x11\x2a\x55\x79\x89\xff\x15\x2e\xef\x7c\x6e\xa6\x50\x86\x9a\x24\x6a\x6b\xd1\x20\x9f\x5f\x5a\x48\x95\x2b\x8d\xa9\x85\xed\x40\xc6\x28\xe9\x3b\xc6\xe1\x4a\x8a\x34\x2c\xd2\xe7\xca\x04\x27\x29\x82\x7d\x39\xbe\xb1\xc4\xde\x3d\x4d\xe7\x8b\xd9\xed\x64\xba\x80\xd5\x5b\x69\x32\xac\x32\xb9\xcc\xb7\x85\x71\xff\x34\x0b\x26\x0f\x53\xf8\x33\xf8\x17\xfc\x6d\x3d\x8c\xed\xd2\x99\x05\xf7\xc1\x2c\x98\xde\x05\x73\x18\x19\xf7\x47\xe0\x17\x51\xa0\x71\x1d\x3e\x27\x5d\x11\xd2\x32\xa2\x5d\x8c\xcd\xa8\x77\x93\xda\xc9\xf1\x4d\x1c\xfa\x88\x9b\xd1\xec\x20\x6e\x07\xbc\xc7\xe5\x52\x8c\xe0\xd7\x2a\x1c\x9b\x20\x8f\x7f\x37\x7f\x87\x03\x5b\xb7\xa9\x51\xa1\xa9\x8f\x7c\x8d\x5b\xf9\x36\x84\x56\xa5\xd5\xad\xaf\x93\xe9\xaa\x66\x75\xa8\xc1\xa1\xa7\x46\x9d\x55\xf5\x55\xbf\xe8\x6c\x37\x4d\x9f\xf7\x74\x1d\x57\xce\xac\xd7\x4f\x51\xa2\x75\xae\xec\x4c\x29\xfa\x89\x61\x44\x34\x26\x42\xe6\xbf\x4a\xaa\x2c\xa7\x0f\x98\x10\x6a\x4d\x22\x74\x9a\xef\x48\xa6\x4d\x70\xbe\x6c\x56\x45\x54\xe6\xb1\xb4\x55\xd7\x95\x35\x35\x7b\xe7\x66\xfd\xc6\x97\x26\x67\x33\x77\xbd\xc3\x13\xce\x31\x40\x8f\xaf\xa4\x15\x95\x4a\x87\xad\x45\xa3\xed\x92\x63\x0a\xb9\xeb\xa3\x78\x6a\xcd\x49\x0b\xfc\xfc\xb2\x0b\x6e\x76\x82\xbd\x96\x09\xa3\x09\x4f\x91\xeb\x43\x3e\xc3\x2a\xcb\x7d\xe0\x94\x32\x46\xc3\xe8\x95\x30\x86\x3c\xc1\x50\x12\x4d\x79\xb2\x1b\xce\x0a\xcc\x08\x4f\x32\x92\xa0\x3a\xc4\xc1\x18\x55\x24\xe9\x5a\xef\x24\xcb\x25\xad\xbe\x4e\x79\xb6\x39\x5e\x13\x16\x55\xd1\x41\x66\xd7\xcd\x31\x53\xb4\x97\xd2\xca\x58\x07\xb5\x85\xe9\x61\xb6\x5b\x7d\xdf\xfe\xd0\xac\xc0\x0e\xd2\x26\xa4\x87\xd3\x5a\x04\x2a\x4a\x77\xeb\x2a\xe3\xe1\x68\x60\xd6\x81\xd1\xe4\xde\x95\xff\x07\x1a\xd8\x21\x8b\xff\x89\xbb\xd6\x71\x4b\x7f\x6b\x0d\x3f\x74\x09\xef\xc0\x75\x75\xbe\xae\x26\xb5\x41\x76\xe0\x84\x34\xcf\x09\xab\xd6\xf9\x03\x7f\x92\xac\x08\x53\x45\x6d\x76\x6f\xb7\x67\xef\x02\x36\x6d\x5f\x2f\xf8\x69\x5d\xc0\xa6\xac\xee\x7b\x04\xd9\x4b\x5b\xcb\x6b\x07\xee\xd2\x63\xdd\xd1\x9b\x52\xac\x9f\xed\x51\xe1\x06\x76\x9c\x00\xfb\xd7\x86\xd3\xa9\xee\xcb\xab\xe6\x81\xcb\xe0\x26\x1c\xa7\xdc\x03\x27\xd3\x79\x30\x5b\xc0\x64\xba\x78\x72\x77\xfa\x8b\x72\x8b\x1d\x0f\x07\xff\xdc\x3e\xfe\x1d\xcc\xc1\xf7\x16\x94\xe7\xde\x05\x78\xd7\xdf\xfe\x87\x65\x0e\xe6\xb6\xd2\xbf\x79\xb5\xa7\x00\xe0\x7b\xf3\x94\x30\x66\x40\x37\x06\x72\xd3\x06\xfc\x85\x31\xcd\xd2\x3e\xc4\x23\x91\x09\x1a\xc0\xd5\xa5\x41\x5c\x5d\xb6\x21\x7f\x64\x15\xa2\xb0\x71\xe5\x30\xf2\x40\x64\x42\xb8\xce\x08\x2f\xbe\xb8\xb0\x74\x5d\x58\x02\x21\x81\x19\x0a\xe9\x95\xa1\xf8\x1e\x00\x00\xff\xff\xa8\xed\xe9\x3d\x43\x12\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 4675, mode: os.FileMode(0666), modTime: time.Unix(1641159342, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x39, 0x15, 0xe5, 0x2c, 0x97, 0xda, 0xc9, 0x4e, 0x38, 0x2, 0xa1, 0xe6, 0x8f, 0x62, 0xfc, 0xa6, 0x64, 0x56, 0xa1, 0x58, 0x35, 0x49, 0x57, 0x7f, 0x54, 0xa3, 0xd6, 0xdd, 0xfa, 0xcd, 0x44}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
