// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000001_init.down.sql (0)
// ../migrations/0000001_init.up.sql (7.877kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000001_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000001_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_initDownSql,
		"0000001_init.down.sql",
	)
}

func _0000001_initDownSql() (*asset, error) {
	bytes, err := _0000001_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000001_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4d\x6f\xdb\x36\x18\xbe\x07\xc8\x7f\x20\x7a\xb1\x0d\x18\x43\x52\x20\xa7\x9d\x82\xc2\xed\x82\xb5\xce\xe0\x64\x03\x8a\x61\x10\x68\xe9\xb5\xc2\x85\x22\x3d\x92\x8a\xe3\xfe\xb7\x5d\xf6\xcb\x06\x8a\x92\x45\x4a\x24\x25\x07\x71\x3a\x60\xba\x04\x91\x9e\xf7\x8b\xef\xd7\x63\xa6\x02\xb0\x02\xa4\xf0\x9a\x02\x7a\x97\xf2\xa2\xe0\x2c\xc1\x69\x0a\x52\xbe\x3b\x3f\x9b\x9e\x9f\x21\x84\x10\xc3\x05\x20\xf3\x28\x78\x56\xe6\xa5\x7e\x52\xce\xa4\x12\x98\x30\x85\x1c\xd1\x64\xfb\x88\xb6\x82\x14\x58\xec\xd1\x23\xec\xe7\x46\xc2\xd8\xca\x12\xac\x90\x22\x05\x48\x85\x8b\x2d\xda\x11\xf5\xc0\x4b\xf3\x06\x7d\xe3\x0c\x50\x06\x1b\x5c\x52\x85\xa6\x8c\xef\xa6\x33\x84\xed\x6f\x93\x52\xa5\x93\x19\x62\x5c\x21\x56\x52\x7a\x7e\x36\xfb\xf1\xfc\xec\xfc\xcc\x8d\xa2\x94\x20\x5a\xe7\xf5\x7f\x09\xc9\x1a\x97\xd7\x24\x27\xcc\x1f\x42\x85\xdc\x3e\xb6\xdf\xf4\xd3\x0f\xa3\x2c\x5b\x6d\xfd\x7f\x9d\xa7\xf1\xb3\x73\x00\xeb\xbd\xe5\x4a\x40\xb2\x2f\x85\x0d\x34\x76\x74\x87\xe7\x88\x33\xac\xad\x3c\x81\x90\x84\x33\xf7\x98\xe2\x51\xb5\x56\x2e\x66\xb5\x16\xd8\x6c\x20\x55\xe4\x09\x92\xac\x4a\xc8\x69\x7c\x05\x96\x19\xfd\x68\xf0\x44\x2c\x29\x22\x13\x5c\xf9\x56\x47\xc8\x39\x05\xcc\x46\x46\xa8\x44\x09\x4d\x90\x4e\xa9\x9b\x96\x18\x59\x00\x50\x60\x42\xdb\xaf\x47\x48\x5a\x2d\x78\xa4\x64\x55\xd5\x0a\xe7\xb2\x95\xfc\xfd\x8f\x51\x92\x72\x2f\x15\x14\x07\xd9\x91\x92\x46\xf6\xc3\xed\xf2\xee\x7e\x75\x7d\xb3\xbc\x47\x9b\xc7\xa4\xf2\xa1\xae\xe3\xf5\xbe\x6d\xb0\x8f\xb7\xab\xc5\xcd\xa7\x25\xfa\x79\xf1\x15\x4d\xdb\xee\x98\xb9\x2d\xb8\x5a\x7c\x5c\xac\x16\xcb\x0f\x8b\xbb\xba\xb7\xd1\xb4\x6e\xea\x26\x23\x3e\x6b\x55\x92\x4c\x8e\x42\x06\xed\x3c\x86\x6d\xba\xe9\x9e\xea\x4c\xcc\x3a\x83\xa7\x64\xe4\xaf\x12\x10\x61\x19\x3c\x9b\x03\xaf\x32\x9d\x94\xe6\x0d\x67\x07\xc7\xab\xf7\x03\xb2\x7a\xa2\x78\x44\xf5\x6b\xdf\xb8\x13\x9c\x42\x22\xcb\xf5\x9f\x90\xaa\xe3\x66\xb6\x2d\xf9\x7d\x47\x76\xe5\x89\xee\x4e\xce\xbc\x21\x0c\x05\x61\x44\xfd\x31\xd8\x51\x46\x1b\x67\xc4\x13\x18\xe8\xd5\x68\x7e\xa5\x03\x0a\xb4\x90\x1d\x66\x1d\x4c\xa0\xac\xed\x78\x23\x9d\xe4\x94\x4d\xa7\xac\x6f\x96\x77\x8b\xd5\x3d\xba\x59\xde\xdf\xba\xc7\xd7\xc0\x7e\xbb\xfe\xfc\xeb\xe2\x0e\x4d\x27\x19\xcb\xae\x40\x82\x52\x84\xe5\x93\x80\xb0\xf1\xda\xc8\xce\x51\xc7\xbd\x83\xa6\x02\x33\x9c\xc3\x64\x8e\x3a\x3a\xe7\x87\x10\xa6\x13\xbe\x63\x20\xe2\x90\x27\x02\xbb\x3e\xa2\xe7\x98\xbf\xa9\x0f\xce\x6c\x05\x79\xc2\x0a\x5c\xd5\x98\xed\x75\x2b\xba\x2f\xb7\xe5\x9a\x92\x74\xe2\x2b\xea\xca\x85\xa4\xf6\xa1\x2d\x6b\xe7\xb5\x66\x26\x11\x4a\xe2\x62\x87\xb9\x49\x87\x61\xb4\x7b\x3c\xcc\x27\x5e\xb3\x70\x51\x9f\x48\x58\x2e\x34\x4b\xd5\x7a\xfa\x0c\xa2\xb3\xa5\xdb\x3d\x1d\x15\x8f\xac\xe7\x76\x59\xc6\x17\x63\xbb\xe0\xe2\x6b\x30\x88\xeb\xac\xe8\xa0\xdd\x82\x67\x25\xf5\x2d\x73\x0b\x93\x81\x4c\x05\xd9\xaa\xc3\x41\x7a\x74\xf9\xa6\x84\x5b\x2f\x6f\xb6\x71\x3b\x66\x4f\xbc\x7a\xfd\x2b\xc4\xf5\x01\x4b\x49\x72\x56\x00\xb3\x56\x62\xa8\x39\xbe\x7f\x6f\xf8\x6a\xdb\xd3\x1b\x9d\x9f\x32\x3d\xf1\x79\x74\xc0\x74\x61\xf6\x6c\xb6\x6b\x2c\x56\x62\xa1\x43\x76\x46\xd3\x2f\xab\x9b\x2f\xd7\xab\xaf\x26\xd3\xb5\xcf\xf3\x9e\x57\xb3\x51\x25\x6c\x99\xd0\x9a\x02\xe5\xd4\x14\xe7\x6b\x56\xb1\x65\xb9\x7e\x15\x30\xde\x0b\x2c\xec\x85\xbb\x11\x3c\xa2\xc7\xf9\x65\x65\x30\xc6\x05\x0c\x62\x88\x0a\xd4\xec\xab\xc3\x04\xfc\x5d\x56\xe8\x0d\xa5\xa7\xe7\x7e\x0b\xde\xfe\x8a\x76\xd6\xc9\x7a\xea\xb8\x6e\xea\x30\x64\xab\xf2\x23\xab\xd8\x8e\x7c\x60\x1f\x87\x53\xe9\x28\x39\xc5\x90\x8e\x4e\x48\xf2\x0d\x92\x14\x2b\xc8\xb9\xd8\xff\xbf\x92\xe7\x84\x3e\x82\x4d\xc9\x2d\x4e\xc1\x6b\x24\x3e\xbb\x1c\x33\x6f\x9d\xdf\xba\xb8\x4c\x66\xed\x85\xd0\x54\xdd\x61\x81\x0c\xf2\xce\x46\xe2\x05\xbc\xd3\xb6\x10\x67\x9f\xf5\xf9\x9e\x76\xcf\x76\xdc\x19\xc5\x44\x7b\x6b\xd4\xaf\x24\xc4\xfe\x9c\xba\xe9\x71\x4a\x5e\x8a\x14\xa4\x0f\xed\x61\x96\x3d\xa6\x1a\x45\x53\xcc\xf2\x12\xe7\x5d\xed\x01\x34\xb0\x27\x22\x78\xb5\x4f\xe4\x30\x9a\xc8\x84\x42\x0e\x2c\xd3\xe9\xb7\x0e\x76\x0c\x47\xdf\x60\x2a\xc1\xa2\xf9\xf5\xc5\x87\x9b\xa1\xa3\x15\xd9\xb3\xd4\x77\xee\xad\xef\x98\xd6\x7b\x33\x90\x21\x2b\x3b\x76\x03\x47\x91\x05\xa1\x94\x24\xe9\x03\xa6\x14\x58\x0e\x89\xc0\xba\x58\x7c\x75\x8f\x45\xc1\x45\x92\x52\x2c\x9d\xbc\x34\x97\xac\x16\xf2\x81\xa8\x64\xcb\x89\x9b\x0f\x2f\xb2\xf7\x2b\x21\x1c\x91\x12\x89\x4c\xb9\xe8\x1c\xb7\x57\xe7\xf3\x48\x24\xd1\xcc\x68\x14\x72\x47\xe4\x48\x64\xca\xd9\x58\xe4\x03\x1e\x81\x1c\xde\xc1\x6f\xfc\x1b\xa9\x31\xfb\x9f\xa0\x94\x8d\x33\x9e\xb5\x15\x70\xcc\xc1\x0c\x7b\xe5\x50\x8d\x9a\x59\x8e\xf0\x47\xf7\x72\xc0\x01\x1b\x32\x68\xdf\xa1\xa9\xfe\x9b\x5b\x73\xcb\xea\xcd\x0d\xe2\xcc\xfd\xd0\x3f\xdc\x79\x6f\xb5\x8e\x55\x9e\x54\xfb\x62\x8c\x85\xca\x6b\x44\x58\x4a\xcb\x0c\x1a\x40\xc0\xa0\x43\x04\x9a\x3d\xd0\x67\x02\xcd\x97\x51\x97\x4f\x07\xf0\x4b\x58\xc0\x88\x5f\xd8\x27\x5f\xfd\x2f\x26\x96\x8d\x7f\x47\x50\xbf\xc3\x61\x9d\x92\xf5\xd9\xf7\x98\x91\x4e\x9b\x1b\xfe\x6a\x5f\x6b\xde\x13\xb6\x9f\xcc\xd1\xe4\xfd\x3f\x7f\xa3\xf5\x1e\xe9\x3f\x1b\xf5\x83\x7b\xa1\x79\x57\x60\x4a\x35\xe8\x4a\x43\xae\xfa\x80\x2f\x90\x91\xb2\x88\x21\x3e\x63\x61\x6e\x72\x2f\x2f\x34\xe2\xf2\xa2\x0f\xf9\xa9\xac\x11\x95\x8e\x4b\x8f\x92\x4f\x58\xe4\x98\xa9\x12\xb3\xca\xe3\x4a\xd3\xfb\x4a\x13\xe2\x02\x51\x6d\x42\xd4\xd7\xae\xff\x06\x00\x00\xff\xff\x94\x39\x8c\x8f\xc5\x1e\x00\x00")

func _0000001_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000001_initUpSql,
		"0000001_init.up.sql",
	)
}

func _0000001_initUpSql() (*asset, error) {
	bytes, err := _0000001_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000001_init.up.sql", size: 7877, mode: os.FileMode(0666), modTime: time.Unix(1646536904, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x50, 0x41, 0xed, 0xbd, 0x45, 0x76, 0xb7, 0x9d, 0xda, 0x1d, 0x2b, 0x95, 0x78, 0x41, 0x54, 0x3b, 0xea, 0xb9, 0xa2, 0x5e, 0xcc, 0x32, 0x10, 0x36, 0xbc, 0x77, 0x71, 0xb, 0xb9, 0x61, 0xc8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000001_init.down.sql": _0000001_initDownSql,
	"0000001_init.up.sql":   _0000001_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000001_init.down.sql": {_0000001_initDownSql, map[string]*bintree{}},
	"0000001_init.up.sql": {_0000001_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
