// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (2.38kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.001kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x41\x8f\x9b\x3c\x10\xbd\x47\xca\x7f\x18\xed\x05\x90\x72\xf8\x2e\xdf\xa9\xa7\xd5\x8a\xad\xa2\x56\xac\x94\xa4\x95\xaa\xaa\x42\x06\x26\xa9\x1b\xb0\x29\x1e\x27\x4b\x7f\x7d\x85\x4d\x00\x27\x90\x4d\xa4\x56\xf5\x0d\xe3\x37\xf3\xde\xcc\xbc\x49\x2b\x64\x84\x40\x2c\xc9\x11\x1e\x52\x59\x14\x52\xc4\x2c\x4d\x51\xa9\x87\xf9\xcc\x9f\xcf\x00\x00\x04\x2b\x10\xec\x21\x7c\x25\x7b\xd9\x9c\x54\x0a\x45\x15\xe3\x82\xc0\x81\xc6\xe5\x1e\xca\x8a\x17\xac\xaa\x61\x8f\xf5\xc2\x22\x6c\xae\x2c\x66\x04\xc4\x0b\x54\xc4\x8a\x12\x8e\x9c\xbe\x4b\x6d\x6f\xe0\x97\x14\x08\x19\x6e\x99\xce\x09\x7c\x21\x8f\x7e\x00\x6c\xf8\xcf\xd3\x94\x7a\x01\x08\x49\x20\x74\x9e\xcf\x67\xc1\xbb\xf9\x6c\x3e\x73\x55\x68\x85\x55\x4f\xbe\xf9\x8a\x79\x76\xa2\x9c\xf0\x1d\x17\xe3\x12\xcc\xcb\x72\xdf\xff\x6b\xce\xa5\x0c\xad\xfb\x68\x97\x9f\xce\x39\xf1\x3c\x2b\x40\x52\x0f\xa8\x4c\x20\x2f\x51\xcc\x3e\xbd\x56\xba\xee\xdc\x51\xc3\x36\xcb\x01\x2b\xc5\xa5\x70\xcb\x74\x5d\x55\x9f\xe5\xbf\xa0\x8d\x82\xdb\x2d\xa6\xc4\x0f\x18\x67\xa6\x21\x7f\x87\x2b\x8a\xcc\xc6\x87\x37\x2b\x32\x40\x71\x15\x33\xc3\xad\x55\x28\x65\x8e\x4c\xdc\xa8\x90\x2a\x8d\x27\x91\xce\xa8\x5b\x4b\xdc\x38\x00\x58\x30\x9e\xf7\x7f\xef\x40\x0e\x2c\x78\x27\xd2\x4c\x35\xb1\x9d\xea\x91\x5f\xbf\xdd\x84\x54\xb5\x22\x2c\x3a\xec\x8d\x48\x8b\x7d\x7a\x89\xd6\x9b\xd5\xe3\x32\xda\xc0\x76\x1f\x1b\x0e\xed\x1c\x27\x75\x6f\xb0\xe7\x97\x55\xb8\x7c\x1f\xc1\x87\xf0\x0b\xf8\xbd\x3b\x02\xd7\x82\xab\xf0\x39\x5c\x85\xd1\x53\xb8\x6e\xbd\x0d\x7e\x6b\xea\x53\x47\xc6\xb2\x99\x26\xd9\x1e\x4d\x25\x1c\xf6\x71\x3a\xa7\xdb\x6e\xbf\xe9\x44\x70\xb6\x78\xb4\xe0\x3f\x35\x02\x17\x19\xbe\xda\x82\x9b\x4e\xc7\xda\xde\x48\xd1\x11\x37\xf7\x6f\x60\x9b\x8d\x32\x02\x6d\xae\xc7\xd6\x5d\x25\x73\x8c\x95\x4e\x7e\x60\x4a\xf7\xed\xec\x21\xf2\xdf\xae\x6c\xc3\xa4\x71\xa7\x14\xa3\x12\xde\x12\x61\xa1\xe3\x1a\x86\x2a\xaf\x1a\xe7\x86\x33\xb1\xd0\xcd\x6a\xfe\x43\x05\x9a\xb0\xd0\x50\x66\x2b\x66\x62\xac\x87\x7a\xaf\x38\xc9\x19\x9b\xb3\xb1\x5e\x46\xeb\x70\xb5\x81\x65\xb4\x79\x71\xcb\x77\x7a\xf6\xf9\xf1\xe3\xa7\x70\x0d\xbe\x97\x89\xec\x7f\x54\x48\xc4\xc5\xce\x9b\x00\x5b\xd6\x16\xbb\x80\x33\x7a\x5d\xa4\x82\x09\xb6\x43\x6f\x01\x67\x31\x17\x9d\x04\xdf\x93\x47\x81\xd5\xf5\x27\x07\x8e\xc7\xcb\x17\x17\xc4\xc6\x4d\xdd\x91\x29\x2b\x7e\x60\x84\x6e\x68\x26\xea\xc6\x8a\xee\x65\xa9\x93\x9c\xa7\x26\xc3\xef\x00\x00\x00\xff\xff\xcd\x9c\x5f\x72\x4c\x09\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 2380, mode: os.FileMode(0666), modTime: time.Unix(1644724533, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xb6, 0x22, 0x8a, 0x14, 0x45, 0x28, 0xd7, 0xd, 0x84, 0xf9, 0x94, 0x77, 0xa9, 0xa8, 0xa5, 0xc3, 0xa1, 0xbd, 0xa5, 0x39, 0x61, 0xa3, 0x81, 0x43, 0xd0, 0xe7, 0xef, 0xf9, 0xf2, 0xc6, 0x8e}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xdd\x4a\xe4\x4a\x10\xbe\x17\x7c\x87\x62\x6e\x92\xc0\x70\x50\xc1\xab\x73\x25\x12\x3d\xc3\xd1\xf1\x30\x33\x67\x41\x96\x25\xf4\x24\x65\x6c\xec\x74\x86\xa4\xa3\xc6\x77\xdb\x9b\x7d\xb2\xa5\xf3\x33\xe9\x9e\x74\x67\xa2\xec\xc8\xc2\xe6\x42\x21\xfd\xa5\xea\xeb\xaa\xaf\x7e\x26\xcc\x90\x08\x04\x41\xd6\x0c\x61\x12\xf1\xe8\x1c\x83\x1c\x85\xa0\x3c\x9e\x1c\x1f\xb9\xc7\x47\x00\x00\xda\xeb\x80\x46\x50\x3d\x6b\x1a\x53\x2e\x6a\x84\x7c\xc2\x94\xe7\x22\x23\x94\x8b\x9d\x0f\x36\x4f\x1d\x48\x3e\x9b\x8c\x26\x24\x2b\xe1\x09\xcb\x69\x7d\x52\xb3\x88\x82\x75\xd9\xa1\x6a\xf3\x00\xbc\x60\x6c\x07\x46\x44\x07\x13\x34\xc1\x5c\x90\x64\x03\x2f\x54\x3c\xa6\x85\xa8\xde\xc0\x5b\xca\x11\x22\x7c\x20\x05\x13\xe0\xf2\xf4\xc5\xf5\x80\xa8\x67\x4e\x21\x42\xc7\x03\x9e\x0a\xd5\xc3\x33\x66\x39\x4d\xb9\xca\xb6\x23\xd2\x40\xd5\xb3\xad\x87\x13\xaf\xb1\x40\xf3\x80\x84\x82\x3e\xa3\x6a\x21\x4d\x19\x12\x3e\x6c\x41\x64\x05\xb6\x46\xc2\x34\x49\x52\x1e\x90\x30\xc4\x3c\x6f\x2f\x8a\xaf\xd5\xb5\x77\x18\x17\x39\x66\x81\x20\x71\xae\xd8\x94\xd0\xaf\xdf\x7a\xd0\xbc\xcc\x05\x26\x3a\xd8\x02\xe5\x24\x41\xd8\x79\x2c\x04\x92\x34\x2a\x18\x5a\xa0\x1d\x2c\xc2\x3c\xcc\xe8\x46\xa8\xd1\x35\x58\xac\xc1\x97\x77\xf3\xe5\x6a\x71\x31\x9b\xaf\xe0\xe1\x29\xd0\xd5\xd4\x88\x60\x5d\x76\xa2\xba\xba\x5b\xf8\xb3\xeb\x39\xfc\xeb\xdf\x83\xdb\x69\xc9\xd3\x65\xb7\xf0\xaf\xfc\x85\x3f\xbf\xf4\x97\x30\x91\x51\x9b\x80\x5b\x05\x8f\x46\x6d\xd8\x07\xdd\x56\x29\xa9\x33\x62\xf3\xac\x66\xcd\xee\x5c\x4f\xae\x2b\x43\xed\xc9\x8b\x7b\x7f\xcb\xbf\x03\x05\x19\x90\x3c\xa7\x31\x4f\x90\x8b\xae\x36\x77\x4a\xa7\x11\xab\xbd\x68\x0e\x5a\x2f\xad\x77\x83\xce\x0d\xa5\xd2\x44\xdf\xf2\xf1\xd4\xd2\x7b\xcc\xb0\x2c\x65\x58\x15\x5e\x4d\xa6\x51\xd6\x90\xb0\x6c\xa1\xd5\xda\xd5\x7f\x8b\xd9\xed\xc5\xe2\xbe\xce\x6f\xc3\x77\xda\xe3\xe4\x8d\x12\xae\xe2\x42\x5a\xb2\x88\xa8\x95\xe4\xaf\xd4\xae\xe2\xb9\x79\x65\x71\xde\xbb\x98\x9d\x85\x3e\x2a\x0c\x9f\xbe\x8f\x97\x92\x3f\x0b\x37\x05\x31\x40\x4b\x41\x4d\xb6\xb5\x55\x57\x96\xb9\xb6\x12\x39\xb5\x64\x0b\x2d\x37\x68\xac\xaa\xc1\x8a\x3a\x58\x35\xbd\xaf\x92\x94\x76\xbd\xa3\xfc\x81\xf1\xac\xde\x7c\xcf\x8c\xb6\xa7\x52\x33\x72\x88\xd6\x3c\xd8\x17\xe9\x1b\x06\x21\x11\x18\xa7\x59\xf9\x67\x25\x4f\xbb\xfa\x88\x0d\x2b\xdf\x90\x10\x8d\x4e\x86\x7b\x97\xe6\xe6\xb3\xf3\xdb\x88\xab\xce\xac\x3a\x0e\x5a\xd5\x6d\x87\xc7\xde\x5d\xb4\xfd\xe2\x63\xbb\xe8\x98\xc1\xda\x3e\x87\x5f\x48\xdf\xad\x30\xf3\xfe\x6e\xbc\x94\x69\xf1\x33\x6a\x06\x2c\xbb\x67\xb7\x53\x8e\xd8\x3e\xad\x60\xb5\xad\xec\xa5\x41\x58\x33\x45\xc6\x70\xd6\x14\xbd\x0f\x9c\x50\xc6\x68\x10\x3e\x12\xc6\x90\xc7\x18\x64\x44\x46\xd0\xb2\x82\x30\xc2\xe3\x82\xc4\x38\x2a\x1a\xa6\x75\xd8\x52\x9b\xfb\x9b\xef\x27\xaf\xc4\xad\xdb\xdf\x62\x97\x68\xc9\x18\xfa\x95\x85\x98\x86\xd9\xcf\x4a\x9b\x31\xcd\x4a\x31\x82\x8f\x54\xae\x85\x80\x0a\xd9\xeb\x5f\xdb\x4f\x76\x36\x9a\xa6\x67\x52\x1e\xe1\x2b\x18\x73\x03\x29\xd7\x0f\xfa\xc1\x9d\xf6\x7a\xea\x58\xe3\x41\xd5\x2c\xc6\x78\xa8\x58\x03\xe5\x21\x2b\x22\x6c\x01\x16\x87\xda\x04\x68\x6b\xaa\x3f\x02\xda\x93\xee\x27\xc1\x40\xf7\xdf\x82\x3f\xd2\xfe\xc7\x74\xfe\x43\x37\xfd\x0f\x6f\x14\x03\x7d\xc5\xa6\xe0\x6d\xb0\x0e\x39\xee\x67\xf3\xa5\xbf\x58\xc1\x6c\xbe\xba\x1b\xaa\xb4\x69\xbd\xb8\x78\xc7\x47\x5f\x2e\x6e\xfe\xf7\x97\xe0\x3a\x2b\xca\x4b\x67\x0a\xce\xd9\x8f\xef\xb0\x2e\x41\xfe\x7b\x10\x7f\x39\xed\xdd\x01\xc0\x75\x96\x09\x61\x4c\x82\xce\x25\xe4\xbc\x0f\xb8\xc5\x88\x16\xc9\x10\xe2\x86\x64\x31\x4a\xc0\xe9\x89\x44\x9c\x9e\xf4\x21\xff\x14\x0d\xa2\xb2\x71\x6a\x30\x72\x4d\xb2\x98\x70\x51\x10\x5e\x31\xae\x2c\x9d\x55\x96\x20\xcd\x80\x49\x17\x99\x53\x07\xe4\x67\x00\x00\x00\xff\xff\x65\xcc\x10\x41\x89\x13\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5001, mode: os.FileMode(0666), modTime: time.Unix(1644724541, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0x9c, 0x86, 0xcf, 0x2a, 0x39, 0x7f, 0x17, 0xd7, 0x59, 0xaa, 0x12, 0x27, 0xd8, 0xb8, 0x22, 0xda, 0x84, 0x2c, 0x79, 0xff, 0xe3, 0xa5, 0x1f, 0x4b, 0x76, 0xfe, 0xf2, 0xe4, 0xd3, 0xd6, 0x6b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
