// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0_init.down.sql (0)
// ../migrations/0_init.up.sql (8.041kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_initDownSql,
		"0_init.down.sql",
	)
}

func _0_initDownSql() (*asset, error) {
	bytes, err := _0_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x8f\x9b\x46\x10\xfe\x6e\xc9\xff\x61\x64\x45\x02\x2a\x22\x35\xa7\x4a\x51\x1d\xe5\x24\xcb\xe5\xae\x56\xaf\xb8\xc5\xbe\xbe\xa8\xaa\xd0\x1a\xc6\x3e\x62\x58\x7c\xec\x92\x8b\x9b\xe4\xbf\x57\xcb\xf2\xb2\xe0\x60\xfb\xae\xd8\xad\xaa\xe3\x1b\xec\xee\xbc\xcf\xf3\x0c\xeb\x25\x48\x38\x02\x27\x8b\x10\x61\x90\x32\x4c\x06\xfd\x9e\xde\xef\x01\x00\x88\x37\x37\xf0\x21\x7f\x16\xc1\x2a\xa0\x5c\x2e\x89\xc7\x8b\x29\xe3\x09\x09\x28\x97\x3b\x37\xeb\x6a\x4d\x3c\x9b\x24\x88\x48\xb2\x85\x35\x6e\xcd\x5c\x60\x5a\x49\xdb\x7d\x7d\xec\x43\x63\x0e\x34\x0d\xc3\x5c\xb8\xf4\xc4\x77\x17\x5b\xc5\xda\xa7\x0b\xdf\x15\x4c\xa4\x34\x1e\x44\xc8\x38\x89\x36\xf0\x10\xf0\xbb\x38\xe5\xd9\x17\xf8\x2b\xa6\x08\x3e\x2e\x49\x1a\x72\xd0\x69\xfc\xa0\x1b\x40\xd4\x35\x2d\xe5\x9e\x66\x34\xad\xc6\xe5\x12\x3d\x1e\xbc\x47\xd7\xcf\xf2\xd0\xad\x70\xea\x4b\xb1\x70\xd0\xf2\xc7\x85\x24\x60\x2e\xc9\xac\x96\x2b\x8b\x38\x0e\x91\xd0\x27\xc7\x3a\xb7\xba\xf2\x90\x27\x29\x1a\x85\x13\x11\x09\xc2\x6a\x33\xc7\x0f\x4f\xcf\xea\x4e\xd1\x50\x12\xa9\xbe\x77\x2b\x9c\x93\x15\x6b\x08\xff\xe3\xcf\x2e\x84\x4b\xf1\xe3\xa9\x3d\x9b\x3b\xa3\x89\x3d\x87\xe5\xda\xcd\x5a\x30\x2f\xd5\xc5\xb6\xea\xc4\xab\xa9\x63\x4d\xae\x6d\xf8\xc1\xfa\x1d\xf4\xaa\x47\x8c\x7a\xaf\x3a\xd6\x95\xe5\x58\xf6\xd8\x9a\xe5\x20\x00\x7a\xde\xfd\x46\xbf\x67\xbc\x11\x2a\x73\xa4\x48\x69\x70\x9f\x22\x04\xd4\xc7\x0f\xb2\xef\xb3\x04\xb9\xa9\xfc\x12\xd3\x52\x40\xf6\xbd\x76\x36\x47\x99\x24\x0e\xd1\xe5\xdb\x0d\x56\x50\x53\x7e\x72\xbf\x00\x09\x7b\x80\xa7\x3a\x77\x18\x7d\x1a\x7d\x5c\x7f\xba\x6d\xbc\x46\x59\x35\x54\x75\x5a\x64\x51\x1a\xf2\x60\x13\xa2\x4b\x18\x0b\x56\x34\x42\xca\x99\x4b\xc2\x30\x7e\x40\xbf\xab\xc6\xcc\x55\xb1\x2d\xe3\x18\xb9\x11\xa1\x64\x85\xcd\x34\x75\xa4\x6a\x5f\xb5\x89\x64\x67\xb9\x16\xe1\x55\x0b\xae\x2a\x28\xd0\xc5\x5a\x5b\xd1\x35\xea\xed\x28\x6a\xcb\x76\x1e\x5f\x5c\xcf\xec\xf3\xff\x62\x9f\x93\x12\x44\x03\xf5\x64\xd1\xfc\x1b\xe4\x91\x19\x52\xb4\x57\x0b\x77\xa8\xc6\xb6\xb3\x47\xb9\xab\x71\xc0\x6c\x55\x7b\x06\xce\x52\x79\xa7\x82\xc9\x06\x1a\x54\x0b\x22\x1b\x87\x10\x41\xd9\xfd\x68\x70\x80\x53\x02\x04\x9c\x1a\x24\x4e\xa0\xa0\x0e\x14\x87\x14\x3c\x2e\x3c\x0d\xb0\x80\x53\x03\x46\x83\x59\xa0\x83\x5c\xd7\xa3\xd5\xf8\x2b\xeb\x5e\x41\x03\x79\xe0\x2c\xe8\xa3\xf4\x93\x78\xdd\x87\x41\x87\xe0\xa7\xda\xd6\x0a\x3a\x8a\x36\x11\xce\x16\x6d\x15\x9a\xb4\x68\x6b\xc2\xce\x31\xfa\xce\x0d\x77\x1e\x0f\x62\x5a\x41\x9d\xc2\x67\x22\xa9\x7b\x00\x2e\x3b\xe8\x6e\xd6\xfb\x27\xe9\x8e\x90\x60\x8f\x07\x2c\x5d\xbc\x43\x8f\x3f\xc1\x85\xfc\xe4\x7f\xc0\x87\x0d\x26\x51\xc0\x58\x2d\x13\x8d\x85\x63\x48\x47\xd9\xfd\x4c\x3a\xcf\xa4\x73\x46\xd2\x91\x68\x50\xdb\xd1\xed\x28\x9c\xf7\xea\xc9\x15\xa8\x51\xea\xb0\x1d\x62\xea\x07\x22\x42\x15\x71\xbe\x63\x31\x5d\x74\x66\xfd\x32\xc0\xd0\xaf\xb3\xf2\x3f\xe5\xe4\xfd\x7c\xac\x40\xcd\x19\xf8\x58\xd1\x26\x2b\xad\x45\x9f\x5c\x3c\xf0\xf7\x91\xd7\xaa\xbc\x09\x38\x46\x65\x5e\x1a\x2d\x3a\xf3\xd5\x03\x4a\x8b\xfa\x3d\xa0\xf5\xe4\x83\x40\x41\x42\x13\x7b\x66\x39\x73\x98\xd8\xf3\x69\xdb\x3f\x99\x99\x31\xa9\xb9\xf7\x06\xc9\x6c\x5c\xfa\x18\xfd\xde\xcc\xba\xb1\xc6\x73\x78\x65\x82\x76\xcb\x30\x01\x27\x0e\x51\x33\x61\x49\x42\x86\x26\x08\x54\xea\xf7\x7e\xfd\xde\x72\x2c\xb0\xa7\x73\xb0\x7e\x9b\xcc\xe6\x33\xbd\x38\x04\x57\xce\xf4\xc7\xda\x85\x8d\xdc\x9a\x71\xfa\x5b\x55\xe2\x99\xdc\xb8\x50\xdd\x30\xe1\x3a\x8c\x17\x24\xd4\xa4\x1f\xdd\x79\x53\x0a\x96\x5e\x8d\x1d\x6b\x34\xb7\x60\xea\x80\x63\xfd\x74\x33\x1a\x5b\x70\x75\x6b\x8f\xe7\x93\xa9\x0d\x2b\x94\x23\xa9\xab\xba\xa8\x1b\xe0\x58\xf3\x5b\xc7\x9e\x95\x23\xc2\x68\xd6\xef\xbd\x78\x51\xba\xa1\xee\xee\xf7\x9a\x66\x15\x2e\xec\x46\x59\x0a\x11\x55\x75\x33\xb2\xaf\x6f\x47\xd7\x16\xcc\x7e\xbe\x79\x9c\x91\xab\xcc\xb5\x93\xdb\x5a\xc6\x70\x8f\xcd\xad\x77\xd4\x69\x1a\xf8\xf9\x8d\xa1\x3c\xaa\xdc\x53\x8b\xb5\xda\xe4\x16\x27\x90\xe0\x26\x24\x1e\xc2\x32\xa5\x12\x4d\x56\x48\x31\x21\x1c\xdd\x35\x4b\x85\x93\x39\xef\x22\x4f\x13\xca\xc0\xbb\x23\x89\x7e\xf1\x3a\xff\x1a\x12\xba\x4a\xc9\x0a\x81\xdd\x87\xfd\x1e\x61\xd2\x60\x86\xa1\x00\x08\x96\x2e\x18\x4f\x02\xba\xd2\xeb\x5d\x9d\x49\xcb\x94\xea\x3c\x76\x33\x81\x5e\x18\x7b\x6b\xb7\x9c\x4a\x74\xc3\x04\x6d\xbb\xdd\x6e\xa3\xc8\xf7\xef\xee\x2e\xbe\x11\xf8\x95\x32\xcd\xd8\x11\xa4\x3e\x9f\x3e\x41\x29\x30\x21\xd4\x8f\x23\xdd\x80\xaf\xe0\x15\x7e\x6b\x82\xf6\x75\xf1\x1c\x10\x22\x34\x83\x66\x82\xa6\x19\xa6\xe8\xfc\x8b\xd7\xc6\x70\x58\x38\xfd\x46\xf8\xf7\xc5\x6e\x2d\x91\xbf\xe8\xd1\x7a\xdf\x8a\x1f\x4d\xa3\xdf\xfb\x65\x74\x73\x6b\xcd\x40\x7f\xd5\xd2\x8a\xfb\xab\xcd\x04\xed\xe3\xe7\x36\xb4\xa8\xa3\x72\xa5\x4a\x13\xf2\xb2\x43\x3b\x47\x6a\xec\xa1\x9c\x90\xc8\xd1\xa6\xa8\x62\x13\x7d\x77\xae\x37\xa1\x0c\x83\x94\x6e\x16\xd3\x88\xa9\x4c\x0e\xf5\x48\xe8\x6a\xb3\x04\xbe\x82\x34\x47\x80\x8c\x09\x85\xb9\x26\x48\x57\x45\x94\x44\x86\x07\x39\x53\x0c\x86\xf0\x51\x66\x7c\x10\x6f\x06\x43\x18\xe0\xfd\x20\x27\xad\x41\x36\x6b\x88\x6f\x0c\x0b\x0f\x06\x62\xe9\x73\xbf\x57\x04\x7a\x4f\xa3\xe0\x7b\x12\xa6\xa2\x51\x88\xe7\x21\x63\x59\xe6\xf4\xd2\x4b\x39\x16\x99\x50\x89\x2e\x6e\x3d\xcb\x7b\x0d\xf9\xde\x68\xb0\x7c\x7a\x3e\xa2\xbf\x14\x5d\x2f\x2f\x41\x0b\x7c\x0d\x5e\x5e\x5e\x82\x26\xcc\x42\xcd\x18\x0e\xf3\xa9\xef\x6d\xa1\xb0\x56\xf8\x53\x07\xf4\x36\x09\x59\x5c\x34\x43\xc4\xbc\x32\x5f\xab\x8e\x8f\xec\xef\x4a\x27\xde\x2a\x1e\x1a\x59\x7f\xfc\x1d\x00\x00\xff\xff\x0f\x68\xd3\x40\x69\x1f\x00\x00")

func _0_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_initUpSql,
		"0_init.up.sql",
	)
}

func _0_initUpSql() (*asset, error) {
	bytes, err := _0_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_init.up.sql", size: 8041, mode: os.FileMode(0666), modTime: time.Unix(1635574118, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x2f, 0x75, 0x6d, 0xf, 0x99, 0x60, 0xc5, 0xe8, 0x1c, 0xc, 0x14, 0x9f, 0x16, 0x76, 0x7e, 0x83, 0x2a, 0xbe, 0x7b, 0xcf, 0xb4, 0xe0, 0x27, 0x23, 0xf6, 0x76, 0x42, 0xf9, 0xde, 0x3f, 0x10}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_init.down.sql": _0_initDownSql,
	"0_init.up.sql":   _0_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0_init.down.sql": {_0_initDownSql, map[string]*bintree{}},
	"0_init.up.sql": {_0_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
