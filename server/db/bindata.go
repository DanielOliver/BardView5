// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (2.993kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (6.054kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4b\x8b\xdb\x30\x10\xbe\xe7\x57\x0c\x7b\xb1\x03\x39\xf4\xd2\x53\x4f\xcb\xe2\x2d\xa1\x25\x0b\x49\x5a\x28\xa5\x18\xd9\x9e\x6c\xd5\xd8\x92\xab\x47\xb2\xee\xaf\x2f\x96\xfc\x92\x5f\xf1\xc2\x96\xce\xc9\x96\xf4\x49\xdf\x3c\x3e\x8d\x62\x81\x44\x21\x28\x12\xa5\x08\x77\x31\xcf\x32\xce\x42\x12\xc7\x28\xe5\xdd\xca\x5f\x01\x00\x30\x92\x21\x58\x53\xf8\xa2\x56\xd5\x37\xc4\x9c\x49\x25\x08\x65\x0a\x1c\x5c\x98\x9f\x21\x17\x34\x23\xa2\x80\x33\x16\x1b\x03\xb0\xe7\x24\x21\x51\xa0\x68\x86\x52\x91\x2c\x87\x2b\x55\x3f\xb9\xb6\x23\xf0\x87\x33\x84\x04\x4f\x44\xa7\x0a\x7c\xc6\xaf\xfe\x1a\x48\x77\xce\xd3\x2a\xf6\xd6\xc0\xb8\x02\xa6\xd3\x74\xb5\xfe\xb0\x5a\xb9\xf4\xb5\x44\x51\xb3\x2e\xbf\x43\x9a\xd4\x64\x23\xfa\x4c\xd9\x28\x77\xb3\x30\x3f\x37\x53\xa5\x0d\xe8\x6b\xdd\x6e\x35\xfc\x75\xac\xe6\xe7\xfa\x1d\x15\x1d\x1a\x13\xc0\x01\x88\xd8\x95\x73\x01\x6b\xec\x15\x91\xb3\x87\x5c\x50\x48\xca\x99\x1b\xa0\x79\x97\xda\x43\xde\xad\xed\x26\x78\x3a\x61\xac\xe8\x05\xc3\xc4\xe4\xe1\x9f\x30\x45\x96\xd8\xed\xe1\x66\x38\x5a\x10\x95\x21\x31\xcc\x2a\xf7\x38\x4f\x91\xb0\x85\xee\x29\xa1\xb1\xf2\xd0\x29\x6d\xab\x80\x65\x99\xc7\x8c\xd0\xb4\x9d\x5c\x0e\xec\xe8\xed\x75\x40\x53\xc9\x8a\x3c\xcb\x16\xf8\xfd\xc7\x12\xa0\x2c\xa4\xc2\xac\x81\x2e\x03\x1a\xe4\xc3\xd3\xee\x70\xdc\xdf\x6f\x77\x47\x38\x9d\x43\x43\xa0\x2a\xde\xa8\x68\x14\xf5\xf8\xb4\x0f\xb6\x1f\x77\xf0\x29\xf8\x06\x7e\x2b\x88\xb5\x23\xb9\x7d\xf0\x18\xec\x83\xdd\x43\x70\xa8\x74\x0c\x7e\x25\xe1\x2a\x11\x63\x47\x99\xdc\xd8\xd4\x4c\x9c\xd6\xcd\xde\xe4\x81\x6e\x8e\xfd\x32\x01\xeb\xee\xf5\xa2\x19\xfd\xad\x11\x28\x4b\xf0\xc5\x46\xd9\x24\x37\xd4\x76\x84\xb3\x86\xb2\x19\x9f\x45\x96\x57\xc7\x08\xb0\x1c\x1e\x5e\x68\x82\xa7\x18\x4a\x1d\xfd\xc2\x58\xbd\xe2\x3a\xee\xc2\xfe\xdf\x6d\x6c\x58\x94\x1a\xe4\x6c\x84\xfb\x0d\xf6\x16\x37\x4a\xbe\xeb\xdd\xac\x3a\x16\xd8\xf8\x65\x6d\xee\xdd\x37\x0a\xcc\xa8\x50\xba\x2e\x56\x9e\x8c\xd7\x6f\xd7\xd7\x69\xbd\x38\x65\xd2\xad\xdf\xed\xee\x10\xec\x8f\xb0\xdd\x1d\x9f\xdc\xb0\x55\x6b\xbe\xde\x7f\xfe\x12\x1c\xc0\xf7\x12\x96\xbc\xc7\x2b\x17\x69\xe2\x8d\xe2\x2c\x57\x0b\xdb\x80\xcb\xaa\xd9\x24\x23\x8c\x3c\xa3\xb7\x01\x67\xbb\x4d\x4d\xdb\xf7\xf8\x95\xa1\x98\x99\xbf\x50\xbc\xf6\xa7\x7b\x6c\x46\xa5\xda\x30\xc8\x05\xbd\x10\x85\xce\xa6\x84\x15\xa5\xc6\x9c\xb1\x5c\x47\x29\x8d\xbd\x61\xcd\xe2\x8b\x42\xc1\x48\x1a\x4a\xae\x45\x8c\x75\xdd\xf6\x86\x9b\x77\xc5\xf4\xab\xa2\x8f\xb8\xf5\xc0\xe8\xbd\x13\x1a\xab\xda\xf2\xe4\xdb\xa0\xb1\x37\x2b\x57\x18\xbe\x0d\x06\x6c\xea\x86\xd9\xb5\xe1\xdb\xa0\x17\x82\x33\x5a\xdf\x2a\xc9\xf6\xba\x65\x6f\x71\xcd\x60\x74\x71\xaf\xd1\xb5\x31\xb0\x8d\x6b\xb6\xb9\xcd\x2f\xee\xf5\x5e\x67\xf1\xad\xee\xd7\x77\xe1\xed\x1b\x61\xa9\xe9\xbf\x01\x00\x00\xff\xff\xbf\x5e\xdc\xe1\xb1\x0b\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 2993, mode: os.FileMode(0644), modTime: time.Unix(1642362056, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xc6, 0x35, 0x96, 0xf8, 0x1e, 0x79, 0x91, 0xc2, 0x45, 0x7a, 0x8e, 0x6e, 0x54, 0x37, 0xd8, 0x87, 0xb7, 0x55, 0x74, 0xfb, 0xf4, 0x1f, 0xa, 0x8, 0xd7, 0x1f, 0xd, 0x21, 0x7d, 0xa5, 0x54}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x0c\x7c\xb1\x0c\x18\x8b\xa4\x40\x4e\x7b\x0a\x0a\xb7\x6b\x6c\xeb\x2c\x6c\xef\x02\x45\x51\x08\xb4\x34\x56\x88\x50\xa4\x41\x52\x49\xd4\xff\xb6\x97\xfd\x65\x0b\x7d\x59\xa4\x44\x7d\x38\x88\xd3\x43\x74\x31\x20\x3e\xcd\x0c\x35\x6f\x1e\x9f\x15\x48\x24\x1a\x41\x93\x3d\x43\x98\x86\x3c\xbc\x41\xff\x49\x48\x16\x4e\x27\xde\x04\x00\xc0\xb8\xe5\xd3\x10\xf2\x6b\x4f\x23\xca\xf5\x04\xca\x2b\x10\x5c\x69\x49\x28\xd7\x16\xfa\xf8\x70\x42\x64\xd7\x51\xd2\x98\xc8\x14\x1e\x30\x5d\xe4\x0b\x45\xea\xd0\xdf\xa7\x35\xa8\x88\x0c\xc0\x13\xc6\x6c\x14\xd1\x35\x4a\xd3\x18\x95\x26\xf1\x11\x9e\xa8\xbe\x17\x89\xce\xef\xc0\x4f\xc1\x11\x42\x3c\x90\x84\x69\xf0\xb8\x78\xf2\xe6\x40\xcc\xb5\x59\xa2\x83\xd9\x1c\xb8\xd0\x46\x82\x47\x94\x8a\x0a\x6e\x96\x5a\x97\x51\x22\xcd\xb5\x53\x82\xab\x79\x11\x80\x2a\x9f\x04\x9a\x3e\xa2\x19\x40\x08\x86\x84\xf7\x07\xd0\x32\xc1\x32\x46\x20\xe2\x58\x70\x9f\x04\x01\x2a\x55\xed\x12\x9f\xf3\x3d\xdb\xe5\x26\x0a\xa5\xaf\x49\xa4\x8c\x88\x19\xf2\xfb\x8f\x26\x52\xa5\x4a\x63\x6c\x63\xdd\xc8\x10\x25\x7d\xc4\xd0\x3f\x48\x11\x17\xcd\x73\x75\x82\x93\x18\xa1\x71\xb9\x6b\x8c\x45\x98\x30\xec\x40\x1a\x59\x55\x20\xe9\x51\x9b\x2f\xdf\x1d\x0f\x9f\x35\x4a\x4e\x98\xaf\x44\x22\x03\xcc\x79\xd8\xae\xaf\x89\x7a\xc0\xb4\x91\x35\x87\x7d\xbc\x5b\x6f\x77\x9b\xdb\xd5\x7a\x07\x87\x07\xdf\x24\x6c\x49\xb5\x7d\x7a\xe2\xed\xa7\xbb\xcd\x72\xf5\x79\x0d\x7f\x2e\xbf\x81\x57\xf3\x75\x6e\x11\x7b\xb3\xfc\xb4\xdc\x2c\xd7\x1f\x97\x5b\x98\x66\xdd\x99\x82\x97\x37\x89\x86\x65\x73\x7b\x32\xe6\x6d\x2f\xba\xde\x91\xd4\x24\x46\x67\x5e\x9b\x3e\x5e\xd6\xa9\xc1\xdc\x66\xd3\xdd\xb9\xdb\xb4\xe8\xde\xb8\xa9\x1c\xe0\xd9\xa2\x31\x1f\x7c\xf3\x56\xa6\x46\x1f\xdd\xb5\xb5\x29\xd1\x5d\x5b\x03\x3b\x75\x3f\x3d\x99\xff\x3e\x99\x74\xca\xa1\x4f\x94\xa2\x11\x8f\x91\xeb\x4a\x19\x1b\xfa\x55\x12\xb2\x53\xb9\x2e\x29\x5a\x55\x6e\x87\xda\xb4\xf5\xaa\x24\x67\xc7\xb3\x0b\x97\xea\x3b\x31\x52\x30\xcc\x95\xaf\xa8\xa3\x1c\xb5\x1a\xd3\xec\xb9\xfb\x6d\x9a\xc7\xc4\x5f\x9b\xd5\xd7\xdb\xcd\xb7\xa2\xc3\x65\x99\x0b\x38\x97\x4c\x46\xec\x2c\x86\x9b\x3f\xd5\x84\xbe\xd6\x24\x1b\x49\xf3\x1b\x1d\x13\x65\x6f\xe5\xa5\xd3\x34\xba\x14\xa3\x45\xee\x82\x0c\x40\x77\x35\x06\x68\x5a\x8a\x4b\x3e\x2c\xce\x69\x89\x33\x33\x90\x1d\x51\xe9\x11\x1d\x93\xd2\x37\x25\x97\x9a\x90\xb3\xa6\xc3\x38\xe5\x1a\x8c\xee\xf6\x3b\xe6\x9e\x7b\x6d\x4f\x67\xe7\xac\x08\xaf\x7f\x0e\x75\x6a\x9b\xa2\x3f\xd1\x0f\x88\xc6\x48\xc8\xf4\xbd\xb4\xcb\xda\xf4\xa0\x4d\x55\x47\x12\xa0\x33\x43\x4f\x3f\xed\x14\x6f\xd8\xd0\x92\x48\x59\x2b\x0d\x21\xaf\xe8\x75\x52\xfd\x21\x07\x5f\x3d\xf0\x12\x0f\x3f\xe2\x2c\xac\xae\x8b\x1b\xf9\x73\xe9\x74\xa0\x52\xe9\xc6\xbf\x1d\xd7\x7e\x5c\x5e\xd8\x45\x90\xfc\xa6\x6d\xd6\x4d\xec\xf7\x1f\x2d\xe7\x5c\xeb\xc0\x50\x5c\xc2\x4a\x99\x1f\x51\x83\xc5\xc7\x01\x6c\x4c\x19\xa3\x7e\x70\x4f\x18\x43\x1e\xa1\x2f\x89\xa6\x3c\x72\x7b\x00\x46\x78\x94\x90\x08\xd5\x88\xbd\xb9\xfc\xbe\x73\xa8\x06\x55\xf2\x2d\x8d\x7a\x95\xb3\xe7\x54\xb7\x49\xf3\xea\xa7\x7a\x55\x81\x43\x59\xdc\xf5\x58\x90\xa1\x72\xec\x13\x60\xf0\xbf\x83\x49\x50\x77\x76\x13\x31\x94\xdc\x32\x0b\xa6\xb5\x70\x49\x1b\xe5\xf7\x64\x4f\x35\x29\x1c\xb8\xa1\x6e\xf5\x42\xed\x55\xbb\xa5\xcd\x40\xbf\x97\x2f\x14\x17\xf9\x66\xd0\xf9\x5d\xc8\x8d\xb4\x8f\x20\x37\x52\xc8\xec\x36\x61\xd5\x37\x08\x18\xfb\x25\xe5\x40\x98\xc2\xbe\x7f\x06\x46\xd3\xdf\x52\x3c\x8c\xb4\xbf\xee\x5f\x81\x51\x44\xd9\x84\xbe\x32\xea\x3e\x8d\x1c\xde\xa9\xeb\x49\x63\x86\x29\x0f\xf1\xb9\x3d\x7b\x45\xe1\xe5\x33\x20\x78\x0b\xd1\xdc\xe1\xa2\x45\xa4\x2e\xa1\xa8\x0e\xa5\x86\x4c\x54\xb7\xc7\x88\xc4\x09\x7b\xbe\x44\x8c\xf0\x3e\x17\x56\x87\x97\x1a\x68\x63\xde\xc7\xb9\xdc\xd3\x5b\xba\x90\xc1\x5d\xad\xb7\xcb\xcd\x0e\x56\xeb\xdd\x5d\xdf\x71\xb5\x28\x3c\xfa\x7c\xf2\xcf\xed\x97\xbf\x97\x5b\xf0\x66\x3b\xca\xd3\xd9\x02\x66\x1f\xfe\xfb\x17\xf6\x29\x64\x3f\x07\xfd\xdb\xac\xdc\x32\x00\x78\xb3\x6d\x4c\x18\xcb\x30\x37\x19\xe2\xa6\xb5\xfe\x15\x43\x9a\xc4\x3d\x80\x2f\x44\x46\x98\xad\x5f\x5f\x65\x80\xeb\xab\x16\xe2\x8f\xa4\x04\xe4\x11\xae\xdb\x21\x3e\x13\x19\x11\xae\x13\xc2\xf3\x62\xf3\x38\x1f\xf2\x38\x20\x24\xb0\x2c\x81\x9c\x65\x2f\xe2\xff\x00\x00\x00\xff\xff\x7d\xa0\xc3\x8f\xa6\x17\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 6054, mode: os.FileMode(0644), modTime: time.Unix(1642362150, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x59, 0x48, 0xf0, 0xdf, 0x67, 0x43, 0x1, 0x5c, 0x8a, 0x71, 0x58, 0x34, 0x70, 0x21, 0xb0, 0x98, 0xf7, 0xc9, 0xa1, 0x56, 0x30, 0x39, 0xec, 0x3b, 0xa1, 0xd3, 0x6a, 0x26, 0xe6, 0xf1, 0x39, 0xcc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
