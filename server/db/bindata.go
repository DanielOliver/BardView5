// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (2.304kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.802kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x8f\x9b\x3c\x10\xbe\xf3\x2b\x46\x7b\x01\xa4\x1c\xde\xcb\x7b\xea\x69\xb5\x62\xab\xa8\x15\x91\x92\xb4\x52\x55\x55\xc8\xc0\x24\x75\x03\x36\xf5\x47\xb2\xf4\xd7\x57\xd8\x04\xf0\xc6\xc9\x12\xa9\x55\x7d\x02\x8f\x9f\x99\x67\x3e\x9e\x29\x04\x12\x85\xa0\x48\x5e\x21\x3c\x14\xbc\xae\x39\xcb\x48\x51\xa0\x94\x0f\x41\x14\x00\x00\x30\x52\x23\xd8\xa3\xf0\x45\x05\xfd\x37\x14\x9c\x49\x25\x08\x65\x0a\x1c\x5c\xd6\x1c\xa0\x11\xb4\x26\xa2\x85\x03\xb6\x0b\x03\xb0\x71\xca\x8c\x28\x50\xb4\x46\xa9\x48\xdd\xc0\x89\xaa\xef\x5c\xdb\x1b\xf8\xc5\x19\x42\x89\x3b\xa2\x2b\x05\x11\xe3\xa7\x28\x06\x32\xb5\x85\x5a\x15\x61\x0c\x8c\x2b\x60\xba\xaa\x82\xf8\x5d\x10\xb8\xf4\xb5\x44\x71\x66\xdd\x7d\x67\xb4\x3c\x93\xcd\xe9\x9e\x32\x2f\x77\xf3\xb0\x39\x0c\xa6\xee\x5c\xd0\xd7\x7a\x74\x75\xf9\xeb\x9c\x33\x3f\x37\xef\xbc\x9d\xd0\xb8\x02\xbc\x00\x11\xfb\xf2\x56\xc1\x86\x73\x47\xe5\x6c\x90\x23\x0a\x49\x39\x73\x0b\x74\x3b\xa5\x31\xc8\x7f\xb1\x75\x82\xbb\x1d\x16\x8a\x1e\x31\x2b\x4d\x1f\xfe\x0a\x53\x64\xa5\x75\x0f\x6f\x96\x63\x04\x51\x99\x11\xc3\xac\x4f\x8f\xf3\x0a\x09\x9b\x99\x9e\x12\x1a\xfb\x0c\x9d\xd1\xb6\x0a\x98\xd7\x79\xac\x09\xad\x46\xe3\x7c\xe0\x44\x6f\xf7\x01\xcd\x24\x2b\xb2\x97\x23\xf0\xeb\xb7\x39\x40\xd9\x4a\x85\xf5\x00\x9d\x07\x34\xc8\xa7\x55\xba\xd9\xae\x1f\x97\xe9\x16\x76\x87\xcc\x10\xe8\x87\x37\x6f\x07\x45\x3d\xaf\xd6\xc9\xf2\x7d\x0a\x1f\x92\x2f\x10\x8d\x82\x88\x1d\xc9\xad\x93\xe7\x64\x9d\xa4\x4f\xc9\xa6\xd7\x31\x44\xbd\x84\xfb\x46\xf8\x42\x99\xde\xd8\xd6\x5c\x89\x36\xed\xde\xd5\x80\x6e\x8f\xa3\xae\x01\xf1\x74\xbd\x68\x46\x7f\x6a\x04\xca\x4a\x7c\xb1\x55\x36\xcd\xcd\xb4\xbd\xe1\x6c\xa0\x6c\xee\x6f\x22\xbb\xd5\xe1\x01\x76\xd7\x97\x0b\x4d\xf0\x0a\x33\xa9\xf3\x1f\x58\xa8\x3b\xd6\xf1\x14\xf6\xef\xb6\xb1\x61\xd1\x69\x90\x33\x0f\xf7\x37\xd8\x5b\x9c\x97\xfc\x34\xbb\x9b\xea\x98\x71\xfc\xcb\xda\xec\xdd\x3f\x54\x18\xaf\x50\xa6\x29\xf6\x99\xf8\xe7\x77\x9a\xeb\x75\xbd\x38\x63\x32\x9d\xdf\x65\xba\x49\xd6\x5b\x58\xa6\xdb\x95\x5b\xb6\xfe\xcd\xe7\xc7\x8f\x9f\x92\x0d\x44\x61\xc9\xca\xff\xf1\xc4\x45\x55\x86\x5e\x9c\xe5\x6a\x61\x0b\x70\x59\x0d\x4e\x6a\xc2\xc8\x1e\xc3\x05\x38\xee\x16\x67\xda\x51\xc8\x4f\x0c\xc5\x0d\xfb\x91\xe2\xe9\xb5\xf9\x15\x1b\xaf\x54\x07\x06\x8d\xa0\x47\xa2\xd0\x71\x4a\x58\xdb\x69\xcc\xb9\x6b\x74\x5e\xd1\xa2\x73\xfe\x3b\x00\x00\xff\xff\xfe\x15\xf6\xb2\x00\x09\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 2304, mode: os.FileMode(0644), modTime: time.Unix(1642297273, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x65, 0x7, 0x9b, 0x70, 0xe, 0x61, 0x79, 0x44, 0x26, 0x52, 0xff, 0xde, 0x8e, 0x3e, 0x7b, 0xa3, 0x9a, 0xb9, 0xd1, 0x4a, 0x25, 0x35, 0x91, 0x97, 0x87, 0xe1, 0x54, 0xfa, 0xf6, 0x5e, 0xda}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x06\xbe\x58\x06\x8c\x22\x59\x20\xa7\x9e\x82\x85\x76\x6b\x74\xd7\x29\x6c\xb7\xc0\x62\xb1\x10\x68\x89\x56\x88\x50\xa4\x41\x52\xc9\x2a\xef\xd6\x4b\x9f\xac\xa0\x44\xc9\xa4\x45\xfd\xd8\x88\xd3\x43\x75\x31\x40\x7e\x9c\x19\x72\xbe\xf9\x38\x74\x2c\x30\x52\x18\x14\xda\x51\x0c\xd3\x84\x25\x77\x38\x7a\xe1\x82\x26\xd3\x49\x30\x01\x00\xb0\x86\x22\x92\xe8\x11\xd8\x91\x94\x30\x55\xce\xea\x2f\xe6\x4c\x2a\x81\x08\x53\x0e\xf8\xf0\xd4\x20\xf4\x77\x10\x24\x43\xa2\x80\x27\x5c\x2c\xca\x89\xca\x73\x12\xed\x8a\x06\x53\x19\x06\x60\x39\xa5\x2e\x08\xa9\x06\xa4\x48\x86\xa5\x42\xd9\x01\x5e\x88\x7a\xe4\xb9\x2a\x47\xe0\x95\x33\x0c\x09\xde\xa3\x9c\x2a\x08\x18\x7f\x09\xe6\x80\xec\xb9\x59\xae\xe2\xd9\x1c\x18\x57\x96\xfd\x67\x2c\x24\xe1\xcc\x0e\xb4\x09\xc2\x00\xed\xb9\xc6\xfe\xcd\xbc\x5a\x4f\x64\x84\x62\x45\x9e\xb1\xb5\x9e\x73\x8a\x11\xeb\x5f\xaf\x44\x8e\x8d\x89\x98\x67\x19\x67\x11\x8a\x63\x2c\xa5\xd9\x22\xfe\x59\xee\xd7\x8d\x35\x97\x58\x44\x0a\xa5\xf2\x68\x4f\x03\xbf\xff\x38\x05\xca\x42\x2a\x9c\x39\x50\x3f\x30\xc1\x82\x3c\xe3\x24\xda\x0b\x9e\x55\x59\xf3\xa4\x80\xa1\x0c\x83\xfb\xf9\xe3\xcb\x78\x92\x53\xec\x07\x5a\x2e\x65\x2c\xc8\x41\x59\x87\xde\xb6\x56\x22\x3f\x3e\xac\x36\xdb\xf5\xfd\x72\xb5\x85\xfd\x53\x64\x33\xcb\x90\x62\x57\x34\x04\xfb\xf4\xb0\x0e\x97\x9f\x57\xf0\x7b\xf8\x0d\x82\x23\xb1\xe6\x0e\x03\xd7\xe1\xa7\x70\x1d\xae\x3e\x86\x1b\x98\xea\xb3\x9c\x42\x50\x1e\x29\x49\x4c\x26\x7a\x3c\x96\x39\xaa\x52\xd4\xe1\xd4\xce\x62\xa7\x5f\x37\xd7\x81\x3e\xda\x41\xdf\x76\x92\xfc\xbe\xdb\x69\xec\xde\xb8\x5d\xe1\x10\xb8\xc5\x3d\x9f\x4c\xe6\xbf\x4e\x26\x9d\x92\x10\x21\x29\x49\xca\x32\xcc\x54\xad\x0e\x27\x45\x6c\xd8\xd3\x59\xbf\xd7\xac\xdd\xda\xb7\xa7\xec\xda\x75\x6b\x12\xdf\xb1\x76\xe1\x53\x3e\x2f\x46\x70\x8a\x4b\x05\xa8\xe2\x30\x54\xee\x66\xb2\xff\x34\x6d\xad\xfc\x63\xbd\xfc\x7a\xbf\xfe\x56\x65\xd6\x84\xb9\x38\x89\x65\x3e\x58\x22\x96\x6d\x6d\xc3\xcf\x9b\x9a\xfd\x6f\x55\x25\x96\xd3\x72\xa0\x83\xad\x27\x9c\xbb\x88\xa9\x67\x84\x62\xa5\xc8\x1f\x90\x05\xe8\x8e\xc6\x02\x4d\x4d\xe1\x96\xc5\xe2\xad\x96\x4c\xdf\x88\x5a\xac\x8b\x03\xf6\x54\x4a\x5f\x95\x5c\xab\x42\xce\xaa\x0e\x4b\xf2\x4f\x18\xdd\x7d\xe9\xdb\x7b\xee\xbd\xfb\x3b\x33\xe7\x58\x78\x7b\x8d\xef\xd4\x36\x49\x5e\x71\x14\x23\x85\x53\x2e\x8a\xff\x4b\xba\x9c\x4d\x0f\xf6\x6a\xf2\x80\x62\xec\xf5\xd0\x93\x4f\xd7\xc5\x3b\x26\xd4\x10\x49\xa7\xd2\x12\xf2\x9a\x5e\x8d\xea\x0f\xb5\xb1\xf5\x82\x0b\x1a\x59\x18\x71\x17\xd6\xdf\xb5\xfb\xd9\xb3\xe9\xb4\x27\x42\x2a\xb7\xe3\xf7\xee\xc7\xd3\x18\x7a\x09\x52\x0e\x3a\x6d\xab\x83\xfd\xfe\xa3\xd5\x47\x1e\x75\x60\xc8\x2e\xa2\x46\xe6\x47\xc4\xe0\xf0\x71\x00\x9b\x11\x4a\x49\x14\x3f\x22\x4a\x31\x4b\x71\x24\x90\x22\x2c\xf5\xf7\x00\x14\xb1\x34\x47\x29\x96\x23\xf6\xe6\x69\x7f\xbd\x31\x0c\xab\xe4\x7b\x36\xc1\xb5\xcf\x9e\x5b\xdd\x25\xcd\x9b\xdf\xea\x75\x04\x1e\x65\xf1\xc7\xe3\x40\x86\xc2\x71\x6f\x80\xc1\xbe\xdc\x26\xa8\xdf\xbb\x8d\x18\x72\xee\x34\x0b\x76\x6b\xe1\x93\x36\xc2\x1e\xd1\x8e\x28\x54\x75\xe0\x96\xba\x1d\x27\x8e\xbd\x6a\xb7\xb4\x59\xe8\x4b\xd4\x6d\xd4\x3b\xfd\xfa\xc2\x76\xd6\x4b\xdd\xf3\x7a\x1e\xff\x7c\xee\x7a\x3f\xb7\xff\x1b\x69\x05\xb5\xe8\xbc\x82\xfc\x48\x2e\xf4\x30\xa2\xe6\x3d\x5e\xd9\x1c\xf3\x97\xc2\x1e\x51\x89\xfb\x5e\x06\x56\xd2\xdf\x53\x3c\x2c\xb7\xff\xdd\xab\xc0\x0a\xc2\x24\xa1\x2f\x8c\x63\x9e\x46\x16\xef\xd4\xb7\xd2\xaa\x61\xc2\x12\xfc\xb3\x5d\x7b\x55\xe0\x66\x0d\x70\xd6\x42\x9c\xee\x70\xd1\x22\x52\x97\x50\xd4\x97\xd2\x89\x4c\xd4\xc3\x63\x44\xa2\xc1\x9e\x2f\x11\x23\x7a\x9f\x2b\xab\xc3\xa5\x0d\xb4\x55\xef\xe3\xba\xdc\xe6\x94\xae\xd4\xe0\x2e\x57\x9b\x70\xbd\x85\xe5\x6a\xfb\xd0\x77\x5d\x2d\xaa\x1e\x7d\x3e\xf9\xeb\xfe\xcb\x9f\xe1\x06\x82\xd9\x96\xb0\x62\xb6\x80\xd9\x87\x7f\xfe\x86\x5d\x01\xfa\x67\xaf\x7e\x99\x99\x2d\x03\x40\x30\xdb\x64\x88\x52\x8d\xb9\xd3\x88\xbb\xd6\xfc\x57\x9c\x90\x3c\xeb\x01\x7c\x41\x22\xc5\x7a\xfe\xf6\x46\x03\x6e\x6f\x5a\x88\xdf\x72\x03\x28\x2d\xdc\xb6\x4d\x7c\x46\x22\x45\x4c\xe5\x88\x95\xc1\x96\x76\x3e\x94\x76\x80\x0b\xa0\xda\x81\x98\xe9\x83\xf8\x37\x00\x00\xff\xff\x24\xef\xaf\x02\xaa\x16\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5802, mode: os.FileMode(0644), modTime: time.Unix(1642300787, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x8, 0x3e, 0x8d, 0xf6, 0x9f, 0x44, 0xed, 0x2a, 0x51, 0x4, 0xa3, 0xe3, 0x25, 0x4c, 0x9f, 0xa7, 0x5, 0x35, 0xb1, 0x92, 0xbe, 0x60, 0x98, 0x46, 0xc5, 0xf9, 0x7b, 0x56, 0x53, 0x95, 0x79}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
