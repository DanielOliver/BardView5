// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (8.641kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.036kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\x36\x10\xfe\x6e\xc0\xff\xe1\x60\x14\x90\x34\xa8\x40\x1b\x0c\x28\x96\xa2\x05\x8c\x4c\xc9\x82\x65\xf6\x26\x3b\x7b\xc1\x30\x08\xb4\x44\x3b\x6c\x24\xca\x15\xa9\xa4\x5e\xdb\xff\x3e\x90\xd4\x0b\x25\x4b\xb2\xd4\xd9\xd9\x3e\x54\xdf\x2c\xf2\xf8\xdc\x1d\xef\x9e\x87\x62\xe2\x27\x18\x71\x0c\x1c\xad\x42\x0c\x13\x3f\x8e\xa2\x98\x7a\xc8\xf7\x31\x63\x93\xf1\xc8\x1c\x8f\x00\x00\x28\x8a\x30\xa8\x87\xe3\x0f\x5c\xbd\x14\x8f\x1f\x53\xc6\x13\x44\x28\x87\x8a\xa9\xb7\xbd\x87\x6d\x42\x22\x94\xec\xe0\x1e\xef\x6c\x65\xa1\xb0\x02\x0f\x71\xe0\x24\xc2\x8c\xa3\x68\x0b\x8f\x84\xdf\xc5\xa9\x7a\x03\x7f\xc7\x14\x43\x80\xd7\x28\x0d\x39\x98\x34\x7e\x34\x2d\x40\xfa\x98\x91\x72\xdf\xb0\x80\xc6\x1c\x68\x1a\x86\xe3\x91\xf5\x7a\x3c\x1a\x8f\xaa\x51\xa4\x0c\x27\xa5\xf3\xe2\x97\x47\x82\xdc\xe5\x15\xd9\x10\xda\x1c\x82\x9c\xb9\xbd\x2f\xc7\xc4\xb3\x1f\x46\x9a\x96\xab\xed\xff\xac\x3c\xb9\x9f\xb5\x04\xac\x76\x9a\x2b\x2d\x96\xfb\x56\x48\x4d\xed\x4a\x5d\xf1\x0c\xc8\x61\x86\xf2\x80\x13\x46\x62\x5a\x4d\x53\x77\x54\x25\xca\x0b\x2b\x5b\x05\xaf\xd7\xd8\xe7\xe4\x01\x7b\x81\xdc\x90\xd3\xf8\x8a\x69\xa0\xd6\x87\x83\x19\xd1\xac\x08\xf3\x90\xf4\x2d\x8b\x30\x8e\x43\x8c\x68\xcf\x08\x79\x92\xe2\x3c\xc8\x4a\xa9\xab\x96\xe8\x59\x00\x38\x42\x24\x2c\x47\x07\x58\x6a\x2d\x38\xd0\x52\x56\x35\x47\x1b\x56\x5a\xfe\xf9\x57\x2f\x4b\xb6\x63\x1c\x47\x85\x6d\x4f\x4b\x65\x7b\x31\x9f\x2d\x96\xee\xf4\x7a\xb6\x84\xf5\xbd\x27\x7d\xc8\xea\x78\xb5\x2b\x1b\xec\x72\xee\x3a\xd7\x57\x33\xf8\xd1\xf9\x03\xcc\xb2\x3b\xac\x6a\x0b\xba\xce\xa5\xe3\x3a\xb3\x0b\x67\x91\xf5\x36\x98\x59\x53\xe7\x3b\xd2\x84\x26\x37\x49\xed\x51\x1b\xa0\xbe\x8f\xed\x98\xd5\xed\x36\xc5\x4e\x58\x35\xe2\x49\x29\x79\x9f\x62\x20\x34\xc0\x1f\x54\xc2\xe5\x4e\x7b\xa9\x7a\x13\xd3\xc2\x71\xf9\xbe\x89\xb4\x92\x38\xc4\x1e\xdf\x6d\x71\xc9\x5c\xc5\x2b\xaf\x81\x61\x3a\x78\xac\xb4\x3b\x4c\x66\x35\x72\xa9\x3e\x47\x62\xe9\xe6\x12\xae\x41\x75\x14\x74\x8f\xa7\x06\x15\xa5\x21\x27\xdb\x10\x7b\x88\x31\xb2\xa1\x11\xa6\x9c\x79\x28\x0c\xe3\x47\x1c\x74\x36\xfe\x70\xa8\xac\x49\x22\x44\xd1\x06\xd7\xb7\xe9\x48\x50\x5d\xd5\x26\x36\x5b\xee\xb5\x48\xaf\x5e\x70\x65\x41\x65\x35\xdb\x52\x74\xb5\x7a\xeb\xa5\x94\x72\x66\xff\xe2\xea\xa1\x77\x7d\xb2\xf1\x45\x92\xf8\x05\xea\xd2\x5f\xc3\x4e\x2a\x5d\xc3\x52\x32\x40\xdd\xfa\x2c\xdc\x29\x80\x03\xc4\x68\x00\x96\xdd\xc8\x7a\xaa\x68\xb2\xb1\x52\xc6\x0a\xe0\x36\x45\x1a\x06\xdc\x24\x23\xd2\x91\xbc\xbd\x5a\x24\x44\x77\xb6\x5d\x41\x8a\x59\x35\x83\x46\xf5\x92\x33\x4e\xa1\x95\xcd\x87\x65\x09\x57\xd2\x64\x8d\x0d\xca\x01\xb1\x1b\x87\x18\x41\x9b\x3d\x98\x1c\xe0\x94\x04\x01\xa7\x26\x89\x13\x00\x54\x89\xe2\x10\xc0\xb0\xf4\xd4\xc8\x02\x4e\x4d\x18\x35\x65\x81\x23\xec\x75\xc3\x21\xf7\x94\x00\x35\xe6\x81\x27\x61\x1f\xad\x9f\xc4\xcf\x2e\x0e\x3a\x44\x3f\xe5\xb4\x56\xd2\xd1\xd0\x44\x3a\x5b\xd0\x4a\x36\x69\x41\xeb\x75\x44\xaf\xe1\x3d\x35\xdd\xf9\x9c\xc4\x74\xd8\xfd\x86\x66\xf8\xdf\xde\x6e\x48\x47\x58\xba\x7a\x87\x7d\xfe\x05\x21\x64\x96\xff\x83\x18\xb6\x38\x89\x08\x63\x95\x9d\xa8\x0d\xf4\x11\x1d\x6d\xf6\x57\xd1\xf9\x2a\x3a\x4f\x28\x3a\x8a\x0d\x2a\x33\x8e\x7b\x14\xce\x7a\xf5\xe4\x00\x7a\x96\x8e\xd8\x0e\x31\x0d\x88\xc8\x50\x29\x9c\xef\x58\x4c\x57\x47\xf3\x7e\x4d\x70\x18\x54\x55\xf9\xdf\x6a\x72\xb7\x1e\x6b\x54\xf3\x04\x7a\xac\xa1\xa9\x4a\x6b\xc1\x53\x83\x07\xbe\x3e\xb2\x5a\x55\x37\x01\x7d\x20\xb3\xd2\x68\xc1\xcc\x46\x0f\x80\xe6\xf5\x7b\x00\xf5\xe4\x07\x81\x5c\x84\xae\x67\x0b\xc7\x5d\xc2\xf5\x6c\x39\x6f\xfb\x26\xb3\xa5\x92\xda\x9d\x37\x48\x76\xed\xd2\xc7\x1a\x8f\x16\xce\x8d\x73\xb1\x84\x97\x36\x18\xb7\x0c\x27\xe0\xc6\x21\x36\x6c\x58\xa3\x90\x61\x1b\x04\x2b\x8d\x47\xbf\xfd\xe0\xb8\x0e\xcc\xe6\x4b\x70\x7e\xbf\x5e\x2c\x17\x66\x6e\x04\x97\xee\xfc\xa7\xca\x85\x8d\x9a\x2a\x35\xfd\x8d\xbe\xe2\x13\x85\x71\xa6\x87\x61\xc3\x55\x18\xaf\x50\x68\xa8\x38\x8e\x17\x4d\xb1\xb0\x8a\xea\xc2\x75\xa6\x4b\x07\xe6\x2e\xb8\xce\xcf\x37\xd3\x0b\x07\x2e\x6f\x67\x17\xcb\xeb\xf9\x0c\x36\x58\x1d\x49\x3d\x3d\x44\xd3\x02\xd7\x59\xde\xba\xb3\x45\x71\x44\x98\x2e\xc6\xa3\x67\xcf\x8a\x30\xf4\xd9\xe3\x51\xdd\xad\x3c\x84\xfd\x2c\xab\x45\x44\x55\xdd\x4c\x67\x57\xb7\xd3\x2b\x07\x16\xbf\xdc\x0c\x73\x72\x23\x43\x3b\xb9\xaf\x45\x0e\x3b\x7c\x6e\xbd\xa3\x4e\x53\x12\x64\x37\x86\xca\x54\xbb\xa7\x16\x63\x95\x93\x5b\x9c\x40\x82\xb7\x21\xf2\x31\xac\x53\xaa\xd8\x64\x83\x29\x4e\x10\xc7\xde\x3d\x4b\x45\x90\x99\xee\x62\x9e\x26\x94\x81\x7f\x87\x12\xf3\xec\x55\xf6\x36\x44\x74\x93\xa2\x0d\x06\xf6\x3e\x1c\x8f\x10\x53\x0e\x33\x1c\x0a\x82\x60\xe9\x8a\xf1\x84\xd0\x8d\x59\xed\x6a\xb9\x9a\x04\x35\x79\xec\xc9\x05\xfd\x30\xf6\xef\xbd\xe2\x54\x62\x5a\x36\x18\xbb\xdd\x6e\x17\x45\x41\x70\x77\x77\xf6\xad\xe0\xaf\x94\x19\xd6\xde\x42\xfa\xf3\xe9\x13\x14\x0b\x26\x88\x06\x71\x64\x5a\xf0\x0d\xbc\xc4\xdf\xd9\x60\xbc\xc8\x9f\x03\x8b\x08\x64\x30\x6c\x30\x0c\xcb\x16\x9d\x7f\xf6\xca\x3a\x3f\xcf\x83\x7e\x2d\xe2\x6b\xec\xd6\x82\xf9\xf3\x1e\xad\xf6\xad\xf8\xd0\xb4\xc6\xa3\x5f\xa7\x37\xb7\xce\x02\xcc\x97\x2d\xad\xd8\x5d\x6d\x36\x18\x1f\x3f\xb7\xb1\x45\x95\x95\x4b\x28\x43\xac\xd7\x66\x54\xd1\x0f\xcd\x46\x71\x87\xb4\xea\x6d\x13\x3f\xd2\x0c\xa8\xb7\xc9\x03\xc1\x8f\xc3\x2c\x54\xd9\x0e\xb3\xd9\xa6\xab\x90\xf8\x5e\x01\x56\x35\x6d\xfe\x3b\x50\x69\x9c\x90\x87\x26\xc4\x43\x66\x12\xb3\x2d\xed\xa5\x20\x9b\xfb\x9f\x46\x36\x14\x95\xa4\x22\xb2\xf3\x03\x9d\xad\x1d\xbe\xaa\xc5\x64\xea\x7c\x43\x02\x8d\xac\x7b\xf0\xb4\x0d\xf9\x7e\xdb\xa0\xaa\x45\x14\x9a\x68\x92\x49\x26\xb6\x93\x73\xf8\xa8\x9a\x66\x12\x6f\x27\xe7\x30\xc1\xef\x27\x99\xee\x4f\xe4\x71\x4d\xbc\x63\x38\x8f\x60\x22\x86\x3e\x8f\x47\x79\xad\x76\x70\x0d\x7e\x40\x61\x2a\xb8\x26\xfb\x0f\x03\x01\x68\x16\x51\xaa\x93\xa5\x0d\xe5\xd2\xf9\xc5\x71\x71\x35\xa4\x7e\xd7\x38\x2a\xfb\x00\xe9\x41\x51\x1a\xd6\xf3\xb7\x60\x90\xc0\x80\xe7\x6f\xdf\x82\x21\xdc\xc2\x86\x75\x7e\x9e\x1d\x9c\xdf\xe4\x80\x15\xee\x98\xbb\x60\xb6\xad\x20\xf3\x62\x58\x22\xe7\xa5\xfb\x46\x69\x3e\x9d\x7d\x5f\x04\xf1\x46\x8b\xd0\x92\x14\xf3\x4f\x00\x00\x00\xff\xff\xbd\x0b\x59\x8f\xc1\x21\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 8641, mode: os.FileMode(0666), modTime: time.Unix(1635655142, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe9, 0x78, 0x1a, 0x9e, 0xa8, 0x43, 0xff, 0xee, 0xc, 0x44, 0x9, 0x3c, 0x40, 0x94, 0xa3, 0x45, 0x91, 0x4a, 0xc6, 0xf7, 0x35, 0x7c, 0x71, 0x76, 0x39, 0x3d, 0x47, 0x7a, 0x48, 0xb3, 0x7f, 0xb6}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4f\x6b\xeb\x38\x10\xbf\x07\xf2\x1d\x86\x5c\xec\x40\x58\xda\x42\x4f\x7b\x2a\xc5\xed\x86\xed\xa6\x90\x64\x17\x96\x52\x8c\x62\x2b\xae\xa8\x2c\x05\x49\x6e\xeb\x7e\xb7\x77\x79\x9f\xec\x21\xff\x49\xa4\x58\x76\x9c\x40\x72\x79\x39\xb4\x20\xfd\x3c\x33\xd2\x6f\xe6\x37\xa3\x48\x60\xa4\x30\x28\xb4\xa2\x18\x46\x31\x8b\x6f\x71\xf8\xc9\x05\x8d\x47\xc3\x81\x3f\x1c\x00\x00\x18\x8b\x21\x89\xf5\x0a\xac\x48\x42\x98\x2a\xb7\xf5\x2f\xe2\x4c\x2a\x81\x08\x53\x16\x7a\xf3\xbe\x83\xe8\xdf\x46\x90\x14\x89\x1c\xde\x71\x3e\x29\x77\x4a\xf7\x71\xb8\xca\xb7\xa0\xd2\x36\x00\xcb\x28\xdd\x43\x21\xb5\x45\x29\x92\x62\xa9\x50\xba\x81\x4f\xa2\xde\x78\xa6\x8a\x15\xf8\xe6\x0c\x43\x8c\xd7\x28\xa3\x0a\x7c\xc6\x3f\xfd\x31\x20\x73\xcf\xcb\x54\xe4\x8d\x81\x71\x65\x3a\xf8\xc0\x42\x12\xce\xcc\x58\xb7\x61\x54\x48\x73\x6f\xeb\xe0\x6a\x5c\x19\x20\x32\x44\x91\x22\x1f\xd8\x30\xc0\x39\xc5\x88\x75\x1b\x50\x22\xc3\xb5\x8d\x88\xa7\x29\x67\x21\x8a\x22\x2c\x65\x75\x4a\xfc\x55\x1c\x79\x2f\xdc\x4c\x62\x11\x2a\x94\xc8\x9d\x45\x8d\x7c\x79\x6d\x20\x65\x2e\x15\x4e\x2d\x6c\x0b\x32\xc6\x82\x7c\xe0\x38\x5c\x0b\x9e\x96\xf4\xb9\x98\x60\x28\xc5\x60\xff\x1c\x31\x96\xd8\xfb\xe7\xd9\x62\x39\xbf\x9b\xce\x96\xb0\x7e\x0f\xcd\xbc\xa8\xf8\x5c\xe5\xbb\xf4\x78\x78\x9e\x07\xd3\xc7\x19\xfc\x1d\xfc\x0f\xfe\x2e\x2b\xc6\x76\x02\xcd\x83\x87\x60\x1e\xcc\xee\x83\x05\x8c\xf4\x25\x8c\xc0\x2f\xee\x82\xc4\xf5\x25\x76\x38\x2d\xae\xb7\xbc\xdd\x36\xbf\x26\x03\xed\xae\x6d\xa2\x7c\x7d\x27\x87\xdd\x9b\xf7\xdb\xe2\xbe\x49\x41\xc7\xf1\xcd\x52\x05\xdf\xae\xd1\xb1\xa6\x60\xfc\xa7\xfe\x3b\x1c\xb8\x2a\x3c\xd5\xf5\xaa\x73\x28\xdf\xe0\x5d\xa1\x1b\xc5\x58\x51\xef\xae\xc1\xb3\xd5\x5e\xed\xd5\x51\x31\x8e\x9a\x33\x72\xb1\xca\xc1\xfa\xc3\x0e\x61\x32\x4f\x7e\x40\x9f\xda\x19\xb5\x8c\x9c\x23\x99\x6b\xf6\x5c\xdc\x49\xf2\x8d\xc3\x08\x29\x9c\x70\x91\xff\x5e\xe4\x59\x47\xef\xd1\x5d\xe4\x06\x45\xd8\xe9\xa4\x93\x5e\xdb\xcd\xa5\xf9\xad\x92\xab\x64\xd6\xec\xc0\x75\xd6\x55\x3d\xb8\x47\x17\xae\xbf\x38\xa9\x0f\x9b\x9c\x76\xb6\x62\xb8\x44\x3b\x3e\x3e\xc3\xd6\x44\x48\x65\x8f\x2d\xee\x23\x39\x7a\x9a\x3b\x63\x8a\x55\xab\xeb\x5a\xe0\x97\xd7\x7d\xb0\xa9\x13\x1d\x36\x11\x25\x09\x4b\x31\x53\x7d\x02\xb0\x92\xb3\x1d\x96\x12\x4a\x49\x18\xbd\x21\x4a\x31\x4b\x70\x28\x90\x22\x2c\xd9\xbf\xc2\x0a\x4c\x11\x4b\x32\x94\xe0\xfd\x19\xa1\x31\x22\xc8\x48\x90\x8d\xda\xa3\xc6\x55\x5a\x87\xb5\xf3\xc2\x33\x40\xed\xb6\xc8\x87\x16\x97\x76\xc6\x9c\xda\x7b\x7b\x04\xe1\x90\x99\x96\x90\x2c\xcc\xc1\x88\xec\xd6\x70\x78\x32\x31\xf3\xb3\x25\x00\x13\x72\xd0\xbf\x35\x56\x54\xee\xbb\xa4\x8e\xb0\x37\xb4\x22\x0a\x31\xd5\x54\xbb\xdd\x9e\xae\xde\x83\x52\x67\xc0\x4f\x53\xbb\x7e\xcf\x8e\x0b\x08\xdd\x71\x0f\x0f\xc7\x53\xe0\x88\xb7\x40\xeb\x63\xa0\xf9\xe4\x6b\xc4\x35\x69\xef\x4d\x2d\x50\x2e\xf4\x3a\xa2\xd5\xf3\xa2\xb4\xda\xe7\x95\xb4\x46\x54\x16\x89\xdc\x9e\xca\x06\xff\x17\x56\x16\xc3\x73\x97\xb8\x34\x26\xf4\xee\x52\x3a\x5e\x5c\x8c\x38\x2a\x36\x3a\x23\xd9\x31\xd6\xb7\xac\x47\xce\x4f\xad\xea\x26\x2c\xc6\x5f\xcd\x8a\x2c\xc3\xaf\x3e\x03\xce\x1a\x88\xfd\x73\x4e\x1a\x69\xd5\x2e\x22\x75\xf3\x6a\x4a\x48\xbd\xd3\x4b\x40\xb6\xe0\x53\xe4\xa3\xcf\x9c\x74\x6e\xe5\x38\x79\xfe\x36\xa4\xa0\xef\x84\xbc\xbd\xac\x73\x0e\xc7\xd3\xd9\x22\x98\x2f\x61\x3a\x5b\x3e\x77\x35\xb8\x49\x39\xe6\x8f\x87\x83\xff\xee\x9e\xfe\x0d\x16\xe0\x7b\x4b\xc2\x72\x6f\x02\xde\xcd\xcf\x1f\xb0\xca\x41\xff\x5b\xab\x3f\xbc\xfa\xec\x00\xe0\x7b\x8b\x14\x51\xaa\x41\xb7\x1a\x72\xdb\x04\xfc\x83\x63\x92\xa5\x5d\x88\x27\x24\x12\xac\x01\xd7\x57\x1a\x71\x7d\xd5\x84\xfc\x95\x55\x88\xc2\xc6\xb5\xc3\xc8\x23\x12\x09\x62\x2a\x43\xac\x88\xb8\xb0\x74\x53\x58\x02\x2e\x80\x6a\x17\xc2\x2b\x2f\xe4\x57\x00\x00\x00\xff\xff\xb8\xa9\xa0\x7c\xac\x13\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5036, mode: os.FileMode(0666), modTime: time.Unix(1641801065, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0xca, 0x60, 0xf6, 0xaa, 0x51, 0x1d, 0x18, 0x1e, 0x66, 0xe9, 0xc5, 0xc5, 0x7e, 0xe3, 0xe7, 0x46, 0xf5, 0xa0, 0x15, 0x55, 0xd, 0xcc, 0xb9, 0x8f, 0xdd, 0x2c, 0x4f, 0x5d, 0x7f, 0xb8, 0xb9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
