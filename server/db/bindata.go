// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/0_init.down.sql (0)
// migrations/0_init.up.sql (8.036kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations0_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func migrations0_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0_initDownSql,
		"migrations/0_init.down.sql",
	)
}

func migrations0_initDownSql() (*asset, error) {
	bytes, err := migrations0_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var _migrations0_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x7d\x8b\xdb\x36\x18\xff\x3f\x90\xef\xf0\x10\x0a\xb6\x87\x0b\xeb\x31\x28\x4b\xe9\x41\xc8\x7c\xb7\xb0\x9b\xb3\x39\xb9\xbd\x30\x86\x51\x6c\x25\xa7\x46\x96\x73\x96\xdc\x6b\xd6\xf6\xbb\x0f\x59\x7e\x91\x9d\x3a\xc9\xdd\x9c\x6c\x8c\xf3\x7f\xb6\xa4\xe7\xfd\xf9\xfd\x1e\x2b\x48\x30\x12\x18\x04\x5a\x50\x0c\x83\x94\xe3\x64\xd0\xef\x99\xfd\x1e\x00\x80\x7c\xf3\x49\x08\xf9\xb3\x20\x2b\xc2\x84\x5a\x92\x4f\x10\x33\x2e\x12\x44\x98\x50\x3b\x37\xeb\x6a\x4d\x3e\x9b\x84\x44\x28\xd9\xc2\x1a\x6f\xed\x5c\x60\x5a\x49\xdb\x7d\x7d\xec\xc3\x62\x01\x2c\xa5\x34\x17\xae\x3c\x09\xfd\xc5\x56\xb3\xf6\xe9\xc2\x77\x05\x23\x25\x4d\x90\x08\x73\x81\xa2\x0d\x3c\x10\x71\x17\xa7\x22\xfb\x02\x7f\xc5\x0c\x43\x88\x97\x28\xa5\x02\x4c\x16\x3f\x98\x16\x20\x7d\xcd\x48\x45\x60\x58\x4d\xab\xf1\x72\x89\x03\x41\xde\x63\x3f\xcc\xf2\xd0\xad\x70\x16\x2a\xb1\x70\xd0\xf2\xc7\x85\x84\x70\x1f\x65\x56\xab\x95\x45\x1c\x53\x8c\xd8\x93\x63\x9d\x5b\x5d\x79\x28\x92\x14\x5b\x85\x13\x11\x22\xb4\xda\x2c\xf0\x87\xa7\x67\x75\xa7\x68\x18\x8a\x74\xdf\xbb\x15\x2e\xd0\x8a\x37\x84\xff\xf1\x67\x17\xc2\x95\xf8\xf1\xd4\x9d\xcd\xbd\xd1\xc4\x9d\xc3\x72\xed\x67\x2d\x98\x97\xea\x62\x5b\x75\xe2\xd5\xd4\x73\x26\xd7\x2e\xfc\xe0\xfc\x0e\x66\xd5\x23\x56\xbd\x57\x3d\xe7\xca\xf1\x1c\x77\xec\xcc\x72\x10\x00\x33\xef\x7e\xab\xdf\xb3\xde\x48\x95\x39\x52\xa4\x8c\xdc\xa7\x18\x08\x0b\xf1\x07\xd5\xf7\x59\x82\xfc\x54\x7d\x89\x59\x29\x20\xfb\x5e\x3b\x9b\xa3\x4c\x12\x53\xec\x8b\xed\x06\x57\x50\x53\x7e\xf2\xbf\x00\x09\x7b\x80\xa7\x3a\x77\x18\x7d\x1a\x7d\x5c\x7f\xba\x6d\xbc\x46\x59\x35\x54\x75\x5a\x64\x51\x4a\x05\xd9\x50\xec\x23\xce\xc9\x8a\x45\x98\x09\xee\x23\x4a\xe3\x07\x1c\x76\xd5\x98\xb9\x2a\xbe\xe5\x02\x47\x7e\x84\x18\x5a\xe1\x66\x9a\x3a\x52\xb5\xaf\xda\x64\xb2\xb3\x5c\xcb\xf0\xea\x05\x57\x15\x14\x98\x72\xad\xad\xe8\x1a\xf5\x76\x14\xb5\x65\x3b\x8f\x2f\xae\x67\xf6\xf9\x7f\xb1\xcf\x49\x09\xa2\x81\x7a\xaa\x68\xfe\x0d\xf2\xc8\x0c\x29\xda\xab\x85\x3b\x74\x63\xdb\xd9\xa3\xdc\xd5\x38\x60\xb7\xaa\x3d\x03\x67\xe9\xbc\x53\xc1\x64\x03\x0d\xaa\x05\x99\x8d\x43\x88\xa0\xed\x7e\x34\x38\xc0\x29\x01\x02\x4e\x0d\x12\x27\x50\x50\x07\x8a\x43\x0a\x1e\x17\x9e\x06\x58\xc0\xa9\x01\xa3\xc1\x2c\xd0\x41\xae\xeb\xd1\x6a\xfc\x95\x75\xaf\xa0\x81\x3c\x70\x16\xf4\xd1\xfa\x49\xbe\xee\xc3\xa0\x43\xf0\x53\x6d\x6b\x05\x1d\x4d\x9b\x0c\x67\x8b\xb6\x0a\x4d\x5a\xb4\x35\x61\xe7\x18\x7d\xe7\x86\xbb\x40\x90\x98\x55\x50\xa7\xf1\x99\x4c\xea\x1e\x80\xcb\x0e\xfa\x9b\xf5\xfe\x49\xba\x23\x24\xd8\xe3\x01\x4f\x17\xef\x70\x20\x9e\xe0\x42\x7e\xf2\x3f\xe0\xc3\x06\x27\x11\xe1\xbc\x96\x89\xc6\xc2\x31\xa4\xa3\xed\x7e\x26\x9d\x67\xd2\x39\x23\xe9\x28\x34\xa8\xed\xe8\x76\x14\xce\x7b\xf5\xe4\x0a\xf4\x28\x75\xd8\x0e\x31\x0b\x89\x8c\x50\x45\x9c\xef\x78\xcc\x16\x9d\x59\xbf\x24\x98\x86\x75\x56\xfe\xa7\x9c\xbc\x9f\x8f\x35\xa8\x39\x03\x1f\x6b\xda\x54\xa5\xb5\xe8\x53\x8b\x07\xfe\x3e\xf2\x5a\x55\x37\x01\xc7\xa8\xcc\x4b\xa3\x45\x67\xbe\x7a\x40\x69\x51\xbf\x07\xb4\x9e\x7c\x10\x28\x48\x68\xe2\xce\x1c\x6f\x0e\x13\x77\x3e\x6d\xfb\x27\xb3\x33\x26\xb5\xf7\xde\x20\xd9\x8d\x4b\x1f\xab\xdf\x9b\x39\x37\xce\x78\x0e\xaf\x6c\x30\x6e\x39\x4e\xc0\x8b\x29\x36\x6c\x58\x22\xca\xb1\x0d\x12\x95\xfa\xbd\x5f\xbf\x77\x3c\x07\xdc\xe9\x1c\x9c\xdf\x26\xb3\xf9\xcc\x2c\x0e\xc1\x95\x37\xfd\xb1\x76\x61\xa3\xb6\x66\x9c\xfe\x56\x97\x78\x26\x37\x2e\x74\x37\x6c\xb8\xa6\xf1\x02\x51\x43\xf9\xd1\x9d\x37\xa5\x60\xe5\xd5\xd8\x73\x46\x73\x07\xa6\x1e\x78\xce\x4f\x37\xa3\xb1\x03\x57\xb7\xee\x78\x3e\x99\xba\xb0\xc2\x6a\x24\xf5\x75\x17\x4d\x0b\x3c\x67\x7e\xeb\xb9\xb3\x72\x44\x18\xcd\xfa\xbd\x17\x2f\x4a\x37\xf4\xdd\xfd\x5e\xd3\xac\xc2\x85\xdd\x28\x2b\x21\xb2\xaa\x6e\x46\xee\xf5\xed\xe8\xda\x81\xd9\xcf\x37\x8f\x33\x72\x95\xb9\x76\x72\x5b\xcb\x18\xee\xb1\xb9\xf5\x8e\x3a\x4d\x49\x98\xdf\x18\xaa\xa3\xda\x3d\xb5\x5c\xab\x4d\x6e\x71\x02\x09\xde\x50\x14\x60\x58\xa6\x4c\xa1\xc9\x0a\x33\x9c\x20\x81\xfd\x35\x4f\xa5\x93\x39\xef\x62\x91\x26\x8c\x43\x70\x87\x12\xf3\xe2\x75\xfe\x95\x22\xb6\x4a\xd1\x0a\x03\xbf\xa7\xfd\x1e\xe2\xca\x60\x8e\xa9\x04\x08\x9e\x2e\xb8\x48\x08\x5b\x99\xf5\xae\xce\xa4\x65\x4a\x4d\x11\xfb\x99\xc0\x80\xc6\xc1\xda\x2f\xa7\x12\xd3\xb2\xc1\xd8\x6e\xb7\xdb\x28\x0a\xc3\xbb\xbb\x8b\x6f\x24\x7e\xa5\xdc\xb0\x76\x04\xe9\xcf\xa7\x4f\x50\x0a\x4c\x10\x0b\xe3\xc8\xb4\xe0\x2b\x78\x85\xbf\xb5\xc1\xf8\xba\x78\x0e\x08\x91\x9a\xc1\xb0\xc1\x30\x2c\x5b\x76\xfe\xc5\x6b\x6b\x38\x2c\x9c\x7e\x23\xfd\xfb\x62\xb7\x96\xc8\x5f\xf4\x68\xbd\x6f\xe5\x8f\xa6\xd5\xef\xfd\x32\xba\xb9\x75\x66\x60\xbe\x6a\x69\xc5\xfd\xd5\x66\x83\xf1\xf1\x73\x1b\x5a\xd4\x51\xb9\x52\x65\x48\x79\xd9\xa1\x9d\x23\x35\xf6\xd0\x4e\x28\xe4\x68\x53\x54\xb1\x89\xb9\x3b\xd7\xdb\x50\x86\x41\x49\xb7\x8b\x69\xc4\xd6\x26\x87\x7a\x24\x4c\xbd\x59\x48\xa8\x21\xcd\x11\x20\x63\x43\x61\xae\x0d\xca\x55\x19\x25\x99\xe1\x01\x09\x07\x43\xf8\xa8\x92\x3d\x88\x37\x83\x21\x0c\xf0\xfd\x20\xe7\xab\x41\x36\x66\xc8\x6f\x1c\x17\xc6\x0f\xe4\xd2\xe7\x7e\xaf\x88\xf1\x9e\x1e\xc1\xef\x11\x4d\x65\x8f\xa0\x20\xc0\x9c\x67\x49\x33\x4b\x07\xd5\x44\x64\x43\x25\xba\xb8\xf0\x2c\xaf\x34\xd4\x7b\xa3\xb7\xf2\xc1\xf9\x88\xd6\xd2\x74\xbd\xbc\x04\x83\x84\x06\xbc\xbc\xbc\x04\x43\x9a\x85\x0d\x6b\x38\xcc\x07\xbe\xb7\x85\xc2\x5a\xcd\x4f\x3d\x30\xdb\x24\x64\x71\x31\x2c\x19\xee\xca\x7c\xa3\x3a\x3e\x72\xbf\x2b\x9d\x78\xab\x79\x68\x65\xad\xf1\x77\x00\x00\x00\xff\xff\x6d\x96\x8a\x31\x64\x1f\x00\x00")

func migrations0_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations0_initUpSql,
		"migrations/0_init.up.sql",
	)
}

func migrations0_initUpSql() (*asset, error) {
	bytes, err := migrations0_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/0_init.up.sql", size: 8036, mode: os.FileMode(0666), modTime: time.Unix(1634877793, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xf4, 0x6e, 0xc1, 0xce, 0x4c, 0x87, 0xf4, 0x1b, 0x77, 0x2, 0x18, 0x92, 0xc4, 0x32, 0x48, 0xf1, 0x19, 0xa7, 0x0, 0xc1, 0xf2, 0x60, 0x99, 0x98, 0x6d, 0x60, 0x4d, 0x13, 0x19, 0x35, 0x3e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/0_init.down.sql": migrations0_initDownSql,
	"migrations/0_init.up.sql":   migrations0_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": {nil, map[string]*bintree{
		"0_init.down.sql": {migrations0_initDownSql, map[string]*bintree{}},
		"0_init.up.sql": {migrations0_initUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
