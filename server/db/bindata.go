// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0_init.down.sql (0)
// ../migrations/0_init.up.sql (7.941kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_initDownSql,
		"0_init.down.sql",
	)
}

func _0_initDownSql() (*asset, error) {
	bytes, err := _0_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_init.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1635640494, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6b\x6f\xa3\x46\x17\xfe\xce\xaf\x38\xb2\x22\x01\xaf\x58\xe9\xdd\xa8\xd2\xaa\x5e\xed\x4a\x96\x4b\x52\xab\x29\x6e\xb1\xd3\x8b\xaa\x0a\x8d\xe1\xd8\x61\x0d\x83\xc3\x0c\x9b\x75\x77\xf7\xbf\x57\xc3\x70\x19\x88\xf1\x25\xc5\xa9\x54\x85\x4f\x31\x33\xf3\x9c\xcb\x9c\xf3\x3c\xc3\xc4\x4f\x91\x70\x04\x4e\x16\x11\xc2\x20\x63\x98\x0e\x34\x43\x03\x00\x10\x7f\x7b\x61\x00\xc5\xb3\x08\x57\x21\xe5\x5a\xf9\xd3\x4f\x28\xe3\x29\x09\x29\x97\x13\x37\xeb\x6a\x48\x3c\x9b\x34\x8c\x49\xba\x85\x35\x6e\x2d\x89\x96\xd5\x50\x8f\x7f\x9e\xfa\xd0\x84\x03\xcd\xa2\x48\x62\xcb\x18\x02\x6f\xb1\x55\x3c\x7d\x3a\xf6\x23\x5c\x22\xc1\x78\x18\x23\xe3\x24\xde\xc0\x43\xc8\xef\x92\x8c\xe7\x6f\xe0\xaf\x84\x22\x04\xb8\x24\x59\xc4\xc1\xa0\xc9\x83\x61\x02\x51\xc7\xf4\x8c\xfb\xba\xd9\xf2\x19\x97\x4b\xf4\x79\xf8\x11\xbd\x20\xcf\x7f\xaf\xd8\x34\x90\xa8\x70\xd0\xef\x93\xf2\x11\x32\x8f\xe4\x3e\xcb\x81\x45\x92\x44\x48\xe8\x93\xf3\x5c\xf8\x5c\xc7\xc7\xd3\x0c\xcd\x22\xf5\x49\x1c\x27\xd4\x23\xbe\x8f\x8c\x01\x70\xfc\xf4\xf4\x0d\x6d\x97\x0b\xc6\x24\x8c\xea\xc1\x5e\xb1\x29\x89\xd5\xa4\xf6\x8a\xcd\xc9\x8a\xb5\xb0\xff\xf8\xb3\x07\xec\x1c\x7c\x3c\x75\x66\x73\x77\x34\x71\xe6\xb0\x5c\x7b\x79\x4b\x17\xe5\xbf\xd8\x56\x9d\x7d\x35\x75\xed\xc9\xb5\x03\x3f\xd8\xbf\x83\x51\x77\x9d\xd9\x68\x7d\xd7\xbe\xb2\x5d\xdb\x19\xdb\xb3\x82\x4f\xc0\x28\xa8\xc4\xd4\xcc\xb7\x9a\x56\x30\x4e\x46\xc3\xfb\x0c\x21\xa4\x01\x7e\x92\x14\x92\xef\x8b\x97\xc9\x37\x09\xad\x56\xe7\xef\x95\x95\x05\x57\xa5\x49\x84\x1e\xdf\x6e\xb0\x24\xac\xea\x85\xb7\x83\x5b\xba\xe9\xab\x5e\x76\x88\xc3\x5a\x7c\xd0\x7c\x7a\xed\xe0\x56\x19\xb5\x2c\xf5\x59\x54\x71\x16\xf1\x70\x13\xa1\x47\x18\x0b\x57\x34\x46\xca\x99\x47\xa2\x28\x79\xc0\xa0\xaf\x0e\x97\x96\xd8\x96\x71\x8c\xbd\x98\x50\xb2\xc2\xf6\x06\xf5\x64\xa9\xb3\xc0\xc4\x26\xe7\x7b\x2c\x32\xab\xd6\x58\x5d\x45\x60\x88\xb1\xdd\x75\xd6\x28\xb1\x63\x34\x31\x9f\x78\x6c\x3d\xbd\xe8\xd6\x7f\x46\xb7\xce\xc9\xff\x2d\x7e\x93\xe5\xf2\xec\xd2\x90\x7b\x51\xb6\xd3\x6e\x65\x50\x1d\xed\xd4\x86\x6a\x52\x6b\xbe\xd5\x65\xf3\xbc\x72\xa4\x8a\x4a\x4d\x85\x8d\xbe\xaf\x5f\x8b\x0d\x38\xd0\xfb\xca\xe4\x13\x69\x00\xce\x48\x05\x70\x66\x3a\xe8\x1f\xbf\x49\x09\x87\xf0\x4f\xca\x4d\x8b\x16\xe0\xcc\xd4\xd0\xd2\x0e\xe8\x61\x9b\x1b\xa9\x6a\x7d\xaf\xf5\x8e\xdf\xe2\x18\x78\x06\x9e\x51\x9a\x48\xfc\xdc\xc3\x36\x07\x88\xa6\x9e\xd5\x45\x2f\x8a\x29\x91\xc8\xdd\xa6\x2a\xe2\xe8\x30\xd5\x26\x98\x23\x8c\x3d\x23\xab\xf9\x3c\x4c\x68\xc9\x68\x8a\x50\x89\x5d\xec\xe6\xb1\x7c\x95\xb7\x59\xef\x3d\x0e\xf7\xd4\xf3\x5d\xae\xb3\x6c\xf1\x01\x7d\x7e\xaa\xef\xc5\xb2\x7f\xd9\xf9\x0d\xa6\x71\xc8\x98\x92\xfb\xd6\xeb\x23\xd4\x44\x99\xfc\xa2\x26\x2f\x6a\xf2\x0c\x6a\x22\xfb\xbe\x31\xa1\xd7\xc3\x6c\xd1\x9b\xe7\xc6\x57\x53\xd4\x5f\x1b\x24\x34\x08\x45\x7a\x6a\x3d\xfc\xc0\x12\xba\xe8\xcb\xf7\x65\x88\x51\xd0\xd4\xda\x7f\xaa\xb4\xfb\x54\x56\x21\x97\x73\xab\xac\x62\x4a\x16\xd8\x6e\x63\x72\x6c\xff\xa7\x43\x51\xa0\xf2\xa3\xfd\x08\x7b\x45\x41\xec\x36\x58\x0c\xee\xb7\x58\x96\xec\x7e\x93\xe7\xd5\xf6\x5c\x64\x26\xce\xcc\x76\xe7\x30\x71\xe6\xd3\xae\xcf\x28\x2b\x17\x49\x6b\xef\xf5\x8e\xd5\xba\x92\x31\xb5\x99\x7d\x63\x8f\xe7\xf0\xda\x02\xfd\x96\x61\x0a\x6e\x12\xa1\x6e\xc1\x92\x44\x0c\x2d\x10\xec\xa3\xfd\xfa\xbd\xed\xda\xe0\x4c\xe7\x60\xff\x36\x99\xcd\x67\x46\xb9\x06\xae\xdc\xe9\x8f\x8d\xfb\x14\x39\x35\x17\xeb\x77\x2a\xe0\x73\x84\x70\xa9\x86\x60\xc1\x75\x94\x2c\x48\xa4\xcb\x18\x7a\x8b\xa4\xc2\x15\x11\x8d\x5d\x7b\x34\xb7\x61\xea\x82\x6b\xff\x74\x33\x1a\xdb\x70\x75\xeb\x8c\xe7\x93\xa9\x03\x2b\x94\x87\x4a\x4f\x0d\xcf\x30\xc1\xb5\xe7\xb7\xae\x33\x2b\xc5\x7f\x34\xd3\x2e\x2e\xca\x00\xd4\xa9\x5a\xdb\x21\xad\x2b\xb5\x02\x40\x94\xd0\xcd\xc8\xb9\xbe\x1d\x5d\xdb\x30\xfb\xf9\xe6\x14\xdf\x56\x79\x3c\xe7\x74\xb1\xca\x59\x87\xab\x9d\xb7\xc3\x59\x16\x06\xc5\xc5\x5d\xbe\x4e\xb9\x20\x16\x43\xca\xe1\x2b\x49\x21\xc5\x4d\x44\x7c\x84\x65\x46\x25\x4d\xac\x90\x62\x4a\x38\x7a\x6b\x96\x89\xc0\xa4\x86\x22\xcf\x52\xca\xc0\xbf\x23\xa9\x71\xf9\x46\xbe\x8c\x08\x5d\x65\x64\x85\xc0\xee\x23\x8d\x30\xe1\x26\xc3\x48\xf4\x3d\xcb\x16\x8c\xa7\x21\x5d\x19\x5a\x8b\x5e\x0b\x73\x06\x4f\xbc\x1c\xcb\x8f\x12\x7f\xed\x55\x47\x0b\xc3\xb4\x40\xdf\x6e\xb7\xdb\x38\x0e\x82\xbb\xbb\xcb\x6f\x04\x27\x65\x4c\x37\xdb\x38\xea\xf3\xe5\x0b\x54\x78\x29\xa1\x41\x12\x1b\x26\xfc\x0f\x5e\xe3\xb7\x16\xe8\xff\x2f\x9f\xfd\x18\xc2\x2e\xe8\x16\xe8\xba\x69\x89\xae\xbe\x7c\x63\x0e\x87\x65\xb4\x6f\xb5\x8b\x8b\x1d\x9d\x58\x91\x78\xd9\x7f\xcd\x9e\x14\x5f\x81\xa6\xf6\xcb\xe8\xe6\xd6\x9e\x81\xf1\xba\xa3\xcd\xf6\x57\x95\x05\xfa\xe7\xaf\xbb\x69\xa0\xc9\xb1\x95\x1d\x5d\x80\x89\x15\x8f\x16\x34\x64\xa0\x9e\x2f\xf9\x60\xb7\x8d\x5a\x14\x8c\xc7\x27\x71\x0b\xaa\xf0\x25\xb4\x55\x1e\x25\x2c\x45\xf7\x1b\x19\x30\xd4\x7e\x08\x03\x85\x3e\x8e\x60\x0e\x0b\x4a\x5f\x2d\x90\x51\x8a\xec\x68\x20\x8b\xdb\x0b\x83\xc1\x10\x3e\xe7\x7b\x3c\x48\x36\x83\x21\x0c\xf0\x7e\x20\xa5\x67\x90\x1f\x13\xc4\x2b\x86\xa5\xf7\x03\x0d\xe0\xab\x26\x73\xbb\xa7\x1b\xf0\x23\x89\x32\xd1\x0d\xf2\xff\x6b\xf9\x56\x19\x55\x74\xf2\x30\x63\x41\x0d\x5b\xde\x35\x56\x77\x0c\xf2\x77\xb3\x8b\x8a\xd3\xee\x81\x26\x52\xcc\xbc\x7a\x0f\x7a\x18\xe8\xf0\xea\xfd\x7b\xd0\x85\x47\xa8\x9b\xc3\x61\x71\x4a\x7b\x57\xda\x52\xeb\x7b\xea\x82\xd1\x05\x90\x67\x43\x37\x45\x9a\x6b\xc7\xf5\x6a\xf5\xc8\xf9\xae\xf2\xfe\x9d\x12\x9a\x29\xba\xe0\xef\x00\x00\x00\xff\xff\x81\x79\xf9\x64\x05\x1f\x00\x00")

func _0_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0_initUpSql,
		"0_init.up.sql",
	)
}

func _0_initUpSql() (*asset, error) {
	bytes, err := _0_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0_init.up.sql", size: 7941, mode: os.FileMode(0644), modTime: time.Unix(1635640494, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x24, 0xd8, 0x20, 0xe1, 0xd6, 0x79, 0x18, 0x58, 0x8d, 0x21, 0xc5, 0xec, 0x42, 0x87, 0x1a, 0xaf, 0x7a, 0x49, 0x94, 0xc5, 0xc0, 0xa0, 0x9, 0x4d, 0xc2, 0xdc, 0xe4, 0xcb, 0xde, 0x2a, 0x29}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0_init.down.sql": _0_initDownSql,
	"0_init.up.sql":   _0_initUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0_init.down.sql": {_0_initDownSql, map[string]*bintree{}},
	"0_init.up.sql": {_0_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
