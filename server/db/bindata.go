// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (2.38kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.245kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x41\x8f\x9b\x3c\x10\xbd\x47\xca\x7f\x18\xed\x05\x90\x72\xf8\x2e\xdf\xa9\xa7\xd5\x8a\xad\xa2\x56\xac\x94\xa4\x95\xaa\xaa\x42\x06\x26\xa9\x1b\xb0\x29\x1e\x27\x4b\x7f\x7d\x85\x4d\x00\x27\x90\x4d\xa4\x56\xf5\x0d\xe3\x37\xf3\xde\xcc\xbc\x49\x2b\x64\x84\x40\x2c\xc9\x11\x1e\x52\x59\x14\x52\xc4\x2c\x4d\x51\xa9\x87\xf9\xcc\x9f\xcf\x00\x00\x04\x2b\x10\xec\x21\x7c\x25\x7b\xd9\x9c\x54\x0a\x45\x15\xe3\x82\xc0\x81\xc6\xe5\x1e\xca\x8a\x17\xac\xaa\x61\x8f\xf5\xc2\x22\x6c\xae\x2c\x66\x04\xc4\x0b\x54\xc4\x8a\x12\x8e\x9c\xbe\x4b\x6d\x6f\xe0\x97\x14\x08\x19\x6e\x99\xce\x09\x7c\x21\x8f\x7e\x00\x6c\xf8\xcf\xd3\x94\x7a\x01\x08\x49\x20\x74\x9e\xcf\x67\xc1\xbb\xf9\x6c\x3e\x73\x55\x68\x85\x55\x4f\xbe\xf9\x8a\x79\x76\xa2\x9c\xf0\x1d\x17\xe3\x12\xcc\xcb\x72\xdf\xff\x6b\xce\xa5\x0c\xad\xfb\x68\x97\x9f\xce\x39\xf1\x3c\x2b\x40\x52\x0f\xa8\x4c\x20\x2f\x51\xcc\x3e\xbd\x56\xba\xee\xdc\x51\xc3\x36\xcb\x01\x2b\xc5\xa5\x70\xcb\x74\x5d\x55\x9f\xe5\xbf\xa0\x8d\x82\xdb\x2d\xa6\xc4\x0f\x18\x67\xa6\x21\x7f\x87\x2b\x8a\xcc\xc6\x87\x37\x2b\x32\x40\x71\x15\x33\xc3\xad\x55\x28\x65\x8e\x4c\xdc\xa8\x90\x2a\x8d\x27\x91\xce\xa8\x5b\x4b\xdc\x38\x00\x58\x30\x9e\xf7\x7f\xef\x40\x0e\x2c\x78\x27\xd2\x4c\x35\xb1\x9d\xea\x91\x5f\xbf\xdd\x84\x54\xb5\x22\x2c\x3a\xec\x8d\x48\x8b\x7d\x7a\x89\xd6\x9b\xd5\xe3\x32\xda\xc0\x76\x1f\x1b\x0e\xed\x1c\x27\x75\x6f\xb0\xe7\x97\x55\xb8\x7c\x1f\xc1\x87\xf0\x0b\xf8\xbd\x3b\x02\xd7\x82\xab\xf0\x39\x5c\x85\xd1\x53\xb8\x6e\xbd\x0d\x7e\x6b\xea\x53\x47\xc6\xb2\x99\x26\xd9\x1e\x4d\x25\x1c\xf6\x71\x3a\xa7\xdb\x6e\xbf\xe9\x44\x70\xb6\x78\xb4\xe0\x3f\x35\x02\x17\x19\xbe\xda\x82\x9b\x4e\xc7\xda\xde\x48\xd1\x11\x37\xf7\x6f\x60\x9b\x8d\x32\x02\x6d\xae\xc7\xd6\x5d\x25\x73\x8c\x95\x4e\x7e\x60\x4a\xf7\xed\xec\x21\xf2\xdf\xae\x6c\xc3\xa4\x71\xa7\x14\xa3\x12\xde\x12\x61\xa1\xe3\x1a\x86\x2a\xaf\x1a\xe7\x86\x33\xb1\xd0\xcd\x6a\xfe\x43\x05\x9a\xb0\xd0\x50\x66\x2b\x66\x62\xac\x87\x7a\xaf\x38\xc9\x19\x9b\xb3\xb1\x5e\x46\xeb\x70\xb5\x81\x65\xb4\x79\x71\xcb\x77\x7a\xf6\xf9\xf1\xe3\xa7\x70\x0d\xbe\x97\x89\xec\x7f\x54\x48\xc4\xc5\xce\x9b\x00\x5b\xd6\x16\xbb\x80\x33\x7a\x5d\xa4\x82\x09\xb6\x43\x6f\x01\x67\x31\x17\x9d\x04\xdf\x93\x47\x81\xd5\xf5\x27\x07\x8e\xc7\xcb\x17\x17\xc4\xc6\x4d\xdd\x91\x29\x2b\x7e\x60\x84\x6e\x68\x26\xea\xc6\x8a\xee\x65\xa9\x93\x9c\xa7\x26\xc3\xef\x00\x00\x00\xff\xff\xcd\x9c\x5f\x72\x4c\x09\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 2380, mode: os.FileMode(0666), modTime: time.Unix(1645469518, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x28, 0xb6, 0x22, 0x8a, 0x14, 0x45, 0x28, 0xd7, 0xd, 0x84, 0xf9, 0x94, 0x77, 0xa9, 0xa8, 0xa5, 0xc3, 0xa1, 0xbd, 0xa5, 0x39, 0x61, 0xa3, 0x81, 0x43, 0xd0, 0xe7, 0xef, 0xf9, 0xf2, 0xc6, 0x8e}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xdd\x6e\xdb\x36\x14\xbe\x0f\x90\x77\x38\xf0\x8d\x6d\xc0\x18\x92\x02\xb9\xda\x55\x50\xb8\x9d\xb1\xd6\x19\x6c\x6f\x40\x31\x0c\x02\x2d\x1d\x2b\x44\x28\xd2\x23\xa9\xb4\xea\xbb\xed\x66\x4f\x36\x50\x7f\x26\x25\x52\x56\x82\xb9\x1b\x50\x5f\xb4\x80\xf4\xf1\x9c\x8f\xe7\xf7\x53\x62\x89\x44\x23\x68\xb2\x67\x08\x93\x84\x27\x77\x18\x29\xd4\x9a\xf2\x74\x72\x7d\x35\xbb\xbe\x02\x00\x70\x1e\x47\x34\x81\x3d\x4d\x29\xd7\xd5\x4b\xf3\x8b\x05\x57\x5a\x12\xca\x75\x07\x7b\x7c\x3a\x81\xcc\xef\x28\x69\x46\x64\x01\x4f\x58\x2c\xaa\x37\x15\x81\x24\xda\x17\x35\xa4\xb2\x0d\xc0\x73\xc6\x3a\x18\xa2\x6b\x8c\xa6\x19\x2a\x4d\xb2\x23\x7c\xa6\xfa\x51\xe4\xba\x7c\x02\x5f\x05\x47\x48\xf0\x40\x72\xa6\x61\xc6\xc5\xe7\xd9\x1c\x88\xfd\x6e\x9a\xeb\x78\x3a\x07\x2e\xb4\x6d\xfe\x19\xa5\xa2\x82\x9f\x58\xb6\x14\x6a\x9c\x7d\x83\xd6\xfc\xcd\xbc\x3e\x4e\x55\x44\x62\x4d\x9f\xb1\x3d\x2e\x04\x43\xc2\x87\x8f\x6b\x99\x63\x63\x21\x16\x59\x26\x78\x44\xe2\x18\x95\x2a\xef\x87\x5f\xca\xab\x76\x88\xe6\x0a\x65\xa4\x49\xaa\x1a\x6b\x06\xf7\xfb\x1f\x3d\x9c\x2a\x94\xc6\xcc\x42\x06\x70\x9c\x64\x68\x93\x0b\xf9\xcd\x44\x92\x33\xf4\xe1\x4e\x98\x04\x55\x2c\xe9\x51\xb7\x81\xf4\xd8\xaa\x90\x6f\x1f\xd6\xdb\xdd\xe6\x7e\xb5\xde\xc1\xe1\x29\x72\xeb\xa5\xce\xf4\xbe\x38\x95\xcd\xbb\x87\xcd\x72\xf5\x7e\x0d\x3f\x2f\x3f\xc1\xec\x54\x2d\x73\xb7\xb0\x36\xcb\x77\xcb\xcd\x72\xfd\x76\xb9\x85\x89\x09\xd3\x04\x66\x65\xb4\x68\xd2\x04\x79\xd0\x6d\x99\x80\x2a\xfe\x21\xcf\x76\x8e\xc2\xce\xdd\x54\xce\x4c\x84\xe7\xe6\xe2\xf3\x1f\xcd\xbf\x03\xdd\x16\x11\xa5\x68\xca\x33\xe4\xfa\xd4\x78\xa1\xe6\xf8\xef\x7b\xc3\x57\xdb\x9e\xde\xa8\x73\x10\x3c\xbe\x18\x1c\x30\x5d\x98\x14\x0c\xcb\x5e\xeb\xd4\xd8\x50\x89\x85\x82\xec\x8c\xa6\x5f\x36\xab\x8f\xf7\x9b\x4f\x55\xa6\x6b\xce\x8b\x1e\xab\xf9\xa8\x12\xb6\x5c\x18\x4b\x81\x72\x6a\x8a\xf3\xdf\xac\x62\xcb\x73\xfd\x28\xe0\xbc\x77\xb1\x30\x0b\x77\x23\x78\x8e\xbe\x8c\x97\x95\xc1\x00\x37\x0b\x31\x40\xcb\x42\x4d\xda\x2e\xab\x7a\xcc\xdf\x65\x99\xd9\x50\x66\x7a\x16\x47\xf4\xf6\xd7\x60\x67\x5d\xac\xa7\x5e\xd6\x4d\xd6\xbc\xee\x54\xfe\xc0\x2a\xb6\x6f\x7e\x66\x1f\x87\x53\xe9\x18\xb9\xc4\x90\x1e\x9c\x90\xf4\x2b\x46\x31\xd1\x98\x0a\x59\x7c\x5f\xc9\x73\xae\x3e\x42\x4d\xa9\x23\x89\xd1\xeb\x64\x78\x76\x39\x6e\xbe\x75\x7e\xeb\xe2\xaa\x32\x6b\x2f\x84\xa6\xea\xda\x05\x72\x56\x77\x36\x27\x5e\xa1\x3b\x6d\x0f\xc3\xea\xb3\x8e\xef\x65\xf7\x6c\x87\xce\x28\x25\xda\x5b\xa3\x7e\x23\x21\xf5\xe7\xd4\x4d\x4f\x53\x8a\x5c\xc6\xa8\x7c\x68\x8f\xb2\xec\x29\xd5\x41\x34\x23\x3c\xcd\x49\xda\xb5\x1e\x40\x23\x7f\xa6\x52\x94\xfb\x44\x9d\x47\x53\x15\x31\x4c\x91\x27\x26\xfd\x56\x60\xc7\x68\xf4\x03\x61\x0a\x2d\x99\x9f\x73\xfa\x67\xde\x89\xd9\xcb\x0d\xd9\xb3\xd4\x17\xf7\x13\x77\xc2\xea\xbd\x19\xc8\x90\x95\x1d\xbb\x81\x07\x91\x19\x65\x8c\x46\xf1\x23\x61\x0c\x79\x8a\x91\x24\xa6\x58\x7c\x75\x4f\x64\x26\x64\x14\x33\xa2\x9c\xbc\x78\x90\x8f\x54\x47\x47\x41\xdd\x7c\x78\x91\xbd\xaf\x04\x2f\xcf\x31\x9b\xe8\x1b\x7f\x29\x34\x6e\xff\x17\xc2\xaa\x21\xe3\x19\xde\x01\x62\x0e\xe6\x3c\x2b\x67\xe1\xd6\xfa\x6a\x04\x1f\x53\xd1\x01\x02\x36\xe4\xac\x7f\x47\xac\x75\xe4\x5d\xbd\x40\x28\x4f\xf0\x0b\x78\x73\x03\x82\xbb\x2f\xfa\xc1\x5d\xf4\x16\xcc\x58\xe3\x51\x39\x35\xc7\x78\x28\x59\x03\xe5\x31\xcb\x13\x6c\x00\x01\x87\xce\x3a\x6c\xa6\x61\x7f\x1f\x36\x6f\x46\xfd\x09\xa6\x05\xbf\x66\x17\x8e\xf8\xce\xbc\xf8\x02\x7c\xb5\xbc\x72\x87\xca\x28\x01\xd4\x06\xeb\x92\xda\x67\xb5\xde\x2e\x37\x3b\x58\xad\x77\x0f\x43\x9d\xb6\xa8\x54\xdc\xfc\xfa\xea\xb7\xfb\x0f\xbf\x2e\xb7\x30\x9b\xee\x28\x2f\xa6\x0b\x98\xbe\xf9\xfb\x2f\xd8\x17\x60\xfe\x3b\xe8\x1f\xa6\xcd\xdd\x01\x60\x36\xdd\x66\x84\x31\x03\xba\x33\x90\xbb\x3e\xe0\x23\x26\x34\xcf\x86\x10\x1f\x88\x4c\xd1\x00\x6e\x6f\x0c\xe2\xf6\xa6\x0f\xf9\x29\xaf\x11\xa5\x8d\x5b\x8f\x91\xf7\x44\xa6\x84\xeb\x9c\xf0\x92\x71\x69\xe9\x4d\x69\x09\x84\x04\x66\x5c\xc8\x69\x15\x90\x7f\x02\x00\x00\xff\xff\x31\xef\xf6\x60\x7d\x14\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5245, mode: os.FileMode(0666), modTime: time.Unix(1645471419, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0x9c, 0xd6, 0x6f, 0x75, 0xde, 0x42, 0xcc, 0x22, 0x7d, 0xe, 0x79, 0x49, 0x98, 0x34, 0x3, 0xe4, 0xfe, 0x76, 0x74, 0x35, 0xac, 0x30, 0x9f, 0x17, 0x77, 0x7, 0x96, 0x16, 0xc3, 0x70, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
