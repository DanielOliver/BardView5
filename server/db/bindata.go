// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (2.304kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (5.765kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x8f\x9b\x3c\x10\xbe\xf3\x2b\x46\x7b\x01\xa4\x1c\xde\xcb\x7b\xea\x69\xb5\x62\xab\xa8\x15\x91\x92\xb4\x52\x55\x55\xc8\xc0\x24\x75\x03\x36\xf5\x47\xb2\xf4\xd7\x57\xd8\x04\xf0\xc6\xc9\x12\xa9\x55\x7d\x02\x8f\x9f\x99\x67\x3e\x9e\x29\x04\x12\x85\xa0\x48\x5e\x21\x3c\x14\xbc\xae\x39\xcb\x48\x51\xa0\x94\x0f\x41\x14\x00\x00\x30\x52\x23\xd8\xa3\xf0\x45\x05\xfd\x37\x14\x9c\x49\x25\x08\x65\x0a\x1c\x5c\xd6\x1c\xa0\x11\xb4\x26\xa2\x85\x03\xb6\x0b\x03\xb0\x71\xca\x8c\x28\x50\xb4\x46\xa9\x48\xdd\xc0\x89\xaa\xef\x5c\xdb\x1b\xf8\xc5\x19\x42\x89\x3b\xa2\x2b\x05\x11\xe3\xa7\x28\x06\x32\xb5\x85\x5a\x15\x61\x0c\x8c\x2b\x60\xba\xaa\x82\xf8\x5d\x10\xb8\xf4\xb5\x44\x71\x66\xdd\x7d\x67\xb4\x3c\x93\xcd\xe9\x9e\x32\x2f\x77\xf3\xb0\x39\x0c\xa6\xee\x5c\xd0\xd7\x7a\x74\x75\xf9\xeb\x9c\x33\x3f\x37\xef\xbc\x9d\xd0\xb8\x02\xbc\x00\x11\xfb\xf2\x56\xc1\x86\x73\x47\xe5\x6c\x90\x23\x0a\x49\x39\x73\x0b\x74\x3b\xa5\x31\xc8\x7f\xb1\x75\x82\xbb\x1d\x16\x8a\x1e\x31\x2b\x4d\x1f\xfe\x0a\x53\x64\xa5\x75\x0f\x6f\x96\x63\x04\x51\x99\x11\xc3\xac\x4f\x8f\xf3\x0a\x09\x9b\x99\x9e\x12\x1a\xfb\x0c\x9d\xd1\xb6\x0a\x98\xd7\x79\xac\x09\xad\x46\xe3\x7c\xe0\x44\x6f\xf7\x01\xcd\x24\x2b\xb2\x97\x23\xf0\xeb\xb7\x39\x40\xd9\x4a\x85\xf5\x00\x9d\x07\x34\xc8\xa7\x55\xba\xd9\xae\x1f\x97\xe9\x16\x76\x87\xcc\x10\xe8\x87\x37\x6f\x07\x45\x3d\xaf\xd6\xc9\xf2\x7d\x0a\x1f\x92\x2f\x10\x8d\x82\x88\x1d\xc9\xad\x93\xe7\x64\x9d\xa4\x4f\xc9\xa6\xd7\x31\x44\xbd\x84\xfb\x46\xf8\x42\x99\xde\xd8\xd6\x5c\x89\x36\xed\xde\xd5\x80\x6e\x8f\xa3\xae\x01\xf1\x74\xbd\x68\x46\x7f\x6a\x04\xca\x4a\x7c\xb1\x55\x36\xcd\xcd\xb4\xbd\xe1\x6c\xa0\x6c\xee\x6f\x22\xbb\xd5\xe1\x01\x76\xd7\x97\x0b\x4d\xf0\x0a\x33\xa9\xf3\x1f\x58\xa8\x3b\xd6\xf1\x14\xf6\xef\xb6\xb1\x61\xd1\x69\x90\x33\x0f\xf7\x37\xd8\x5b\x9c\x97\xfc\x34\xbb\x9b\xea\x98\x71\xfc\xcb\xda\xec\xdd\x3f\x54\x18\xaf\x50\xa6\x29\xf6\x99\xf8\xe7\x77\x9a\xeb\x75\xbd\x38\x63\x32\x9d\xdf\x65\xba\x49\xd6\x5b\x58\xa6\xdb\x95\x5b\xb6\xfe\xcd\xe7\xc7\x8f\x9f\x92\x0d\x44\x61\xc9\xca\xff\xf1\xc4\x45\x55\x86\x5e\x9c\xe5\x6a\x61\x0b\x70\x59\x0d\x4e\x6a\xc2\xc8\x1e\xc3\x05\x38\xee\x16\x67\xda\x51\xc8\x4f\x0c\xc5\x0d\xfb\x91\xe2\xe9\xb5\xf9\x15\x1b\xaf\x54\x07\x06\x8d\xa0\x47\xa2\xd0\x71\x4a\x58\xdb\x69\xcc\xb9\x6b\x74\x5e\xd1\xa2\x73\xfe\x3b\x00\x00\xff\xff\xfe\x15\xf6\xb2\x00\x09\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 2304, mode: os.FileMode(0644), modTime: time.Unix(1642296206, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0x65, 0x7, 0x9b, 0x70, 0xe, 0x61, 0x79, 0x44, 0x26, 0x52, 0xff, 0xde, 0x8e, 0x3e, 0x7b, 0xa3, 0x9a, 0xb9, 0xd1, 0x4a, 0x25, 0x35, 0x91, 0x97, 0x87, 0xe1, 0x54, 0xfa, 0xf6, 0x5e, 0xda}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0644), modTime: time.Unix(1642271179, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\x06\xbe\x58\x06\x8c\x22\x1b\x60\x4f\x3d\x2d\x02\x27\x35\x9a\x78\x0b\xdb\x2d\x10\x04\x81\x40\x4b\x63\x2d\xb1\x14\x69\x90\xd4\x6e\x94\x77\xeb\xa5\x4f\x56\x50\x7f\x26\x2d\xea\xc7\x8b\xf5\xf6\x50\x5d\x0c\x90\x1f\x67\x86\x9c\xf9\x3e\x0e\x1d\x49\x24\x1a\x41\x93\x3d\x43\x98\xc6\x3c\xbe\xc5\xf0\x59\x48\x16\x4f\x27\xc1\x04\x00\xc0\x1a\x0a\x69\x6c\x46\x60\x4f\x13\xca\x75\x31\x6b\xbe\x48\x70\xa5\x25\xa1\x5c\x3b\xe0\xe3\x63\x83\x30\xdf\x51\xd2\x94\xc8\x1c\x1e\x31\x5f\x14\x13\xa5\xe7\x38\xdc\xe7\x0d\xa6\x34\x0c\xc0\x33\xc6\x5c\x10\xd1\x0d\x48\xd3\x14\x95\x26\xe9\x11\x9e\xa9\x7e\x10\x99\x2e\x46\xe0\xa7\xe0\x08\x31\x1e\x48\xc6\x34\x04\x5c\x3c\x07\x73\x20\xf6\xdc\x2c\xd3\xd1\x6c\x0e\x5c\x68\xcb\xfe\x13\x4a\x45\x05\xb7\x03\x6d\x82\xa8\x80\xf6\x5c\x63\xff\xdd\xbc\x5c\x4f\x55\x48\x22\x4d\x9f\xd0\x5a\x2f\x04\x43\xc2\xfb\xd7\x6b\x99\x61\x65\x22\x12\x69\x2a\x78\x48\xa2\x08\x95\xaa\xb6\x88\x3f\x8a\xfd\xba\xb1\x66\x0a\x65\xa8\x49\xa2\x4e\xf6\x0c\xf0\xdb\xf7\x73\xa0\xca\x95\xc6\xd4\x81\xfa\x81\x31\x4a\xfa\x84\x71\x78\x90\x22\x2d\xb3\xe6\x49\x01\x27\x29\x82\xfb\xf9\xe3\x4b\x45\x9c\x31\x1c\x00\x16\xc8\x0f\xf7\xeb\xed\x6e\x73\xb7\x5a\xef\xe0\xf0\x18\xda\x45\x53\xe5\x7b\x9f\x37\xb5\xf3\xf1\x7e\xb3\x5c\x7d\x5a\xc3\xef\xcb\xaf\x10\x9c\x6a\x66\xee\x14\xd7\x66\xf9\x71\xb9\x59\xae\x3f\x2c\xb7\x30\x35\xc7\x34\x85\xa0\x38\x2d\x1a\x57\x87\xdc\xe3\xb1\x38\xfe\xf2\xf4\x3b\x9c\xda\x09\xea\xf4\xeb\xa6\x31\x30\xa7\x36\xe8\xdb\x3e\x7f\xbf\xef\x76\x86\xba\x37\x6e\x93\x17\x02\x97\xb7\xf3\xc9\x64\xfe\xeb\x64\xd2\xc9\xf6\x90\x28\x45\x13\x9e\x22\xd7\x35\xf1\xcf\xf8\x59\x15\x46\x27\x35\xaf\x49\xcb\xda\xb7\x87\x51\x6d\x4a\x56\x89\xef\x58\xbb\xf0\x89\x9a\x17\x23\x05\xc3\x82\xdc\x65\x1c\x55\x29\x77\x57\xb2\xff\x34\x6d\x19\xfc\x63\xb3\xfa\x72\xb7\xf9\x5a\x66\xb6\x0a\x73\x71\x16\xcb\x7c\x90\x22\x96\x6d\x63\xc3\x5f\x37\x75\xf5\xbf\x16\x4b\x2c\xa7\xc5\x40\x47\xb5\x9e\xd5\xdc\x8b\x2a\xf5\x82\x50\xac\x14\xf9\x03\xb2\x00\xdd\xd1\x58\xa0\x69\x45\xdc\x82\x2c\x5e\xb6\xa4\xe6\xb2\x33\x3a\x9c\x1f\xd1\xc3\x94\x3e\x96\x5c\x8b\x21\x17\xb1\xc3\x52\xf3\xb3\x8a\xee\xbe\xcf\xed\x3d\xf7\x5e\xeb\x9d\x99\x73\x2c\xbc\xbe\xc6\x77\x6a\x9b\xa2\x3f\x31\x8c\x88\xc6\x44\xc8\xfc\xff\x92\x2e\x67\xd3\x83\x6d\x98\x3a\x92\x08\xbd\x1e\x7a\xf2\xe9\xba\x78\xc3\x84\x56\x85\x64\x52\x69\x09\x79\x5d\x5e\x8d\xea\x0f\x75\xa8\xf5\x82\x17\xf4\xa8\x30\xe2\x2e\xac\xbf\x6b\xb7\xaa\x17\x97\xd3\x81\x4a\xa5\xdd\x66\xde\xbb\x1f\x4f\xcf\xe7\x2d\x90\x62\xd0\xe9\x48\x1d\xec\xb7\xef\xad\x16\xf1\xa4\x03\x43\x76\x09\xab\x64\x7e\x44\x0c\x4e\x3d\x0e\x60\x53\xca\x18\x0d\xa3\x07\xc2\x18\xf2\x04\x43\x49\x34\xe5\x89\xbf\x07\x60\x84\x27\x19\x49\x50\x8d\xd8\x5b\x8c\x2a\x92\xf4\xa8\xcf\x72\xd4\x26\xd5\xa0\x4a\xbe\x65\x13\x5c\xfb\xec\xb9\xd5\xdd\xa2\x79\xf5\x5b\xbd\x8e\xc0\xa3\x2c\xfe\x78\x1c\xc8\x50\x38\xee\x0d\x30\xd8\x97\xdb\x05\xea\xf7\x6e\x23\x86\x9c\x3b\xcd\x82\xdd\x5a\xf8\xa4\x8d\xf2\x07\xb2\xa7\x9a\x94\x1d\xb8\xa5\x6e\xa7\x89\x53\xaf\xda\x2d\x6d\x16\xfa\x25\xea\x36\xea\x09\x7e\x7d\x61\xbb\xe8\x11\xee\x79\x18\x8f\x7f\x19\x77\x3d\x8d\xdb\x7f\x7b\xb4\x82\x5a\x74\x5e\x41\x7e\xa4\x90\x66\x98\xb0\xea\xa9\x5d\xda\x1c\xf3\x6f\xc1\x81\x30\x85\x7d\x2f\x03\x2b\xe9\x6f\x29\x1e\x96\xdb\xff\xee\x55\x60\x05\x51\x25\xa1\x2f\x8c\x53\x9e\x46\x92\x77\xea\x5b\x69\x71\x98\xf2\x18\x7f\xb4\xb9\x57\x06\x5e\xad\x01\xc1\x5b\x88\xf3\x1d\x2e\x5a\x85\xd4\x25\x14\xf5\xa5\x74\x26\x13\xf5\xf0\x18\x91\x68\xb0\x97\x4b\xc4\x88\xde\xe7\xca\xea\xf0\xd2\x06\xda\xe2\xfb\xb8\x2e\xb7\x39\xa5\x2b\x35\xb8\xab\xf5\x76\xb9\xd9\xc1\x6a\xbd\xbb\xef\xbb\xae\x16\x65\x8f\x3e\x9f\xfc\x75\xf7\xf9\xcf\xe5\x16\x82\xd9\x8e\xf2\x7c\xb6\x80\xd9\xfb\x7f\xfe\x86\x7d\x0e\xe6\xe7\xa0\x7f\x99\x55\x5b\x06\x80\x60\xb6\x4d\x09\x63\x06\x73\x6b\x10\xb7\xad\xf9\x2f\x18\xd3\x2c\xed\x01\x7c\x26\x32\x41\x33\x7f\xf3\xce\x00\x6e\xde\xb5\x10\xbf\x65\x15\xa0\xb0\x70\xd3\x36\xf1\x89\xc8\x84\x70\x9d\x11\x5e\x04\x5b\xd8\x79\x5f\xd8\x01\x21\x81\x19\x07\x72\x66\x0e\xe2\xdf\x00\x00\x00\xff\xff\xd0\x9a\x31\x74\x85\x16\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 5765, mode: os.FileMode(0644), modTime: time.Unix(1642296254, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x35, 0x59, 0x3a, 0xa1, 0xd1, 0x4d, 0x71, 0x96, 0x40, 0x43, 0xc1, 0x50, 0xbb, 0xbd, 0x21, 0x71, 0xf3, 0x7b, 0x8a, 0xae, 0x25, 0x12, 0x47, 0x90, 0x38, 0x4f, 0xe2, 0xb1, 0xe7, 0xd0, 0xec}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
