// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../migrations/0000_init.down.sql (0)
// ../migrations/0000_init.up.sql (3.08kB)
// ../migrations/0001_world.down.sql (0)
// ../migrations/0001_world.up.sql (6.228kB)

package db

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0000_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0000_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initDownSql,
		"0000_init.down.sql",
	)
}

func _0000_initDownSql() (*asset, error) {
	bytes, err := _0000_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1634514631, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0000_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4b\x8b\xdb\x3c\x14\xdd\x07\xf2\x1f\x2e\xb3\xb1\x03\x59\x7c\x9b\x6f\xd5\xd5\x30\x78\x4a\x68\xc9\x40\x92\x16\x4a\x29\x46\xb1\x6f\xa6\x6a\x6c\x29\xd5\x23\x89\xfb\xeb\x8b\x2d\xbf\x24\xbf\x12\x98\xa1\x77\x67\xf9\x1e\xe9\x9c\xfb\xd0\x55\x24\x90\x28\x04\x45\xf6\x09\xc2\x43\xc4\xd3\x94\xb3\x90\x44\x11\x4a\xf9\x30\x9f\xf9\xf3\x19\x00\x00\x23\x29\x82\x31\x85\x57\x65\x16\x73\x8b\x38\x93\x4a\x10\xca\x14\x58\xd0\xf0\x74\x84\x93\xa0\x29\x11\x19\x1c\x31\x5b\x1a\x84\x39\x2b\x0e\x89\x02\x45\x53\x94\x8a\xa4\x27\xb8\x50\xf5\x93\x6b\xb3\x02\x7f\x38\x43\x88\xf1\x40\x74\xa2\xc0\x67\xfc\xe2\x2f\x80\xb4\xff\x79\x5a\x45\xde\x02\x18\x57\xc0\x74\x92\xcc\x67\x8b\x0f\xf3\xd9\x7c\x66\xab\xd0\x12\x45\x43\x3e\xff\x0a\x69\x5c\x51\xde\xd3\x57\xca\xfa\x25\x14\x9e\xa7\x63\xf3\x2f\xb7\xae\x0c\xad\x9b\xdd\xba\x9f\x96\x55\x3c\x9d\x00\xec\xb3\x16\x95\x01\x64\x17\x45\x8c\xeb\x58\xe8\x6a\xbb\x23\x86\xe5\x29\x67\x14\x92\x72\x66\x87\x69\x5c\x55\x73\xca\x7f\x8b\x72\x17\x3c\x1c\x30\x52\xf4\x8c\x61\x5c\x24\xe4\x7d\xb8\x22\x8b\xcd\xfe\x30\x19\x91\x16\x8a\xca\x90\x14\xdc\x4a\x85\x9c\x27\x48\xd8\x8d\x0a\x95\xd0\x58\x89\xb4\x4a\xdd\xb4\xc4\x8d\x05\x80\x29\xa1\x49\xf3\xf7\x0e\x64\xab\x05\xef\x44\x16\x55\xad\xc8\xab\x6c\x90\xdf\x7f\xdc\x84\x94\x99\x54\x98\xd6\xd8\x1b\x91\x06\xfb\xf4\xb2\xde\xee\x36\x8f\xab\xf5\x0e\x0e\xc7\xb0\xe0\x50\xd6\xf1\x3e\x6b\x1a\xec\xf9\x65\x13\xac\x3e\xae\xe1\x53\xf0\x0d\xfc\xa6\x3b\x16\x76\x0b\x6e\x82\xe7\x60\x13\xac\x9f\x82\x6d\xd9\xdb\xe0\x97\x4d\x5d\x65\xa4\xef\xb4\x22\x49\x26\x47\x43\x07\xb6\xf3\x38\x7c\xa6\x9d\x6e\x3f\xcf\xc4\xc2\xb9\x78\x34\xa3\xbf\x35\x02\x65\x31\x5e\x4d\xc0\x8b\x4c\x87\xda\xac\x70\x56\x13\x2f\xd6\x27\xb0\xf9\x8d\xd2\x03\xcd\x97\xfb\xae\x3b\xc1\x13\x0c\xa5\xde\xff\xc2\x48\xdd\x77\x67\xb7\x91\xff\xf6\xca\x2e\x98\xe4\xdd\xc9\x59\xaf\x84\x29\x11\x06\xda\xaf\xa1\xad\x72\xb4\x71\x6e\xb0\x81\x0b\xbd\xb8\x9a\xdf\x28\x40\x03\x2d\xd4\x96\x59\x8a\x19\x28\xeb\xb6\xde\x91\x4e\xb2\xca\xc6\x29\xeb\xd5\x7a\x1b\x6c\x76\xb0\x5a\xef\x5e\xec\xf0\x55\x6e\x5f\x1f\x3f\x7f\x09\xb6\xe0\x7b\x31\x8b\xff\xc7\x0b\x17\x49\xec\x0d\x40\x0d\x67\x83\x5c\x82\x43\xae\xde\x27\x25\x8c\xbc\xa2\xb7\x04\x6b\xc7\x65\x4d\xdf\xf7\xf8\x85\xa1\x18\x73\x38\x53\xbc\xb8\xff\x3b\x94\xfa\x9b\xb9\xa6\x71\x12\xf4\x4c\x14\xda\x1b\x13\x96\xe5\x2d\x68\x2f\x9e\xf4\x3e\xa1\x91\xd7\x57\xcc\x78\x55\x28\x18\x49\x42\xc9\xb5\x88\xb0\x29\x68\xe7\x47\xfd\x2a\x19\x79\x93\xb8\x90\xe9\xe7\x89\xf3\xc8\xa8\xad\x9c\xe8\xc3\x0f\x8b\xda\xde\xae\x90\xa1\xfb\xb0\xe8\xf0\xa9\x46\x6d\xdb\x7a\x1e\x16\x4e\x1c\x8e\x68\xe4\x95\xfd\xec\xce\x59\xc7\xbb\xe2\xd0\xef\xed\x4c\xc8\x26\x0e\x66\xe0\x8d\x4f\xc5\x09\x6f\x67\x6e\x5b\xde\xd3\x73\xd3\xd5\xf1\x1e\x23\xd4\xf4\xfc\xdf\x00\x00\x00\xff\xff\x5b\x8a\xa7\x34\x08\x0c\x00\x00")

func _0000_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0000_initUpSql,
		"0000_init.up.sql",
	)
}

func _0000_initUpSql() (*asset, error) {
	bytes, err := _0000_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0000_init.up.sql", size: 3080, mode: os.FileMode(0666), modTime: time.Unix(1642385905, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0xc9, 0x93, 0x3e, 0xa8, 0xf3, 0x87, 0x2a, 0x70, 0xa9, 0x84, 0x9f, 0x44, 0xe9, 0x39, 0xcf, 0xce, 0xc7, 0x64, 0xc8, 0xef, 0x37, 0xfb, 0x6, 0xc9, 0x17, 0xac, 0xb9, 0x31, 0x19, 0x3f, 0xd6}}
	return a, nil
}

var __0001_worldDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _0001_worldDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldDownSql,
		"0001_world.down.sql",
	)
}

func _0001_worldDownSql() (*asset, error) {
	bytes, err := _0001_worldDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.down.sql", size: 0, mode: os.FileMode(0666), modTime: time.Unix(1640657667, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __0001_worldUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xcd\x6e\xe3\x36\x10\xbe\x07\xc8\x3b\x0c\x7c\xb1\x0c\x18\xc5\x66\x81\x9c\x7a\x0a\x16\xde\xad\xd1\x5d\xa7\xb0\xdd\x02\x8b\xc5\x42\xa0\xa5\xb1\x42\x84\x22\x0d\x92\x4a\xa2\x7d\xb7\x5e\xfa\x64\x85\xfe\x22\x52\x22\x25\x25\xa8\xd3\xc3\xea\x90\x00\xe2\xa7\x99\xa1\xe7\x9b\x6f\x86\x8c\x24\x12\x8d\xa0\xc9\x81\x21\xcc\x62\x1e\x5f\x63\xf8\x28\x24\x8b\x67\x97\x17\xc1\xe5\x05\x00\x80\xf1\x32\xa4\x31\x94\xcf\x81\x26\x94\xeb\x6a\xbd\x78\x22\xc1\x95\x96\x84\x72\x6d\xc1\x4f\xf7\x2d\xa4\x78\x4e\x92\xa6\x44\xe6\x70\x8f\xf9\xb2\x5a\xa9\xfc\xc7\xe1\x21\x6f\x51\x95\x71\x00\x9e\x31\xd6\x81\x11\xdd\xc2\x34\x4d\x51\x69\x92\x9e\xe0\x91\xea\x3b\x91\xe9\xf2\x0d\xfc\x10\x1c\x21\xc6\x23\xc9\x98\x86\x80\x8b\xc7\x60\x01\xc4\x5c\x9b\x67\x3a\x9a\x2f\x80\x0b\x6d\x7a\x78\x40\xa9\xa8\xe0\x66\xb4\x6d\x20\x35\xd4\x5c\x7b\xf6\xf0\x6e\x51\x5b\xa0\x2a\x24\x91\xa6\x0f\x68\x5a\x10\x82\x21\xe1\xc3\x16\xb4\xcc\xb0\x31\x12\x89\x34\x15\x3c\x24\x51\x84\x4a\x35\x1b\xc5\xa7\x72\xdb\x9d\x88\x33\x85\x32\xd4\x24\x51\x86\xcd\x02\xfa\xed\x7b\x0f\xaa\x72\xa5\x31\xb5\xc1\x1e\x68\x8c\x92\x3e\x60\x1c\x1e\xa5\x48\xab\x2c\x3a\x13\xc2\x49\x8a\xd0\x79\x3c\x71\xa6\x22\xce\x18\x7a\xa0\xa6\x63\x15\x49\x7a\xd2\x66\x12\x3c\x16\xf1\x49\xa3\xe4\x84\x85\x4a\x64\x32\xc2\x92\x95\x8e\x18\xbb\xb0\x7b\xcc\xbb\x8e\x2b\xe0\x87\xdb\xcd\x6e\xbf\xbd\x59\x6f\xf6\x70\xbc\x0f\x4d\x02\xd7\xbc\x3b\xe4\x2d\x8f\x3f\xde\x6e\x57\xeb\x4f\x1b\xf8\x7d\xf5\x15\x82\x96\xbe\x0b\x9b\xe9\xdb\xd5\xc7\xd5\x76\xb5\xf9\xb0\xda\xc1\xac\x48\xd4\x0c\x82\x32\x5f\x34\x6e\x32\x3d\xe0\xb4\xe4\x40\x45\x01\x9f\x5f\x93\x26\x7e\xd7\x36\x9b\x82\x22\x69\xe3\xee\x4d\x06\x78\xdc\xf7\x49\x32\xb0\x7d\x53\x54\x20\xb0\xd5\x64\x31\x21\x07\x96\xb3\x4e\x4e\x3d\xf1\xf5\x09\x32\x10\x5f\x07\x3c\xf3\x7c\x7e\x79\xb1\xf8\xb5\xf8\xeb\x55\xcc\x90\x28\x45\x13\x9e\x22\xd7\xad\x78\x76\xf4\xad\x66\xa9\x5f\xd9\xce\x2a\x6a\x8d\x77\x87\x18\x39\xf4\xac\xe6\xab\xe7\xe3\xa5\xb3\x39\xb8\x41\x52\x30\x2c\xb5\xb1\x0a\xa5\xae\x41\x03\xd4\xa3\x80\xfb\x67\xb5\xfa\xc9\x1f\xdb\xf5\x97\x9b\xed\xd7\x2a\xe1\x75\xac\x4b\x78\x39\xbd\x0c\xf3\x85\x15\x0f\xa3\x9a\xe2\xfd\xef\xaa\xdc\xf0\x5b\xbe\xf0\x95\x9a\xbd\xa1\xd7\x97\xd9\xe4\x68\x8c\x6c\x79\x62\x32\x10\x03\x01\x19\xa8\x59\xad\x3d\x4d\x0d\xb9\xab\x28\x2d\x86\x88\xa2\xa7\xe5\x27\x74\x56\xd0\x60\xf5\x9c\xad\x72\x5e\x56\x35\x46\x63\xec\xf0\x7c\x60\x5a\x32\x77\x3e\x32\x34\xf9\x13\x69\x19\x39\x47\xe3\x1a\x52\x40\x45\x7f\x60\x18\x11\x8d\x89\x90\xf9\xcf\x95\x3c\x6b\xeb\x13\x46\x5e\x75\x22\x11\x3a\x9d\x0c\xa6\xd7\x76\xf3\xd6\xf9\xad\xc9\x55\x65\xd6\x94\xfe\x86\x75\xcf\x8d\x62\xf4\x68\xd0\x7c\xf1\xba\xc3\xc1\x94\x26\xda\x3c\xe7\x3f\x21\xbc\x98\x61\x47\x2a\x95\xee\x1c\xa6\x9c\x5b\x72\x0d\xd8\x4e\xc6\x94\x6f\xed\x53\x80\x09\xfe\xf6\xbd\x3f\x8f\xb7\x3a\x31\x6a\x99\xb0\xba\x2d\x4c\x09\xc3\xa2\xe8\x18\x38\xa5\x8c\xd1\x30\xba\x23\x8c\x21\x4f\x30\x94\x44\x53\x9e\x78\x26\x08\x46\x78\x92\x91\x04\xd5\x94\x0d\xba\x4e\x12\x9e\x62\x1b\x57\xd3\x37\x3e\x01\x34\x6e\x87\x46\x02\x9b\x43\x67\x18\x09\x9a\x20\x1c\xc2\xe3\x09\xc9\xc2\x8c\x46\x64\x37\x8b\xf1\x73\x89\xc9\x58\x4f\x00\x26\x64\xd4\xbf\x35\x68\x74\x46\x13\x97\xf8\x51\x7e\x47\x0e\x54\x93\x66\xb0\x37\xf5\xaf\x5d\x6b\xe7\xdf\x01\xf1\x33\xe0\x3f\xd5\xe5\xc8\x99\x2e\x2b\xbc\x57\x53\x1e\xa8\xdd\xad\x3c\x50\x21\x8b\xf7\x84\x35\xd7\x1f\x30\xf5\x22\xe7\x48\x98\xc2\xe1\x33\x87\x91\xff\x37\x56\x16\xc3\xf3\xff\x7a\xde\x30\xe2\xa8\xb3\x31\x18\x49\x9b\xb1\xa9\x65\x3d\x73\x7e\x6a\x55\x37\xe5\x31\x3e\xf5\x2b\xb2\x0a\xbf\xfe\x0c\x04\xef\x21\xba\xfb\x5c\xf6\x68\xe5\x17\x91\xa6\x85\xf5\x25\xa4\x59\x99\x24\x20\xcf\xe0\xd7\xc8\xc7\x94\xc9\xe9\xdc\xca\xf1\xea\x89\xdc\x90\x82\xa9\x33\xf3\xf3\x8f\x75\xce\x71\x79\xbd\xd9\xad\xb6\x7b\x58\x6f\xf6\xb7\x43\x0d\x6e\x59\x0d\xfe\x8b\xcb\x8b\xbf\x6e\x3e\xff\xb9\xda\x41\x30\xdf\x53\x9e\xcf\x97\x30\x7f\xff\xcf\xdf\x70\xc8\xa1\xf8\x77\xd4\xbf\xcc\x9b\xbd\x03\x40\x30\xdf\xa5\x84\xb1\x02\x74\x5d\x40\xae\xfb\x80\x2f\x18\xd3\x2c\x1d\x42\x7c\x26\x32\xc1\x02\x70\xf5\xae\x40\x5c\xbd\xeb\x43\x7e\xcb\x6a\x44\x69\xe3\xca\x61\xe4\x13\x91\x09\xe1\x3a\x23\xbc\x8c\xb8\xb4\xf4\xbe\xb4\x04\x42\x02\x2b\x5c\xc8\x79\xf5\x83\xfc\x1b\x00\x00\xff\xff\xfa\x52\x8b\x64\x54\x18\x00\x00")

func _0001_worldUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_worldUpSql,
		"0001_world.up.sql",
	)
}

func _0001_worldUpSql() (*asset, error) {
	bytes, err := _0001_worldUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_world.up.sql", size: 6228, mode: os.FileMode(0666), modTime: time.Unix(1642385905, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0xb9, 0x78, 0x4a, 0x47, 0x86, 0xab, 0x22, 0xeb, 0x47, 0x7a, 0xdd, 0x8c, 0x1, 0x7, 0x62, 0xf7, 0x15, 0xb1, 0xac, 0x9b, 0xc9, 0x24, 0x63, 0x36, 0xd, 0x3a, 0x65, 0x9b, 0xfb, 0x55, 0xa4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0000_init.down.sql":  _0000_initDownSql,
	"0000_init.up.sql":    _0000_initUpSql,
	"0001_world.down.sql": _0001_worldDownSql,
	"0001_world.up.sql":   _0001_worldUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0000_init.down.sql": {_0000_initDownSql, map[string]*bintree{}},
	"0000_init.up.sql": {_0000_initUpSql, map[string]*bintree{}},
	"0001_world.down.sql": {_0001_worldDownSql, map[string]*bintree{}},
	"0001_world.up.sql": {_0001_worldUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
